<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xorex</title>
  
  <subtitle>要成为世界上最幸福的人啊！</subtitle>
  <link href="https://xorex.space/atom.xml" rel="self"/>
  
  <link href="https://xorex.space/"/>
  <updated>2021-03-29T13:54:50.153Z</updated>
  <id>https://xorex.space/</id>
  
  <author>
    <name>Xorex</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP 的请求与响应</title>
    <link href="https://xorex.space/2021/03/29/9fe744b92f15/"/>
    <id>https://xorex.space/2021/03/29/9fe744b92f15/</id>
    <published>2021-03-29T05:57:37.000Z</published>
    <updated>2021-03-29T13:54:50.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><h3 id="HTTP-版本"><a href="#HTTP-版本" class="headerlink" title="HTTP 版本"></a>HTTP 版本</h3><ol><li><p>HTTP 1.0 一次连接只能获取一个资源</p></li><li><p>HTTP 1.1 一次连接可以获取多个资源</p></li></ol><h3 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h3><p>请求的结构：</p><p><img src="https://xorex.space/image/205.jpg"></p><p>请求行包括：请求方式 请求资源名称 使用协议版本。注意这里的请求资源名称里面是会包含 <code>?XXX=XXX&amp;XXX=XXX</code> 这样的 GET 请求参数的。然后下面的请求实体会可能会包含 POST 请求参数 <code>XXX=XXX&amp;XXX=XXX</code> 。</p><p>常用请求头：</p><h4 id="Accetp"><a href="#Accetp" class="headerlink" title="Accetp"></a>Accetp</h4><p><code>Accept: text/html</code> 浏览器可以接受服务器回发的类型为 text/html。</p><p><code>Accept: */*</code> 代表浏览器可以处理所有类型,(一般浏览器发给服务器都是发这个)。</p><h4 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h4><p><code>Accept-Encoding: gzip, deflate</code> 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate），注意：这不是只字符编码。</p><h4 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h4><p><code>Accept-Language: zh-CN, zh; q=0.9</code>  浏览器申明自己接收的语言。</p><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p><code>Connection: keep-alive</code> 当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。</p><p><code>Connection: close</code> 代表一个 Request 完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接会关闭， 当客户端再次发送 Request，需要重新建立 TCP 连接。</p><h4 id="Host（发送请求时，该报头域是必需的）"><a href="#Host（发送请求时，该报头域是必需的）" class="headerlink" title="Host（发送请求时，该报头域是必需的）"></a>Host（发送请求时，该报头域是必需的）</h4><p><code>Host: www.baidu.com</code> 请求报头域主要用于指定被请求资源的 Internet 主机和端口号，它通常从HTTP URL中提取出来的。</p><h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><p><code>Referer: https://www.baidu.com/?tn=62095104_8_oem_dg</code> 当浏览器向web服务器发送请求的时候，一般会带上 Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。</p><h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h4><p><code>User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36</code> 告诉HTTP服务器，客户端使用的操作系统和浏览器的名称和版本。</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p><code>Cache-Control: private</code> 默认为 private  响应只能够作为私有的缓存，不能再用户间共享。</p><p><code>Cache-Control: public</code> 响应会被缓存，并且在多用户间共享。正常情况，如果要求 HTTP 认证，响应会自动设置为 private。</p><p><code>Cache-Control: must-revalidate</code> 响应在特定条件下会被重用，以满足接下来的请求，但是它必须到服务器端去验证它是不是仍然是最新的。</p><p><code>Cache-Control: no-cache</code> 响应不会被缓存，而是实时向服务器端请求资源。</p><p><code>Cache-Control: max-age=10</code> 设置缓存最大的有效时间，但是这个参数定义的是时间大小（比如：60）而不是确定的时间点。单位是[秒 seconds]。</p><p><code>Cache-Control: no-store</code> 在任何条件下，响应都不会被缓存，并且不会被写入到客户端的磁盘里，这也是基于安全考虑的某些敏感的响应才会使用这个。</p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p><code>Cookie: XXXXXXXXXXXXXXXXXXXXXXXXXXXX</code> 是用来存储一些用户信息以便让服务器辨别用户身份的（大多数需要登录的网站上面会比较常见），比如 cookie 会存储一些用户的用户名和密码，当用户登录后就会在客户端产生一个 cookie 来存储相关信息，这样浏览器通过读取 cookie 的信息去服务器上验证并通过后会判定你是合法用户，从而允许查看相应网页。当然 cookie 里面的数据不仅仅是上述范围，还有很多信息可以存储是 cookie 里面，比如 sessionid 等。</p><h4 id="Range（用于断点续传）"><a href="#Range（用于断点续传）" class="headerlink" title="Range（用于断点续传）"></a>Range（用于断点续传）</h4><p><code>Range: bytes=0-5</code> 指定第一个字节的位置和最后一个字节的位置。用于告诉服务器自己想取对象的哪部分。</p><h3 id="HTTP-响应"><a href="#HTTP-响应" class="headerlink" title="HTTP 响应"></a>HTTP 响应</h3><p><img src="https://xorex.space/image/206.jpg"></p><p>状态行包括：通信协议 状态代码 状态信息</p><p>常见状态代码和状态信息：<a href="https://www.w3school.com.cn/tags/html_ref_httpmessages.asp">响应代码和状态信息手册</a></p><h4 id="Cache-Control（对应请求中的Cache-Control）"><a href="#Cache-Control（对应请求中的Cache-Control）" class="headerlink" title="Cache-Control（对应请求中的Cache-Control）"></a>Cache-Control（对应请求中的Cache-Control）</h4><p><code>Cache-Control: private</code> 默认为private  响应只能够作为私有的缓存，不能再用户间共享。</p><p><code>Cache-Control: public</code> 浏览器和缓存服务器都可以缓存页面信息。</p><p><code>Cache-Control: must-revalidate</code> 对于客户机的每次请求，代理服务器必须想服务器验证缓存是否过时。</p><p><code>Cache-Control: no-cache</code> 浏览器和缓存服务器都不应该缓存页面信息。</p><p><code>Cache-Control: max-age=10</code> 是通知浏览器10秒之内不要烦我，自己从缓冲区中刷新。</p><p><code>Cache-Control: no-store</code> 请求和响应的信息都不应该被存储在对方的磁盘系统中。</p><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><p><code>Content-Type：text/html; charset=UTF-8</code> 告诉客户端，资源文件的类型，还有字符编码，客户端通过 UTF-8 对资源进行解码，然后对资源进行 HTML 解析。通常我们会看到有些网站是乱码的，往往就是服务器端没有返回正确的编码。</p><h4 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a>Content-Encoding</h4><p><code>Content-Encoding: gzip</code> 告诉客户端，服务端发送的资源是采用 gzip 编码的，客户端看到这个信息后，应该采用 gzip 对资源进行解码。</p><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p><code>Date: Tue, 03 Apr 2018 03:52:28 GMT</code> 这个是服务端发送资源时的服务器时间，GMT 是格林尼治所在地的标准时间。HTTP 协议中发送的时间都是 GMT 的，这主要是解决在互联网上，不同时区在相互请求资源的时候，时间混乱问题。</p><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p><code>Server：Tengine/1.4.6</code>  这个是服务器和相对应的版本，只是告诉客户端服务器信息。</p><h4 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h4><p><code>Transfer-Encoding：chunked</code> 这个响应头告诉客户端，服务器发送的资源的方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。</p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p><code>Expires: Sun, 1 Jan 2000 01:00:00 GMT</code> 这个响应头也是跟缓存有关的，告诉客户端在这个时间前，可以直接访问缓存副本，很显然这个值会存在问题，因为客户端和服务器的时间不一定会都是相同的，如果时间不同就会导致问题。所以这个响应头是没有 <code>Cache-Control：max-age=*</code> 这个响应头准确的，因为 max-age=date 中的 date 是个相对时间，不仅更好理解，也更准确。</p><h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h4><p><code>Last-Modified: Dec, 26 Dec 2015 17:30:00 GMT</code> 所请求的对象的最后修改日期(按照 RFC 7231 中定义的“超文本传输协议日期”格式来表示)</p><h4 id="Connection-1"><a href="#Connection-1" class="headerlink" title="Connection"></a>Connection</h4><p><code>Connection：keep-alive</code> 这个字段作为回应客户端，告诉客户端服务器的 TCP 连接也是一个长连接，客户端可以继续使用这个 TCP 连接发送 HTTP 请求。</p><h4 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h4><p><code>ETag: &quot;737060cd8c284d8af7ad3082f209582d&quot;</code> 就是一个对象（比如 URL ）的标志值，就一个对象而言，比如一个 HTML 文件，如果被修改了，其 Etag 也会别修改，所以，ETag 的作用跟 Last-Modified 的作用差不多，主要供 WEB 服务器判断一个对象是否改变了。比如前一次请求某个 HTML 文件时，获得了其 ETag，当这次又请求这个文件时，浏览器就会把先前获得 ETag 值发送给 WEB 服务器，然后 WEB 服务器会把这个 ETag 跟该文件的当前 ETag 进行对比，然后就知道这个文件有没有改变了。</p><h4 id="Refresh"><a href="#Refresh" class="headerlink" title="Refresh"></a>Refresh</h4><p><code>Refresh: 5; url=http://baidu.com</code> 用于重定向，或者当一个新的资源被创建时。默认会在5秒后刷新重定向。</p><h4 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h4><p><code>Access-Control-Allow-Origin: *</code> * 号代表所有网站可以跨域资源共享，如果当前字段为 * 那么 Access-Control-Allow-Credentials 就不能为 true。</p><p><code>Access-Control-Allow-Origin: www.baidu.com</code> 指定哪些网站可以跨域资源共享</p><h4 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h4><p><code>Access-Control-Allow-Methods：GET, POST, PUT, DELETE</code> 允许哪些方法来访问</p><h4 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h4><p><code>Access-Control-Allow-Credentials: true</code> 是否允许发送 Cookie。默认情况下，Cookie 不包括在CORS 请求之中。设为 true，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为 true，如果服务器不要浏览器发送 Cookie，删除该字段即可。如果 access-control-allow-origin 为 *，当前字段就不能为 true。</p><h4 id="Content-Range"><a href="#Content-Range" class="headerlink" title="Content-Range"></a>Content-Range</h4><p><code>Content-Range: bytes 0-5/7877</code> 指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。</p><h2 id="路径解析问题"><a href="#路径解析问题" class="headerlink" title="路径解析问题"></a>路径解析问题</h2><h3 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a>base 标签</h3><p>在 HTML 种，有一个 base 标签的：<code>&lt;base herf=&quot;http://localhost:8080/WebModule/&quot;&gt;</code> 它可以定义相对路径跳转的前面部分，然后页面里面所有使用相对路径的跳转，都会加上 base 里面设置的 herf 组成一个绝对路径。</p><h3 id="的解析"><a href="#的解析" class="headerlink" title="/ 的解析"></a>/ 的解析</h3><p>对于服务器和客户端对相对路径的最前面的 <code>/</code> 解析是不同的，对于服务器来说这里会解析到当前 Servlet 所属的 Web 工程的目录，比如 <code>http://localhost:8080/WebModule/</code>，而对于客户端来说，会解析到当前主机的地址如 <code>http://localhost:8080/</code></p><h2 id="请求-HttpServletResquest"><a href="#请求-HttpServletResquest" class="headerlink" title="请求 HttpServletResquest"></a>请求 HttpServletResquest</h2><p>Tomcat 回将请求封装到 HttpServletResquest 类的实例中，并传入 service() 方法中，然后分流到 doPost() 和 doGet()。我们可以通过 HttpServletRequest 获取大量请求的相关信息。</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>一般来说，互联网上发送的各种数据都是使用 <code>UTF-8</code> 来编码的，但因为 Tomcat7 及以下版本默认使用 <code>iso-8859-1</code> 来解码使用 URL 传输的文字，导致对于 Get 请求来的信息会乱码，那么为了解决这个问题，有两种方式：</p><ol><li><p>设置 Tomcat 的 URL 解码方式为 <code>UTF-8</code>，在 server.xml 里面的 HTTP/1.1 的 <code>&lt;Connector&gt;</code> 标签里面加入属性： <code>URIEncoding=&quot;UTF-8&quot;</code>。</p></li><li><p>在通过 HttpServletResquest 获取 URL 中的中文信息（GET 参数）的时候，将获取的字符串用 <code>iso-8859-1</code> 编码为原本的 <code>UTF-8</code> byte[] 信息，然后再用 <code>UTF-8</code> 编码解码这些 byte[] 为 String 即可。</p></li></ol><p>对于 Post 比较简单，没有 Tomcat 乱解码，无脑标注使用 UTF-8 解码就可以了：<code>request.setCharacterEncoding(&quot;UTF-8&quot;);</code></p><h3 id="请求信息"><a href="#请求信息" class="headerlink" title="请求信息"></a>请求信息</h3><p>getXXXX() 系列，可以获取各种请求头和 Get / Post 参数：</p><p>其中对于一个 name 对应多个 value 的参数，需要使用 getgetParameterValues() 获取 String[]。</p><h3 id="设置传递信息"><a href="#设置传递信息" class="headerlink" title="设置传递信息"></a>设置传递信息</h3><p>在进行信息转发的时候，因为整个过程传递的都是一个 HttpServletResquest 对象，所以可以在当前 Servlet 存储入一些信息，让其他的 Servlet 可以从这个对象中获取信息。</p><p>具体的设置方法就是使用 <code>setAttribute(Name,Value)</code> 保存信息，然后在转发到的 Servlet使用 <code>getAttribute(Name)</code> 获取保存的信息。</p><h2 id="响应-HttpServletResponse"><a href="#响应-HttpServletResponse" class="headerlink" title="响应 HttpServletResponse"></a>响应 HttpServletResponse</h2><h3 id="编码-1"><a href="#编码-1" class="headerlink" title="编码"></a>编码</h3><p>首先对于要操作 HttpServletResponse 之前，先设置好编码：</p><ol><li><p>无脑推荐版本：使用 <code>setContentType(&quot;UTF-8&quot;)</code> 来设置。这个方法不仅设置了输出信息使用 UTF-8 编码，还自动会添加响应头 <code>Content-Type: text/html; charset=UTF-8</code> ，一步解决全部问题。</p></li><li><p>自己手动全部设置：先设置信息编码格式： <code>setCharactorEncoding(&quot;UTF-8&quot;)</code> 然后设置响应头：<code>setHeader(&quot;Content-Type&quot;,&quot;text/html; charset=UTF-8&quot;)</code> 这个比较麻烦，还是无脑用第一个吧。</p></li></ol><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>用一堆 set 方法设置响应头以外，就是输出响应体了。</p><p>响应体有两种方式：<code>getWriter()</code> <code>getOutputStream()</code> 获取 Write 实例和 OutputStream 实例来写响应体。</p><p>对于字符，可以使用 Write 来写，对于非字符（二进制文件）使用 OutputStream 来写。但是一定要注意的的是，这两个东西，只能同时持有一个实例，如果要用另一个，就需要 <code>close()</code> 关闭资源才可以。</p><p>这是因为如果同时持有两个输出实例，那么两者的输出合并就会成为一个大问题，所以为了避免混乱，就设计成两者互斥，只能同时持有一个输出实例。</p><h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><ol><li><p>无脑推荐： <code>sendRedirect(/XXX/XX)</code> 里面填入重定向页面。（会自动设置响应代码和重定向响应头）</p></li><li><p>自己手动设置响应代码和重定向头： <code>setStatus(302)</code> <code>setHeader(&quot;Location&quot;,&quot;XXX/XX&quot;)</code></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTTP-协议&quot;&gt;&lt;a href=&quot;#HTTP-协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP 协议&quot;&gt;&lt;/a&gt;HTTP 协议&lt;/h2&gt;&lt;h3 id=&quot;HTTP-版本&quot;&gt;&lt;a href=&quot;#HTTP-版本&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="HTTP" scheme="https://xorex.space/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Servlet 开发基础</title>
    <link href="https://xorex.space/2021/03/28/1febb3ac708c/"/>
    <id>https://xorex.space/2021/03/28/1febb3ac708c/</id>
    <published>2021-03-28T08:10:17.000Z</published>
    <updated>2021-03-29T05:56:48.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet-简介"><a href="#Servlet-简介" class="headerlink" title="Servlet 简介"></a>Servlet 简介</h2><p>狭义上的 Servlet 是一种接口，如果开发者想要开发一个动态的 Web 资源，只需要：</p><ol><li><p>编写一个实现了 Servlet 接口的类。</p></li><li><p>把开发好的 Java 类部署到服务器中。</p></li></ol><p>广义上来讲，我们就把实现了 Servlet 接口的程序也称之为一个 Servlet。</p><h2 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h2><p>当服务器接收到了某个 Servlet 程序的请求的时候，会执行以下过程：</p><ol><li><p>服务器会先判断是否拥有当前 Servlet 实例，如果有，跳到第四步。</p></li><li><p>调用 Servlet 的构造方法实例化 Servlet 获取对象。</p></li><li><p>调用 Servlet 实例的 init() 方法来初始化此对象。</p></li><li><p>创建此 HTTP 请求的 ServletRequest 和 ServletResponse 实例，并传入调用的 service(ServletRequest,ServletResponse) 方法。</p></li><li><p>当 Web 程序停止/重启，会调用对应实例的 destroy() 方法</p></li></ol><h2 id="创建-Servlet"><a href="#创建-Servlet" class="headerlink" title="创建 Servlet"></a>创建 Servlet</h2><p>我们在创建一个 Servlet 类的时候，一般会直接继承 HttpServlet ，里面提供了很多强大的功能，它已经写好了 service() 方法，并对请求分流到 doGet() 和 doPost() 方法。所以我们只需要重写这两个方法来分别处理 Get 和 Post 请求即可。</p><p>创建 Servlet 之后，需要进行 Servlet-URL 进行映射，来确定在访问哪些 URL 的时候，让对应的 Servlet 去处理。这里有两种方法，一种是在 IDEA 创建 Servlet 的 Java 文件的时候，勾选 <code>Create Java EE 6+ Annotated class</code> 选项使用注解来注册 Servlet ，然后生成的 Servlet 代码的类前面会有注解： <code>@WebServlet(name = &quot;XXXX&quot;, value = &quot;XXXX&quot;)</code> name 表示 Servlet 服务名称，value 表示对应映射的 URL。</p><p>或者不勾选哪个选项，然后自己在 web.xml 配置文件中添加 servlet 信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span> <span class="comment">&lt;!-- 这里注册 servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServletName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> <span class="comment">&lt;!-- 这里填写自己设置的 Servlet 名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>space.xorex.WebModule.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> <span class="comment">&lt;!-- 这里填写 Servlet 类的完整类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> <span class="comment">&lt;!-- 这里映射 servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>NewServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> <span class="comment">&lt;!-- 填写 servlet 名称，要和上面注册的相同 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/New<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> <span class="comment">&lt;!-- 这里填写映射的 URL --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里创建映射的时候，可以使用通配符 * ,比如 <code>/*</code> 和 <code>/XXXX/*.txt</code> 等等。而对于一个路径有多个 Servlet 对应，那么路径映射返回越大的 Servlet 优先级越低。</p><hr><p>如果有路径映射为 <code>/</code> 的 Servlet，那么这个 Servlet 就会成为默认 Servlet，所有找不到路径映射的访问都会指向这个 Servlet 去处理。</p><h2 id="Servlet-线程安全"><a href="#Servlet-线程安全" class="headerlink" title="Servlet 线程安全"></a>Servlet 线程安全</h2><p>需要注意，一个 Servlet 程序在运行中只会创建一个实例，所以面对并发访问的时候，Tomcat 会创建新的线程去运行 service() 方法，但所有线程运行的 service() 都是属于同一个 Servlet 对象的。所以一旦涉及到非 service() 方法本地的访问与调用，就有可能牵扯到线程安全问题。</p><p>所以一定要小心 service() doGet() doPost() 方法所有的外部调用，避免出现线程安全问题，</p><h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><p>在 web.xml 文件的 servlet 标签下面可以设置此 Servlet 程序的初始化配置参数 <code>&lt;init-param&gt;</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>Tempest<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Xorex<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>Yukinoshita<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Yukino<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后可以调用 父类 GenericServlet 的方法 getServletConfig() 获取一个 ServletConfig 实例，此实例的 getInitParameterNames() 和 getInitParameter() 可以获取 Servlet 配置里面的初始化参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInitPara</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletConfig config=getServletConfig();</span><br><span class="line">    Enumeration&lt;String&gt; paras = config.getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span>(paras.hasMoreElements()) &#123;</span><br><span class="line">        String name=paras.nextElement();</span><br><span class="line">        System.out.println(name + <span class="string">&quot; : &quot;</span> + config.getInitParameter(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>ServletContext 对象是所有的 Web 应用都会有的一个单列实例，这个单列实例可以被这个 Web 应用的所有 Servlet 访问并修改内容，我们可以通过这个单列实例完成很多事情。</p><h3 id="获取-Web-应用的初始化参数"><a href="#获取-Web-应用的初始化参数" class="headerlink" title="获取 Web 应用的初始化参数"></a>获取 Web 应用的初始化参数</h3><p>和 ServletConfig 可以访问到 Servlet 的配置信息 <code>&lt;init-param&gt;</code> 一样，对于 Web 应用级别的 ServletContext 对象可以访问 Web 应用的配置信息 <code>&lt;context-param&gt;</code>，这个标签在 web.xml 中和 <code>&lt;servlet&gt;</code> 同级别。我们可以设置一些这样的 Context 属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>Tempest<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Xorex<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>Yukinoshita<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Yukino<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取 ServletContext 除了调用父类的 getServletContext() 以外，还可以调用 ServletConfig 实例的 getServletContext() 方法（因为它内部封装了 ServletContext 的实例，可以调用出来）。然后剩下的步骤和 ServletConfig 读取初始化参数一样了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = getServletConfig().getServletContext();</span><br><span class="line">    Enumeration&lt;String&gt; iter = context.getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span>(iter.hasMoreElements()) &#123;</span><br><span class="line">        String name=iter.nextElement();</span><br><span class="line">        System.out.println(name+<span class="string">&quot; : &quot;</span>+context.getInitParameter(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Servlet-数据共享"><a href="#Servlet-数据共享" class="headerlink" title="Servlet 数据共享"></a>Servlet 数据共享</h3><p>因为 ServletContext 是所有 Servlet 都能能访问的单列实例，所以就可以利用这个实例才存储一些数据，从而使不同的 Servlet 之间可以共享这些数据。</p><p>共享的方法就是将数据存储到实例的属性值中，使用方法 setAttribute(Name,Value) 和 getAttribute(Name) 来存取数据，实现不同 Servlet 之间的交流。</p><h3 id="获取工程的绝对路径"><a href="#获取工程的绝对路径" class="headerlink" title="获取工程的绝对路径"></a>获取工程的绝对路径</h3><p>使用 ServletContext 的 getReadPath(String) 来返回路径字符串，其中参数填写相对路径即可，比如 <code>&quot;./&quot;</code> ，然后返回项目在电脑中的绝对路径。</p><h2 id="Servlet-请求转发"><a href="#Servlet-请求转发" class="headerlink" title="Servlet 请求转发"></a>Servlet 请求转发</h2><p>请求转发使用的是一个请求调度器 RequestDispatcher 里面的 forward(resquest,response) 可以将信息转发。而获取请求调度器的方法有几种：</p><ol><li><p>通过 ServletContext 的 getRequestDispatcher(String) 获取</p></li><li><p>通过请求 HttpServletRequest 的 getRequestDispatcher(String) 获取</p></li></ol><p>其中参数为目标 Servlet 的映射地址。</p><p>获取 RequestDispatcher 之后，使用 forward() 转发请求即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">&quot;/hello-servlet&quot;</span>); <span class="comment">// 把 /New 的请求转发给 /hello-servlet</span></span><br><span class="line">    dispatcher.forward(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Servlet-简介&quot;&gt;&lt;a href=&quot;#Servlet-简介&quot; class=&quot;headerlink&quot; title=&quot;Servlet 简介&quot;&gt;&lt;/a&gt;Servlet 简介&lt;/h2&gt;&lt;p&gt;狭义上的 Servlet 是一种接口，如果开发者想要开发一个动态的 Web </summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Servlet" scheme="https://xorex.space/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 服务器基础</title>
    <link href="https://xorex.space/2021/03/27/9234b0350059/"/>
    <id>https://xorex.space/2021/03/27/9234b0350059/</id>
    <published>2021-03-27T05:06:26.000Z</published>
    <updated>2021-03-28T08:11:19.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-相关概念"><a href="#Web-相关概念" class="headerlink" title="Web 相关概念"></a>Web 相关概念</h2><h3 id="Web-资源"><a href="#Web-资源" class="headerlink" title="Web 资源"></a>Web 资源</h3><p>Web资源一般来说可以分为静态资源和动态资源：</p><ol><li><p>静态资源：供人浏览内容不变的资源，比如 html 页面。</p></li><li><p>动态资源：供人浏览内容会根据不同的情况变化的资源，这些是由应用程序产生的。</p></li></ol><p>静态 Web 开发技术：html</p><p>动态 Web 开发技术：JSP/Serv let ASP PHP</p><h3 id="Web-应用程序"><a href="#Web-应用程序" class="headerlink" title="Web 应用程序"></a>Web 应用程序</h3><p>将一系列的 Web 资源整合在一起，对外提供服务，这就是 Web 应用程序。一个 Web 应用程序由静态资源和动态资源组成：HTML、CSS、JavaScript、JSP、Java、Jar 等等。</p><p>这些 Web 资源开发好之后，如果想要给其他人使用，则需要交给 Web 服务器管理资源的访问。</p><h3 id="静态-动态"><a href="#静态-动态" class="headerlink" title="静态/动态"></a>静态/动态</h3><p>对于静态资源，客户端请求之后，Web 服务器会直接从存储有静态页面的磁盘里面读取文件内容，然后在发送给客户端。客户端的浏览器经过渲染分析，得到了最终的显示效果。</p><p><img src="https://xorex.space/image/200.jpg"></p><p>对于动态资源，客户端请求之后，Web 服务器回将请求交给 Web Container 容器处理，Web Container 经过分析请求之后，会根据请求和数据库里面的记录信息动态的拼接出来页面，然后把内容交给 Web 服务器，Web 服务器再将内容给客户端。</p><p><img src="https://xorex.space/image/201.jpg"></p><h3 id="Web-服务器-容器"><a href="#Web-服务器-容器" class="headerlink" title="Web 服务器 / 容器"></a>Web 服务器 / 容器</h3><p>Web 服务器：Web Server， Web 服务器是指能为发出请求的浏览器提供文档的程序。服务器是一种被动程序，只有浏览器发出请求的时候才会响应。应用层使用的是 HTTP 协议。目前最主流的三个 Web 服务器是 Apache、Nginx 和 IIS。</p><p>Web 容器：Web Container，Web 容器是一种服务程序，是可以部署多个 Web 应用程序的环境，负责调用管理这些 Web 应用程序。</p><p>而我们使用的 Tomcat 既是一个 Web 服务器，也是一个 Web 容器。</p><h2 id="Tomcat-基础"><a href="#Tomcat-基础" class="headerlink" title="Tomcat 基础"></a>Tomcat 基础</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p><img src="https://xorex.space/image/202.jpg"></p><h3 id="Tomcat-的启动"><a href="#Tomcat-的启动" class="headerlink" title="Tomcat 的启动"></a>Tomcat 的启动</h3><p>方法一：运行 bin 目录下的 <code>start.bat</code></p><p>方法二：CMD 在 bin 目录运行 <code>catalina run</code></p><h3 id="端口修改"><a href="#端口修改" class="headerlink" title="端口修改"></a>端口修改</h3><p>在 config 的 server.xml 配置文件中修改 Connector。当 xml 文件修改之后，就必须重启 Tomcat 服务器，来重新获得配置信息。</p><h3 id="虚拟目录映射和部署"><a href="#虚拟目录映射和部署" class="headerlink" title="虚拟目录映射和部署"></a>虚拟目录映射和部署</h3><ol><li><p>将 Web 应用程序放到 Tomcat 里面的 webapps 文件夹里面，这样启动 Tomcat 之后就可以访问了 Web 应用程序的资源了。</p></li><li><p>在 <code>.\conf\server.xml</code> 中的 <code>&lt;host&gt;&lt;/host&gt;</code> 之间插入路径和文件名之间的映射，但是因为修改了服务器的配置信息，所以需要重启 Tomcat 才可以生效：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/浏览器路径名&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;Web 应用实际计算机地址&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在 <code>.\conf\Catalina\localhost</code> 目录下面添加一个 XML 配置文件，文件名任意，里面加入路径和文件位置之间的映射，这种方式可以不用重启服务器：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/浏览器路径名&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;Web 应用实际计算机地址&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>在 server.xml 配置文件中，可以看到一条默认的 host 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这就是我们在访问服务器 <code>http://localhost:8080/</code> 的时候，表示我们访问的主机的名字叫作 localhost ，它的页面服务放在 webapps 文件夹下面。</p><p>又因为 Tomcat 可以设置多个主机，比如 Xorex 主机，Yukino 主机等，来供人们去根据名字访问它们。所以这里的 Host 主机又被称为虚拟主机（因为一台服务器可以设置多个不同名字的主机，这些主机并不是真正的多个服务器构成的，而是由一台主机模拟出来的。）</p><p>那么就可以自己设置一台主机了，在配置信息里加入一条 Host，表示设置主机名称 Xorex。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;Xorex&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;XorexWebSite&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将主机名称和主机的地址绑定起来，也就是域名绑定 IP，这里我们肯定没办法改 DNS 服务器的 域名-IP 绑定，就只能改自己电脑记录的 域名-IP 绑定信息了（浏览器查询域名对应 IP 是优先查看本地保存的，没有再去询问 DNS 根域名服务器），在 <code>C:\Windows\System32\drivers\etc</code> 这里面的 hosts 文件增加 域名-IP 绑定信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># localhost name resolution is handled within DNS itself.</span><br><span class="line">#   127.0.0.1       localhost</span><br><span class="line">#   ::1             localhost</span><br><span class="line">    127.0.0.1       Xorex</span><br></pre></td></tr></table></figure><p>这样就可以通过 <code>http://Xorex:8080/</code> 这个网址解析到 <code>http://127.0.0.1:8080</code> 服务器（也就是本机）的 Xorex 虚拟主机里面（因为 <code>http://Xorex:8080/</code> 指定访问主机名为 Xorex， <code>http://localhost:8080</code> 指定访问主机名为 localhost。）</p><h3 id="Java-Web-应用文件结构"><a href="#Java-Web-应用文件结构" class="headerlink" title="Java Web 应用文件结构"></a>Java Web 应用文件结构</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JavaWeb文件夹</span><br><span class="line">    |</span><br><span class="line">    | --- HTML JSP CSS JS 可以被客户端直接访问的资源</span><br><span class="line">    |</span><br><span class="line">    | --- WEB-INF 目录</span><br><span class="line">    |           |</span><br><span class="line">                | --- class 目录 （存放 Java 代码）</span><br><span class="line">                |</span><br><span class="line">                | --- lib （Java 运行所需要的 Jar 包）</span><br><span class="line">                |</span><br><span class="line">                | --- web.xml （Web应用的配置文件）</span><br></pre></td></tr></table></figure><p>对于用户来说，除了 WEB-INF 以外的目录的资源都可以随意访问获取，但是对于 WEB-INF 里面的，只有服务器自己才能访问调用。</p><h3 id="打包-Web-应用程序"><a href="#打包-Web-应用程序" class="headerlink" title="打包 Web 应用程序"></a>打包 Web 应用程序</h3><p>当我们按照上面的文件结构开发好了一个 Web 应用程序之后，我们就可以把这个 Web 应用程序打包了。使用 <code>jar -cf WebPackageName.war WebDirName</code> 就可以将 WebDirName 文件夹里面的 Web 应用程序打包为 WebPackageName.war 了。</p><p>其中 -c 表示 create 创建 war 包，-f 表示 file 命名 war 文件名字。</p><p>拿到 war 包之后可以直接放到对应主机的 appBase 文件夹下面，当 Tomcat 服务器启动的时候，会自动解压 war 包，并运行其服务。</p><h3 id="Tomcat-工作原理"><a href="#Tomcat-工作原理" class="headerlink" title="Tomcat 工作原理"></a>Tomcat 工作原理</h3><p>先看看 Tomcat 的结构图：</p><p><img src="https://xorex.space/image/204.jpg"></p><p>当 Tomcat 的服务器启动以后，会首先读取 server.xml 文件来启动一个 Server 服务器，Server 又会启动一个 Service 服务，里面有多个 Connector 来等待和客户端进行连接，不同的 Connector 会连接不同的请求协议。Connector 接收到客户端发送过来的请求之后，会转移给 Engine，由 Engine 分析此请求所访问的 Host 虚拟主机，并将请求转发给对应的 Host 虚拟主机，然后经过解析返回所请求的 Web 应用 Context。</p><p>比如 server.xml 里面就有各种的配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Https-连接"><a href="#Https-连接" class="headerlink" title="Https 连接"></a>Https 连接</h3><p>Https 连接是加密连接，首先服务器会发送给客户端一份公钥，然后客户端自己持有私钥。通过非对称加密进行密钥交换（交换过程即使被监听也无法获：<a href="https://www.xmind.net/m/yVNPMU/">交换密钥</a>），使用非对称加密 + 证书是为了防止有人伪造服务器。然后客户端就能从服务器手里安全的拿到数据的加密密钥，从而保证整个传输过程中的数据安全。</p><p>那么如何给自己的服务器添加证书呢，使用命令：<code>keytool -genkey -alias tomcat -keyalg RSA</code> 然后设置一个密码，就会在 User 文件夹下面生成一个 <code>.keystore</code> 文件，这个就是证书了，复制到 Tomcat 的 <code>conf/.keystore</code> 里面，然后在 server.xml 里面添加一个使用 Https 连接的 Connector ：</p><p>注意 KeystorePass 属性这里填写你生成证书的时候设置的密码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11Protocol&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span> <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">keystoreFile</span>=<span class="string">&quot;conf/.keystore&quot;</span> <span class="attr">keystorePass</span>=<span class="string">&quot;Password&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后访问的时候就可以用 <code>https://localhost:8443</code> 进行访问了因为浏览器没有我们的 CA 证书，所以会显示不安全。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Web-相关概念&quot;&gt;&lt;a href=&quot;#Web-相关概念&quot; class=&quot;headerlink&quot; title=&quot;Web 相关概念&quot;&gt;&lt;/a&gt;Web 相关概念&lt;/h2&gt;&lt;h3 id=&quot;Web-资源&quot;&gt;&lt;a href=&quot;#Web-资源&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Tomcat" scheme="https://xorex.space/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>DOM4j 解析 XML</title>
    <link href="https://xorex.space/2021/03/27/ea12aeb2606a/"/>
    <id>https://xorex.space/2021/03/27/ea12aeb2606a/</id>
    <published>2021-03-27T03:06:33.000Z</published>
    <updated>2021-03-29T13:50:14.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-DOM4j"><a href="#使用-DOM4j" class="headerlink" title="使用 DOM4j"></a>使用 DOM4j</h2><h3 id="XML-文件"><a href="#XML-文件" class="headerlink" title="XML 文件"></a>XML 文件</h3><p>首先拥有 xml 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">breakfast_menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">price</span>&gt;</span>$5.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Two of our famous Belgian Waffles with plenty of real maple syrup<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">calories</span>&gt;</span>650<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Strawberry Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">price</span>&gt;</span>$7.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Light Belgian waffles covered with strawberries and whipped cream<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">calories</span>&gt;</span>900<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Berry-Berry Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">price</span>&gt;</span>$8.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Light Belgian waffles covered with an assortment of fresh berries and whipped cream<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">calories</span>&gt;</span>900<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>French Toast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">price</span>&gt;</span>$4.50<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Thick slices made from our homemade sourdough bread<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">calories</span>&gt;</span>600<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Homestyle Breakfast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">price</span>&gt;</span>$6.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Two eggs, bacon or sausage, toast, and our ever-popular hash browns<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">calories</span>&gt;</span>950<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">breakfast_menu</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="保存-Food-类"><a href="#保存-Food-类" class="headerlink" title="保存 Food 类"></a>保存 Food 类</h3><p>然后尝试解析这个 XML 文件，将里面的信息保存到一个类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> String Price;</span><br><span class="line">    <span class="keyword">private</span> String Description;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Calories;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Food</span><span class="params">(String name, String price, String description, <span class="keyword">int</span> calories)</span> </span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Price = price;</span><br><span class="line">        Description = description;</span><br><span class="line">        Calories = calories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCalories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Calories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Food&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Name=&#x27;&quot;</span> + Name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, Price=&#x27;&quot;</span> + Price + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, Description=&#x27;&quot;</span> + Description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, Calories=&quot;</span> + Calories +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析-XML-过程"><a href="#解析-XML-过程" class="headerlink" title="解析 XML 过程"></a>解析 XML 过程</h3><ol><li><p>引入 JAR 包</p></li><li><p>通过 SAXReader 构造方法获取 SAXReader 实例。</p></li><li><p>通过 SAXReader 实例的 read(“filepaht”) 获取读取的 Document 对象。</p></li><li><p>通过 Document 对象的 getRootElement() 获取根元素。</p></li><li><p>通过 Element 对象的根元素的 elements() 获取根元素的子元素们的 List&lt;Element&gt; 集合</p></li><li><p>遍历 List 集合，通过 element(“name”) 后的 getText() 获取子标签的值。</p></li><li><p>将获取的数据保存到 Food 实例中。</p></li></ol><h3 id="写入-XML-过程"><a href="#写入-XML-过程" class="headerlink" title="写入 XML 过程"></a>写入 XML 过程</h3><ol><li><p>引入 JAR 包</p></li><li><p>通过 DocumentHelper 类的 createDocument() 创建 Document 对象</p></li><li><p>通过 Document 的 addElement() 方法创建节点</p></li><li><p>通过 Element 的 addAttribute() 方法为节点添加属性</p></li><li><p>通过 Element 的 setText() 方法为节点设置内容</p></li><li><p>通过 OutputFormat 的 createPrettyPrint() 方法创建 OutputFormat 对象（会自动缩进、换行）</p></li><li><p>创建 XMLWriter 对象，将目的文件包装成 OutputStream 传入构造方法中，并将 OutputFormat 对象一并传入其中</p></li><li><p>通过 XMLWriter 的 write() 方法生成XML文件，并将 Document 对象作为参数传入</p></li><li><p>关闭 XMLWriter 对象</p></li></ol><p>下面是执行的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DOM4jTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, DocumentException </span>&#123;</span><br><span class="line">        DOM4jTest.XMLToClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">XMLToClass</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException, IOException </span>&#123;</span><br><span class="line">        List&lt;Food&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 用于存放解析出来的 Food 类</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader(); <span class="comment">// 获取 Sample AIP for XML Reader 实例</span></span><br><span class="line">        Document doc = reader.read(<span class="string">&quot;./src/main/java/space/xorex/xml.xml&quot;</span>); <span class="comment">// 让 Reader 去读取 XML 文件，返回 Document 实例</span></span><br><span class="line">        List&lt;Element&gt; eles = doc.getRootElement().elements(); <span class="comment">//获取保存类数据的根节点，这里是 food 标签节点</span></span><br><span class="line">        <span class="keyword">for</span> (Element i : eles) &#123; <span class="comment">//获取子元素的内容并保存到 Food 实例中</span></span><br><span class="line">            String name = i.element(<span class="string">&quot;name&quot;</span>).getText();</span><br><span class="line">            String price = i.element(<span class="string">&quot;price&quot;</span>).getText();</span><br><span class="line">            String description = i.element(<span class="string">&quot;description&quot;</span>).getText();</span><br><span class="line">            <span class="keyword">int</span> calories = Integer.parseInt(i.element(<span class="string">&quot;calories&quot;</span>).getText());</span><br><span class="line">            list.add(<span class="keyword">new</span> Food(name, price, description, calories));</span><br><span class="line">        &#125;</span><br><span class="line">        DOM4jTest.ClassToXML(list); <span class="comment">//调用将实例 Food 转化为 XML 文件</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClassToXML</span><span class="params">(List&lt;Food&gt; list)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        Document doc= DocumentHelper.createDocument(); <span class="comment">//利用 DocumentHelper.createDocumnet() 获取一个 Document 对象</span></span><br><span class="line">        Element menu=doc.addElement(<span class="string">&quot;breakfast_menu&quot;</span>); <span class="comment">// 在 Document 对象中添加根节点 breakfast_menu</span></span><br><span class="line">        <span class="keyword">for</span>(Food i:list) &#123;<span class="comment">//添加 food 节点，以及对应的子节点参数</span></span><br><span class="line">            Element food=menu.addElement(<span class="string">&quot;food&quot;</span>); </span><br><span class="line">            food.addAttribute(<span class="string">&quot;id&quot;</span>, String.valueOf(++num));</span><br><span class="line">            food.addElement(<span class="string">&quot;name&quot;</span>).setText(i.getName());</span><br><span class="line">            food.addElement(<span class="string">&quot;price&quot;</span>).setText(i.getPrice());</span><br><span class="line">            food.addElement(<span class="string">&quot;description&quot;</span>).setText(i.getDescription());</span><br><span class="line">            food.addElement(<span class="string">&quot;calories&quot;</span>).setText(String.valueOf(i.getCalories()));</span><br><span class="line">        &#125;</span><br><span class="line">        OutputFormat format = OutputFormat.createPrettyPrint(); <span class="comment">//生成一个 XML 输出格式</span></span><br><span class="line">        XMLWriter writer =<span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;write.xml&quot;</span>),format); <span class="comment">//获取写 XML 文档的 IO 实例 XMLWriter</span></span><br><span class="line">        writer.write(doc); <span class="comment">// 写入</span></span><br><span class="line">        writer.close(); <span class="comment">// 关闭 IO </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行之后生成的 XML 文件内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">breakfast_menu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">food</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>$5.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Two of our famous Belgian Waffles with plenty of real maple syrup<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">calories</span>&gt;</span>650<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">food</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Strawberry Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>$7.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Light Belgian waffles covered with strawberries and whipped cream<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">calories</span>&gt;</span>900<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">food</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Berry-Berry Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>$8.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Light Belgian waffles covered with an assortment of fresh berries and whipped cream<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">calories</span>&gt;</span>900<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">food</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>French Toast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>$4.50<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Thick slices made from our homemade sourdough bread<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">calories</span>&gt;</span>600<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">food</span> <span class="attr">id</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Homestyle Breakfast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>$6.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Two eggs, bacon or sausage, toast, and our ever-popular hash browns<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">calories</span>&gt;</span>950<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">breakfast_menu</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOM4j-API"><a href="#DOM4j-API" class="headerlink" title="DOM4j API"></a>DOM4j API</h2><ul><li>解析XML形式的文本,得到document对象.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String text = <span class="string">&quot;&lt;members&gt;&lt;/members&gt;&quot;</span>;</span><br><span class="line">Document document = DocumentHelper.parseText(text);</span><br></pre></td></tr></table></figure><h3 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h3><ul><li>删除某节点.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentElm.remove(childElm);<span class="comment">//childElm是待删除的节点,parentElm是其父节</span></span><br></pre></td></tr></table></figure><ul><li>添加一个CDATA节点.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Element contentElm = infoElm.addElement(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">contentElm.addCDATA(diary.getContent());</span><br></pre></td></tr></table></figure><ul><li>取得某节点下的某属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Element root=document.getRootElement(); <span class="comment">//属性名name</span></span><br><span class="line">Attribute attribute=root.attribute(<span class="string">&quot;size&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>取得属性的文字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String text=attribute.getText();</span><br></pre></td></tr></table></figure><ul><li>删除某属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Attribute attribute=root.attribute(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">root.remove(attribute);</span><br></pre></td></tr></table></figure><ul><li>获取某节点的所有属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Element root=document.getRootElement();</span><br><span class="line">List attributes =root.attributes();</span><br></pre></td></tr></table></figure><ul><li>设置某节点的属性和文字.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newMemberElm.addAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;sitinspring&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>设置属性的文字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Attribute attribute=root.attribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">attribute.setText(<span class="string">&quot;sitinspring&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出系列"><a href="#输出系列" class="headerlink" title="输出系列"></a>输出系列</h3><ul><li>文档中含有中文,设置编码格式写入的形式.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OutputFormat format = OutputFormat.createPrettyPrint();<span class="comment">// 指定XML编码</span></span><br><span class="line">format.setEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.xml&quot;</span>),format);</span><br><span class="line">writer.write(document);</span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure><ul><li>在指定位置插入节点</li></ul><p>得到插入位置的节点列表（list），调用 list.add(index,elemnent)，由 index 决定 element 的插入位置。Element 元素可以通过 DocumentHelper 对象得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Element aaa = DocumentHelper.createElement(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">aaa.setText(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">List list = root.element(<span class="string">&quot;书&quot;</span>).elements();</span><br><span class="line">list.add(<span class="number">1</span>, aaa); <span class="comment">//更新document</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用-DOM4j&quot;&gt;&lt;a href=&quot;#使用-DOM4j&quot; class=&quot;headerlink&quot; title=&quot;使用 DOM4j&quot;&gt;&lt;/a&gt;使用 DOM4j&lt;/h2&gt;&lt;h3 id=&quot;XML-文件&quot;&gt;&lt;a href=&quot;#XML-文件&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="XML" scheme="https://xorex.space/tags/XML/"/>
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 入门 demo</title>
    <link href="https://xorex.space/2021/03/24/e648f6c6b7e6/"/>
    <id>https://xorex.space/2021/03/24/e648f6c6b7e6/</id>
    <published>2021-03-24T00:52:13.000Z</published>
    <updated>2021-03-29T13:54:37.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQurey-概述"><a href="#jQurey-概述" class="headerlink" title="jQurey 概述"></a>jQurey 概述</h2><p>jQuery 语法是为 HTML 元素的选取编制的，可以对元素执行某些操作。</p><p>基础语法是：<code>$(selector).action()</code></p><p>美元符号定义 jQuery （$ 表示一个函数 function(selector,context)）选择符（selector）“查询”和“查找” HTML 元素，这里差找结束之后，会返回一个元素的 jQuery 对象。jQuery 的 action() 执行对元素的操作。</p><h2 id="传入-的参数"><a href="#传入-的参数" class="headerlink" title="传入 $() 的参数"></a>传入 $() 的参数</h2><h3 id="传入函数"><a href="#传入函数" class="headerlink" title="传入函数"></a>传入函数</h3><p>会等待页面加载完成之后，执行传入的函数的内容。等价于 window.onload=function() {}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!Doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;E:\Work\HTML\node_modules\jquery\dist\jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;XXXX&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 表示页面加载完成之后，等价于 window.onload=function() &#123;&#125;</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;Using jQuery Successfuly!&quot;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;)    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-字符串"><a href="#HTML-字符串" class="headerlink" title="HTML 字符串"></a>HTML 字符串</h3><p>会为我们创建这个 html 元素的 Object 对象，然后我们就可以对其进行操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!Doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;E:\Work\HTML\node_modules\jquery\dist\jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;XXXX&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;&lt;div&gt;Xorex&lt;div&gt;&quot;</span>).appendTo(<span class="string">&quot;body&quot;</span>); <span class="comment">//传入 html 字符串，生成 juery 对象，调用 jQuery 对象 appendTo() 方法将对象插入 body 元素中。</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>); <span class="comment">// 传入选择器字符串，选中刚刚插入的元素对象，然后更改css 样式.</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择器字符串"><a href="#选择器字符串" class="headerlink" title="选择器字符串"></a>选择器字符串</h3><p>会根据传入的选择器字符串返回元素 jQuery 对象，然后随意调用。可以参看关于 jQuery 选择器的文档。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!Doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;E:\Work\HTML\node_modules\jquery\dist\jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;XXXX&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> $elementObj=$(<span class="string">&quot;#submit&quot;</span>); <span class="comment">// 等价于 getElementByIdX 字符串使用选择器格式，返回对应元素的实例</span></span></span><br><span class="line"><span class="javascript">        $elementObj.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">        alert($elementObj); <span class="comment">// 返回类型为 jQuery Object 所以使用 $ 标识此变量为 jQuery 对象</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM-对象"><a href="#DOM-对象" class="headerlink" title="DOM 对象"></a>DOM 对象</h3><p>DOM 对象即 HTML 对象，使用 alert() 返回的结果为 <code>Object HTML标签名Element</code> 。</p><p>而 jQuery 使用 alert() 返回的是 <code>Object Object</code>，向 jQuery 的 $ 函数传入 DOM 对象返回的是一个 jQuery 对象。</p><p>jQuery 的本质是 DOM 对象的数组 + jQuery 提供的一系列函数，可以使用增强 for 循环遍历。而两者自己特有的函数是不能被对方使用的。</p><p>而 jQuery 对象和 DOM 对象之间是可以相互转化的，DOM -&gt; jQuery 使用 $(DOM) 转化为 jQuery 对象。jQuery -&gt; DOM 使用 jQuery[0] 返回 DOM 对象。</p><hr><h2 id="DOM-jQuery-JS-对象异同和联系"><a href="#DOM-jQuery-JS-对象异同和联系" class="headerlink" title="DOM jQuery JS 对象异同和联系"></a>DOM jQuery JS 对象异同和联系</h2><p>下面是关于 DOM 对象 jQuery 对象 JS 对象三者之间的异同和关系：</p><h3 id="Dom对象"><a href="#Dom对象" class="headerlink" title="Dom对象"></a>Dom对象</h3><p>文档对象模型简称 DOM ，是 W3C 组织推荐的处理可扩展置标语言的标准编程接口。</p><p>DOM 实际上是以面向对象方式描述的文档模型。DOM 定义了表示和修改文档所需的对象、这些对象的行为和属性以及这些对象之间的关系。</p><p>通过 DOM，可以访问所有的 HTML 元素，连同它们所包含的文本和属性。可以对其中的内容进行修改和删除，同时也可以创建新的元素。</p><p>DOM 独立于平台和编程语言。它可被任何编程语言诸如 Java、JavaScript 和 VBScript 使用。</p><p>DOM 对象，即是我们用传统的方法 (JavaScript) 获得的对象。</p><p>DOM 准确说是对文档对象的一种规范标准(文档对象模型),标准只定义了属性和方法行为。</p><h3 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h3><p>JavaScript 提供多个内建对象，比如 String、Date、Array 等等。</p><p>对象只是带有属性和方法的特殊数据类型。</p><p>通过 js 获取的 DOM 对象就是 js 对象</p><p>当浏览器支持 js 的 DOM 接口 (api) 时，这里狭义的dom对象是以 js 对象的形式出现的，也就是一个 js 对象。</p><h3 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h3><p>jQuery 对象其实是一个 JavaScript 的数组，这个数组对象包含 125 个方法和 4 个属性 4 个属性分别是：</p><ol><li>jquery 当前的 jquery 框架版本号</li><li>length 指示该数组对象的元素个数</li><li>context 一般情况下都是指向 HtmlDocument 对象</li><li>selector 传递进来的选择器内容</li></ol><p>jquery 对象就是通过 jQuery 包装 DOM 对象后产生的对象。jQuery 对象是 jQuery 独有的，其可以使用 jQuery 里的方法，但是不能使用 DOM 的方法;反过来 DOM 对象也不能使用jquery的方法。</p><h3 id="jQuery对象和js对象区别"><a href="#jQuery对象和js对象区别" class="headerlink" title="jQuery对象和js对象区别"></a>jQuery对象和js对象区别</h3><ol><li>jQuery 对象属于 js 的数组</li><li>jQuery 对象是通过 jQuery 包装的 DOM 对象后产生的</li><li>jQuery 对象不能使用 DOM 对象的方法和属性</li><li>DOM 对象不能使用 jQuery 对象的方法和属性</li></ol><h3 id="jQuery-对象和-DOM-对象之间的转化"><a href="#jQuery-对象和-DOM-对象之间的转化" class="headerlink" title="jQuery 对象和 DOM 对象之间的转化"></a>jQuery 对象和 DOM 对象之间的转化</h3><p>jQuery 对象使用下标 [0] 转化为 DOM</p><p>DOM 使用 $() 函数返回 jQuery 对象。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>DOM 对象才能使用 DOM 中的方法，jQuery 对象不可以使用 DOM　中的方法，但 jQuery 对象提供了一套更加完善的工具用于操作 DOM 。</p><p>平时用到的 jQuery 对象都是通过 $() 函数制造出来的，$() 函数就是一个 jQuery 对象的制造工厂。</p><p>注意：如果获取的对象是 jQuery 对象，那么在变量前面加上 $ ,这样方便容易识别出哪些是 jQuery 对象。</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>具体的所有选择器，可以查看手册：<a href="http://hemin.cn/jq/">jQuery 选择器手册</a></p><h3 id="选择器组合"><a href="#选择器组合" class="headerlink" title="选择器组合"></a>选择器组合</h3><ol><li><p>多重叠加选择器 $(“选择器1 选择器2 选择器3”…)，可以写多个选择器/过滤器，作用效果为 &amp;&amp;，会返回满足每个选择器的元素。</p></li><li><p>多重平行选择器： $(“选择器1,选择器2…”)，可以写多个选择器，作用效果为 || ，会返回每个选择器满足的元素，注意和上面的不同为多了逗号。</p></li></ol><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ol><li><p>ID 选择器：$(“#ID名称”)，只需要对应标签设值的属性 id 的值前面加上 # 即可。</p></li><li><p>类选择器： $(“.Class名称”)，只需要在对应标签设置的属性 class 的值前面加上 . 即可。</p></li><li><p>元素选择器： $(“标签名称)，只需要写对应标签的名称即可，如 $(“div”)</p></li><li><p>所有选择器： $(<em>)，只需要写 \</em> 就可以表示所有的标签。</p></li></ol><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><ol><li><p>祖先选择器：$(‘ancestor ancestor … son’) 格式，每一个都是独立的选择器，为 ancestor 为祖先标签（不需要是严格的上一级）的选择器，最后的 son 为目标标签的选择器。ancestor 的数量可以任意设置，指是为了更加精确的定位到 son 身上。</p></li><li><p>子选择器：$(“father &gt; son”) 要求 father 必须是 son 的严格上一级，才能选择到 son 身上。</p></li><li><p>相邻选择器： $(“Prev + Next”) 选择紧邻着 Prev 后面的 Next 元素，必须严格相邻。</p></li><li><p>之后选择器：$(“Prev ~ last”) 选择 prev <strong>之后</strong>的<strong>同辈</strong> last 元素，不需要严格相邻。</p></li></ol><h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><p>过滤选择器，可以跟在一个选择器后面，将这个选择器选择出来的结果进行按照设定要求过滤，只留下来符合要求的。</p><p>也可以单独作为一个选择器来按照自己的设定选择。</p><ol><li><p>$([属性名]) 选择拥有此属性的元素，如 $(“div[id]”) 选择出来拥有 id 属性的 div 标签。</p></li><li><p>$([属性名=属性值]) 选择有特定属性名和属性值的元素。</p></li><li><p>$([属性名!=属性值]) 选择 属性名!=属性值 的元素。</p></li><li><p>$([属性名^=属性值开头]) 选择属性值以此属性值开头的元素，和正则相同。</p></li><li><p>$([属性名$=属性值结尾]) 选择属性值以此属性值结尾的元素，和正则相同。</p></li><li><p>$([属性名*=被包含属性值]) 选择属性值中包含此属性值的元素，和正则相同就怪了。</p></li><li><p>$([属性选择器1][属性选择器2][属性选择器3]…) 多个属性叠加在一起，多次选择过滤。</p></li></ol><h3 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h3><ol><li><p>:first 选择元素集合中的第一个。</p></li><li><p>:last 选择元素集合中的最后一个。</p></li><li><p>:even 从零开始选择偶数的元素。</p></li><li><p>:odd 从零开始选择奇数的元素。</p></li><li><p>:eq(index) 从零开始，匹配一个给定索引值的元素</p></li><li><p>:gt(index) 匹配比索引值大的元素。</p></li><li><p>:lt(index) 匹配比索引值小的元素。</p></li></ol><h3 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h3><ol><li><p>:contains(text) 匹配标签文本内容包含有 text 的标签元素。</p></li><li><p>:empty 匹配标签里面没有子标签和文本的元素</p></li><li><p>:has(selector) 选择拥有 selector 能匹配到标签的父标签，满足 has 关系。</p></li><li><p>:parent 选择里面的有子标签或者文本的标签、</p></li></ol><h3 id="可见性过滤器"><a href="#可见性过滤器" class="headerlink" title="可见性过滤器"></a>可见性过滤器</h3><ol><li><p>:hidden 选择其中被隐藏的</p></li><li><p>:visible 选择其中可以被看见的</p></li></ol><h3 id="子元素过滤器"><a href="#子元素过滤器" class="headerlink" title="子元素过滤器"></a>子元素过滤器</h3><ol><li><p>:first-child 选择所有父标签符合要求的的第一个子标签，而 :first 是选择符合要求的标签里面的第一个。</p></li><li><p>:last-child 和上面同理，不过是最后一个子标签。</p></li><li><p>:nth-child(index) 为所有父标签匹配第 index 个子标签。</p></li><li><p>:only-child 只匹配没有同级姐妹标签的单独标签。</p></li></ol><h3 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h3><ol><li><p>:enabled 选择拥有表单属性 enabled 的元素。</p></li><li><p>:disabled 选择拥有表单属性 disabled 的元素。</p></li><li><p>:checked 选择拥有表单属性 checked 的元素。</p></li><li><p>:selected 选择拥有表单属性 selected 的元素。</p></li></ol><h2 id="jQuery-属性操作"><a href="#jQuery-属性操作" class="headerlink" title="jQuery 属性操作"></a>jQuery 属性操作</h2><h3 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h3><p>jQuery.html() 返回此标签 jQuery 对象的内容，修改里面的内容则填写在括号里 jQuery.html(“Change”) 效果和 innerHTML 相似。</p><p>需要注意的是，这玩意返回的是开始结束标签里面的 <strong>所有</strong> 内容，包括里面的子 HTML 标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert($(<span class="string">&quot;.Tempest &gt; .Xorex&quot;</span>).html()) <span class="comment">//先弹出再修改（内容包括html代码）</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;.Tempest &gt; .Xorex&quot;</span>).html(<span class="string">&quot;Xorex 天下第一&quot;</span>);</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h3><p>jQuery.text() 基本等效与 html() 但是这个是过滤了 HTML 子标签，只会返回里面的文本。和 DOM 对象里面的 innerText 效果相似。</p><h3 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h3><p>jQuery.val() 是设置和获取<strong>表单</strong>项目的 value 值。常常用来获取表单里面输入的值，当然也可以修改里面的值：</p><p>第一读取输入框内容并修改的小 demo 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;.input&quot;</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ele=$(<span class="string">&quot;.input&quot;</span>);</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;你填写的值为：&quot;</span> + ele.val() + <span class="string">&quot;，我要给你改了！&quot;</span>);</span></span><br><span class="line"><span class="javascript">        ele.val(<span class="string">&quot;Xorex 天下第一！&quot;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时 val() 选项的选择，只需要将要选择的选项 value 值放在 <code>val([&quot;value1&quot;,&quot;value2&quot;...])</code> 即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value1&quot;</span>&gt;</span>Xorex</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value2&quot;</span>&gt;</span>Yukino</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value3&quot;</span>&gt;</span>Megumi</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;[name=&#x27;input&#x27;]&quot;</span>).val([<span class="string">&quot;value1&quot;</span>,<span class="string">&quot;value3&quot;</span>]); <span class="comment">//这里直接选择 Xorex 和 Megumi</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="attr-和-prop"><a href="#attr-和-prop" class="headerlink" title="attr() 和 prop()"></a>attr() 和 prop()</h3><p>用来获取标签的属性或者修改标签的属性，获取属性值：attr(“属性名称”)，设置属性值：(“属性名称”,”属性值”);</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:green&quot;</span>&gt;</span>Xorex<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;p&quot;</span>).onclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;p&quot;</span>).attr(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;color:red&quot;</span>) <span class="comment">//点击之后修改颜色</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于表单的元素来说，可能没有 checked 这个属性（我们无法预测），但是对于 attr() 来说，只要没有手动写 checked 属性，此次属性查询返回的结果都是 undefined ，所以对于表单的 checked 选项来说，无法了解是否已经选中（手动无论是否选中都是 undefined）。而 prop() 就是针对 attr() 这个缺点而生的。</p><p>prop() 可以查询没有写在标签里的 checked 属性，被选中返回 true ，没有选中返回 false。</p><h2 id="jQuery-的增删改"><a href="#jQuery-的增删改" class="headerlink" title="jQuery 的增删改"></a>jQuery 的增删改</h2><h3 id="appendTo-amp-pretendTo-嵌入"><a href="#appendTo-amp-pretendTo-嵌入" class="headerlink" title="appendTo() &amp; pretendTo() 嵌入"></a>appendTo() &amp; pretendTo() 嵌入</h3><p>a.appendTo(b) 将 a 元素嵌入到 b 元素中，成为 b 的最后一个子元素。</p><p>a.pretendTo(b) 将 a 元素嵌入到 b 元素中，成为 b 的第一个子元素。</p><h3 id="insertAfter-amp-insertBefore-插入"><a href="#insertAfter-amp-insertBefore-插入" class="headerlink" title="insertAfter() &amp; insertBefore() 插入"></a>insertAfter() &amp; insertBefore() 插入</h3><p>a.insertAfter(b) 将 a 元素插入到 b 元素的后面，两者同级。</p><p>a.insertBefore(b) 将 a 元素插入到 b 元素前面，两者同级。</p><h3 id="replaceWith-amp-replaceAll-替换"><a href="#replaceWith-amp-replaceAll-替换" class="headerlink" title="replaceWith() &amp; replaceAll() 替换"></a>replaceWith() &amp; replaceAll() 替换</h3><p>a.replaceWith(b) 将 b 元素替换 a 元素。</p><p>a.replaceAll(b) 将 a 元素替换 b 元素。</p><h3 id="remove-amp-empty-清楚"><a href="#remove-amp-empty-清楚" class="headerlink" title="remove() &amp; empty() 清楚"></a>remove() &amp; empty() 清楚</h3><p>a.remove() 删除 a 整个标签。</p><p>a.empty() 删除 a 标签里面的内容。</p><h2 id="jQuery-动画效果"><a href="#jQuery-动画效果" class="headerlink" title="jQuery 动画效果"></a>jQuery 动画效果</h2><ol><li><code>show([speed,[callback]])</code> 展示隐藏的元素， speed 单位毫秒，callback 动画结束激活的函数。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#Show&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).show(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>hide([speed,[callback]])</code> 隐藏展示的元素， speed 单位毫秒，callback 动画结束激活的函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#Hide&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).hide(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>toggle([speed,[callback]])</code> 隐藏展示的元素，展示隐藏的元素，speed 单位毫秒，callback 动画结束激活的函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#Toggle&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).toggle(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li><code>fadeOut([speed,[callback]])</code> 淡出元素，speed 单位毫秒，callback 动画结束激活的函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#FadeOut&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).fadeOut(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li><code>fadeIn([speed,[callback]])</code> 淡入元素，speed 单位毫秒，callback 动画结束激活的函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#FadeIn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).fadeIn(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li><code>fadeToggle([speed,[callback]])</code> 淡入淡出元素，speed 单位毫秒，callback 动画结束激活的函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#FadeToggle&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).fadeToggle(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="7"><li><code>fadeTo([speed],opacity,[callback])</code> 淡入元素到指定透明度，opacity 必须设置。speed 单位毫秒，callback 动画结束激活的函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#FadeTo&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).fadeTo(<span class="number">1000</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="jQuery-事件处理"><a href="#jQuery-事件处理" class="headerlink" title="jQuery 事件处理"></a>jQuery 事件处理</h2><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><ol><li><p>click() 绑定点击事件处理代码</p></li><li><p>mouseover() 绑定鼠标移动到元素身上处理代码</p></li><li><p>mouseout() 绑定鼠标离开元素身上处理代码</p></li><li><p>bind() 绑定多个事件对应的处理代码，所有事件名称写在一个双引号里，用空格隔开，如 bind(“click mouseover mouseout”,function(){})</p></li><li><p>unbind() 解绑对应的事件处理代码，使用的方法和上面的 bind() 差不多。</p></li><li><p>live() 动态绑定版本的 bind 即使是页面加载完成之后出现的元素，只要满足选择器，就会被绑定上设置的处理代码。</p></li><li><p>one() 一次性的 bind ，所绑定的事件处理代码只会运行一次。</p></li></ol><h3 id="事件传递"><a href="#事件传递" class="headerlink" title="事件传递"></a>事件传递</h3><p>当父标签和子标签绑定了相同的一个事件的时候，比如下面父标签和子标签都绑定了 click 事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    click div</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>click button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;This is the div.&quot;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;This is the button.&quot;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于点击 div 里面的任何事物都属于点击 div ，所以当点击 button 的时候，会被记为同时点击了 div 和 button 从而弹出两个弹窗。</p><p>要阻止这种子类事件传递给父类的行为，只需要在绑定子类事件的处理函数的时候，返回 false 就会停止标签的默认行为：传递事件给父标签。</p><h3 id="获取事件"><a href="#获取事件" class="headerlink" title="获取事件"></a>获取事件</h3><p>其实对于我们操作引起的一个事件，也同样是一个对象，想要获取到这个对象的话，只需要将变量名放在事件绑定函数的参数括号里面即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的 event 变量保存的就是我们获取到的点击事件的对象，从控制台可以看到这个对象里面保存的信息。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jQuery.Event</span><br><span class="line">altKey: false</span><br><span class="line">bubbles: true</span><br><span class="line">button: 0</span><br><span class="line">buttons: 0</span><br><span class="line">cancelable: true</span><br><span class="line">changedTouches: undefined</span><br><span class="line">....</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;jQurey-概述&quot;&gt;&lt;a href=&quot;#jQurey-概述&quot; class=&quot;headerlink&quot; title=&quot;jQurey 概述&quot;&gt;&lt;/a&gt;jQurey 概述&lt;/h2&gt;&lt;p&gt;jQuery 语法是为 HTML 元素的选取编制的，可以对元素执行某些操作。&lt;/p&gt;</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Web" scheme="https://xorex.space/tags/Web/"/>
    
    <category term="JavaScript" scheme="https://xorex.space/tags/JavaScript/"/>
    
    <category term="jQuery" scheme="https://xorex.space/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>笔记计划 3.0</title>
    <link href="https://xorex.space/2021/03/23/baadfa83df79/"/>
    <id>https://xorex.space/2021/03/23/baadfa83df79/</id>
    <published>2021-03-23T13:53:17.000Z</published>
    <updated>2021-03-29T13:54:56.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于我想要大幅度的减少知识类笔记这件事"><a href="#关于我想要大幅度的减少知识类笔记这件事" class="headerlink" title="关于我想要大幅度的减少知识类笔记这件事"></a>关于我想要大幅度的减少知识类笔记这件事</h2><p>今天我和陈思达同学在交流 Java 的学习过程的时候，大概询问了一下他的学习方法。</p><p>按照他的方法，就是不记笔记，直接看视频，然后多敲代码。</p><p>记录这么多的笔记是为了以后复习的时候再用吗，我想不是，因为我自己记录的笔记基本上我就没有在看过了，只是为了学习的时候，利用记笔记来转述知识点，从而达成更好的学习记忆效果。</p><p>记笔记是为了更好的理解记忆学习的知识。</p><p>既然这样，为什么不将记笔记的时间来多写写代码呢？同样的加深理解和记忆，记笔记和多次写代码，其实效果可能会差不多。</p><p>这样既能锻炼代码能力，也可以通过一次次代码编写来记住知识点和加深理解。</p><p>所以我想再次迈出改变的步伐，尝试以记录代码为主的笔记，然后通过多敲代码多写小项目来复习！！！</p><p>冲啊！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于我想要大幅度的减少知识类笔记这件事&quot;&gt;&lt;a href=&quot;#关于我想要大幅度的减少知识类笔记这件事&quot; class=&quot;headerlink&quot; title=&quot;关于我想要大幅度的减少知识类笔记这件事&quot;&gt;&lt;/a&gt;关于我想要大幅度的减少知识类笔记这件事&lt;/h2&gt;&lt;p&gt;今天</summary>
      
    
    
    
    <category term="阶段性总结" scheme="https://xorex.space/categories/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="笔记" scheme="https://xorex.space/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="规划" scheme="https://xorex.space/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 学习笔记</title>
    <link href="https://xorex.space/2021/03/23/487eab037aac/"/>
    <id>https://xorex.space/2021/03/23/487eab037aac/</id>
    <published>2021-03-23T08:18:50.000Z</published>
    <updated>2021-03-29T13:54:49.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于我第二次学习-JavaScript-这件事情"><a href="#关于我第二次学习-JavaScript-这件事情" class="headerlink" title="关于我第二次学习 JavaScript 这件事情"></a>关于我第二次学习 JavaScript 这件事情</h2><p>其实之前在学习安全的时候，面对 XSS 这种完全依托于 JavaScript 的漏洞，就大概也过了一边它的语法，但是非常粗略，所以现在学习 Java Web 的时候，还是觉得很有必要将 JavaScript 的各种语法都认真过一遍的。那么 JavaScript 学习笔记 2.0 开始吧！</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="嵌入位置"><a href="#嵌入位置" class="headerlink" title="嵌入位置"></a>嵌入位置</h3><ol><li><p>在任何位置使用 &lt;script&gt;alert(“hello”)&lt;/script&gt; ，只要被 script 标签包裹，就可以在里面填入 JavaScript 代码。</p></li><li><p>把 JavaScript 代码放到一个单独的 <code>.js</code> 文件当中，然后用 script 标签里面的 src 属性来引入这个文件。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./xorex/space/do.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>JavaScript 种一共有：<code>String Number Boolean Object Function</code> 变量类型。一个变量，除了有上面这几种类型，还有三种特殊的类型， <code>undefined null NaN</code> 。</p><ul><li><p><code>undefined</code> 定义变量没有初始值时默认值为此特殊值，表示一个 无 的原始值，类型为 <code>undefined</code> 类型，转为数值的时候为 <code>NaN</code></p></li><li><p><code>null</code> 为空值，表示 无 的对象。转为数值的时候为 0 ，是一种特殊的 <code>Object</code> 类型。</p></li><li><p><code>NaN</code> 表示 Not a Number 非数值类型，是一种特殊的 <code>Number</code> 类型，因为 typeof NaN 返回的就是 Number。</p></li></ul><blockquote><p>无穷大除以无穷大、给任意负数做开方运算 或者 算数运算符与不是数字或无法转换为数字的操作数一起使用时都将返回 NaN</p></blockquote><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p>JavaScript 和 PHP 一样有强相等和弱相等。</p><p>弱相等：== 仅仅是字面值比较 12 和 “12” 返回 true</p><p>强相等：=== 不但进行字面值比较，还会进行 12 和 “12” 返回 false</p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>JavaScript 同样拥有 <code>&amp;&amp; || !</code> 这样的逻辑运算，但是在 JavaScript 中，所有的数值都可以表示逻辑值，其中只有 0 null undefined “”（空串） false 会认为布尔假，其他的值都为布尔真。</p><ul><li><p>对于 <code>&amp;&amp;</code> 运算，当表达式为真的时候，返回最后一个表达式的值。表达式为假的时候，返回第一个为假的值。</p></li><li><p>对于 <code>||</code> 运算，当表达式为真的时候，返回第一个为真的表达式的值，表达式为假的时候，返回最后一个表达式的值。</p></li><li><p>并且逻辑运算有惰性运算的性质，当第一个表达式可以确定整个逻辑运算的结果的时候，后面的表达式将不会被计算。</p></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>JavaScript 的数组是可变长数组，根据下标随意拓展长度，属于类型为 Object 类型，使用 [] 表示，里面可以同时存储不同类型的数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Xorex=[<span class="literal">false</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;3&quot;</span>];</span><br><span class="line">Xorex[<span class="number">10</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">alert(Xorex)</span><br><span class="line">alert(Xorex.length)</span><br></pre></td></tr></table></figure><p>然后会返回：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false,1,2,3,,,,,,,</span><br><span class="line">11</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ol><li>for 循环</li></ol><p>for 循环基本上和 Java 的相同，唯一不同的是增强 for 循环的用法，JavaScript 使用了关键词 in ，并且增强 for 返回的是数组下标而不是元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Xorex=[<span class="literal">false</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;3&quot;</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> Xorex) &#123;</span><br><span class="line">    alert(Xorex[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>while 循环</li></ol><p>while 循环完全和 Java 一模一样。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>声明函数，只需要有关键词 function 即可，剩下什么都不用管。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量类型可以是 function 类型，那么意味着变量可以保存方法，如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Xorex=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">alert(Xorex(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>JavaScript 不允许方法重载。</p><hr><p>函数有一个隐形参数，arguments 是一个数组，里面保存了此函数传入的所有参数，可以在函数内调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Xorex=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">        alert(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">alert(Xorex(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>上面代码会弹三次，1，2，3。</p><h3 id="面对对象"><a href="#面对对象" class="headerlink" title="面对对象"></a>面对对象</h3><p>方法一：将变量变为 object 类型，然后，初始化一个属性等于声明一个属性，初始化一个方法等于声明一个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Xorex=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Xorex.name=<span class="string">&quot;Xorex&quot;</span>;</span><br><span class="line">Xorex.age=<span class="string">&quot;1024&quot;</span>;</span><br><span class="line">Xorex.speak=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;Name:&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot; age:&quot;</span>+<span class="built_in">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line">Xorex.speak();</span><br></pre></td></tr></table></figure><p>方法二：使用大括号定义对象格式：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var 对象名= &#123;</span><br><span class="line">    属性名:值,</span><br><span class="line">    属性名:值,</span><br><span class="line">    属性名:值,</span><br><span class="line"></span><br><span class="line">    方法名:function(参数) &#123;</span><br><span class="line">        方法代码</span><br><span class="line">    &#125;,</span><br><span class="line">    方法名:function(参数) &#123;</span><br><span class="line">        方法代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是逗号只有最后一个元素不用写。</p><p>对应的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Xorex=&#123;</span><br><span class="line">    name:<span class="string">&quot;Xorex&quot;</span>,</span><br><span class="line">    age:<span class="string">&quot;1024&quot;</span>,</span><br><span class="line"></span><br><span class="line">    speak:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;Name:&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot; age:&quot;</span>+<span class="built_in">this</span>.age);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    jump:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;I am jumping!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Xorex.speak();</span><br><span class="line">Xorex.jump();</span><br></pre></td></tr></table></figure><p>对于属性值，既可以用 . 访问，如 <code>Xorex.name</code> ，也可以用 [] 来访问，如 <code>Xorex[name]</code>。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><table><thead><tr><th align="left">事件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onchange</td><td align="left">HTML 元素改变</td></tr><tr><td align="left">onclick</td><td align="left">用户点击 HTML 元素</td></tr><tr><td align="left">onmouseover</td><td align="left">用户在一个HTML元素上移动鼠标</td></tr><tr><td align="left">onmouseout</td><td align="left">用户从一个HTML元素上移开鼠标</td></tr><tr><td align="left">onkeydown</td><td align="left">用户按下键盘按键</td></tr><tr><td align="left">onload</td><td align="left">浏览器已完成页面的加载，用于页面加载完成之后的初始化 js 操作。</td></tr><tr><td align="left">onsubmit</td><td align="left">表单提交事件，用于验证表单数据</td></tr><tr><td align="left">onblur</td><td align="left">失去焦点事件，用于验证填写框内容</td></tr></tbody></table><ol><li>静态事件注册：</li></ol><p>在需要事件的标签加上对应的事件属性，值为对应事件的 JavaScript 代码，比如下面的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;This is Xorex&#x27;);//里面直接写对应执行代码&quot;</span>&gt;</span>Xorex<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getAlert()//将对应代码封装成函数调用&quot;</span>&gt;</span>Yukino<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getAlert</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;This is Yukino!&quot;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>动态事件注册：</li></ol><p>在 windows.onload 事件里面设置代码，表示窗口页面加载完之后执行里面的事件注册代码。</p><p>然后里面通过 document.getElementById(“ID”) 来获取对应 html 标签元素对象，然后再设置此对象的某个事件为某个方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;Xorex&quot;</span>&gt;</span>Xorex<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;Yukino&quot;</span>&gt;</span>Yukino<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getXorex</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;This is Xorex!&quot;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getYukino</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;This is Yukino!&quot;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Xorex=<span class="built_in">document</span>.getElementById(<span class="string">&quot;Xorex&quot;</span>); <span class="comment">// 获取元素对象</span></span></span><br><span class="line"><span class="javascript">    Xorex.onclick=getXorex; <span class="comment">//注册元素对象 onclick 事件执行代码 getXorex()</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Yukino=<span class="built_in">document</span>.getElementById(<span class="string">&quot;Yukino&quot;</span>);</span></span><br><span class="line">    Yukino.onclick=getYukino;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onsubmit-事件"><a href="#onsubmit-事件" class="headerlink" title="onsubmit 事件"></a>onsubmit 事件</h3><p>因为是验证表单提交内容，如果出现不合法数据，则会阻止表单的提交，而阻止的方法就是返回一个 false </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://xorex.space&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return func()//这里一定要有 return 返回函数返回的 false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;去博客吧！&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;这玩意不合法，不能提交！&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在点击事件代码里就可以拦截表单的提交了。</p><h3 id="向标签里写入内容"><a href="#向标签里写入内容" class="headerlink" title="向标签里写入内容"></a>向标签里写入内容</h3><p>JS 可以往 HTML 代码中写入属性和内容。</p><p>写入属性，获取使用 getElementById 获取对应 html 元素 DOM 对象，然后 对象名.属性名=属性值 即可设置。</p><p>写入内容：获取元素 DOM 对象之后 对象名.innerHTML=写入内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;Test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onclickfunc()&quot;</span>&gt;</span>校验<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">onclickfunc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> usernameObj=<span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name=usernameObj.value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pattern=<span class="regexp">/^\w&#123;5,10&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> testObj=<span class="built_in">document</span>.getElementById(<span class="string">&quot;Test&quot;</span>); <span class="comment">// 校验是否符合正则表达式</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(pattern.test(name)) &#123; <span class="comment">//设置属性 style 为绿色，写入内容</span></span></span><br><span class="line"><span class="javascript">        testObj.style=<span class="string">&quot;color:green&quot;</span>;</span></span><br><span class="line"><span class="javascript">        testObj.innerHTML=<span class="string">&quot;Test Correct!&quot;</span></span></span><br><span class="line">    &#125; </span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> &#123; <span class="comment">//设置属性 style 为红色，写入内容</span></span></span><br><span class="line"><span class="javascript">        testObj.style=<span class="string">&quot;color:red&quot;</span>;</span></span><br><span class="line"><span class="javascript">        testObj.innerHTML=<span class="string">&quot;Test Uncorrect!&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JavaScript（通常缩写为 JS ）是一种高级的、解释型的编程语言。JavaScript 是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象程序设计，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持 I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它已经由 ECMA（欧洲电脑制造商协会）通过 ECMAScript 实现语言的标准化。它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持。</summary>
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="JavaScript" scheme="https://xorex.space/tags/JavaScript/"/>
    
    <category term="笔记" scheme="https://xorex.space/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSS 学习笔记</title>
    <link href="https://xorex.space/2021/03/21/d2e131b68164/"/>
    <id>https://xorex.space/2021/03/21/d2e131b68164/</id>
    <published>2021-03-21T08:41:04.000Z</published>
    <updated>2021-03-23T08:09:54.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS 的基本结构：</p><p><img src="https://xorex.space/image/199.jpg"></p><p>以及 CSS 的思维导图：</p><iframe src="https://www.xmind.net/embed/f3u7ay" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;p&gt;CSS 的基本结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://xorex.space/image/199.jpg&quot;&gt;&lt;/p</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Web" scheme="https://xorex.space/tags/Web/"/>
    
    <category term="CSS" scheme="https://xorex.space/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML 学习笔记</title>
    <link href="https://xorex.space/2021/03/19/84e6977d90f9/"/>
    <id>https://xorex.space/2021/03/19/84e6977d90f9/</id>
    <published>2021-03-19T07:04:46.000Z</published>
    <updated>2021-03-29T13:54:50.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><p>HTML 网页的组成由 <code>&lt;html&gt;</code> 标签包围，里面有文件头和文件主体。文件头可以写网站的标题，以及一些元数据，这些在文件头的元数据一一般是服务器加到 http 协议文件头的东西，比如 set-cookie 设置 cookie，refresh 刷新页面并重定向网页地址。而 body 里面主要就是 网页文件主要显示的内容了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is the website title!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">set-cookie</span> <span class="attr">content</span>=<span class="string">&quot;Xorex is the best!&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">refresh</span> <span class="attr">content</span>=<span class="string">&quot;3;URL=https://xorex.space&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">auther</span> <span class="attr">content</span>=<span class="string">&quot;Xorex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        Just wait 3 seconds.</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;Welcome,after 3 seconds you will jump to my blog!&quot;</span>);</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以在 body 标签中定义里面的页面基本属性：</p><ul><li>backgroud= 背景图片文件名</li><li>bgcolor= 背景颜色</li><li>text= 文本默认颜色</li><li>link= 没有被访问的链接的原文字颜色</li><li>alink= 被激活的链接的原文字颜色 active link</li><li>vlink= 访问过的链接的原文字的颜色 visited link</li><li>topmargin= 信息内容顶边距离</li><li>leftmargin= 信息内容左边距离 margin 边距</li></ul><h3 id="bgsound-背景音乐"><a href="#bgsound-背景音乐" class="headerlink" title="bgsound 背景音乐"></a>bgsound 背景音乐</h3><p>内含属性  <code>src=音乐源文件 loop=循环次数（不指定无限循环）</code>  </p><h3 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h3><p>使用 <code>&lt;!-- 中间的是注释，两边的是注释标记，可以添加到任意位置 --&gt;</code></p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>有些没法直接输入的字符，可以使用对应的数字代码或者代码名称来替代，比如：</p><table><thead><tr><th>特殊字符</th><th>数字代码</th><th>代码名称</th></tr></thead><tbody><tr><td>&amp;</td><td><code>&amp;#38;</code></td><td><code>&amp;amp;</code> (amperstand)</td></tr><tr><td>&lt;</td><td><code>&amp;#60;</code></td><td><code>&amp;lt;</code> (Less than It)</td></tr><tr><td>&gt;</td><td><code>&amp;#62;</code></td><td><code>&amp;gt;</code>  (Great than It)</td></tr><tr><td>空格</td><td>&amp;<code>#160;</code></td><td><code>&amp;nbsp;</code> (No-Break Space)</td></tr><tr><td>“</td><td>&amp;#34</td><td><code>&amp;quot;</code>  (Quot)</td></tr><tr><td>©</td><td>版权</td><td><code>&amp;copy;</code></td></tr><tr><td>&reg;</td><td>注册商标</td><td><code>&amp;reg;</code></td></tr></tbody></table><h3 id="lt-base-gt-基准控制"><a href="#lt-base-gt-基准控制" class="headerlink" title="&lt;base&gt; 基准控制"></a>&lt;base&gt; 基准控制</h3><p>放在 &lt;head&gt; 里面，用来给一些东西作为基准，比如链接，可以设置 <code>&lt;base href=&quot;https://Xorex.space&quot; target=_blank &gt;</code> 这样以后写超链接的时候，就不需要写 target ，并且 href 只需要写 域名后面的地址即可，比如 <code>href=index.html</code></p><h3 id="lt-iframe-gt-内联框架"><a href="#lt-iframe-gt-内联框架" class="headerlink" title="&lt;iframe&gt; 内联框架"></a>&lt;iframe&gt; 内联框架</h3><p>用来实现漂浮的窗口，拥有属性：</p><ul><li>src 框架的 html 代码地址</li></ul><h2 id="文本控制"><a href="#文本控制" class="headerlink" title="文本控制"></a>文本控制</h2><h3 id="字体控制标识符"><a href="#字体控制标识符" class="headerlink" title="字体控制标识符"></a>字体控制标识符</h3><p>添加到 <code>&lt;font size=XXX color=XXX face=XXX &gt;This is the words!&lt;/font&gt;</code></p><ul><li>size 字号从 1-7 字号越大字体越大</li><li>color 使用 html 指定颜色名称或者颜色的十六进制值比如 <code>#FFFFFF</code> 一共是六位十六进制符号</li><li>face 为字体，英文字体有 Times New Roman 中文字体有 宋体/楷体 等等。</li></ul><h3 id="物理字符样式"><a href="#物理字符样式" class="headerlink" title="物理字符样式"></a>物理字符样式</h3><p>比如下面的 b 为粗体（Bring Attention To），big 为变大，small 为变小，i 表示斜体文字（italic），tt 等宽字体（打印机字体 teletype text），u 下划线 （underlined），s 删除线 （strikethrough），strike 同样是删除线 ，sup 上标记（superscript ），sub 下标记（subscript），em 强调（emphasis），del 删除（delete），ins 插入（insert）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">B</span>&gt;</span>此处为粗体显示文本<span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">BIG</span>&gt;</span>此处为大字体文本<span class="tag">&lt;/<span class="name">BIG</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">SMALL</span>&gt;</span>此处为小字体文本<span class="tag">&lt;/<span class="name">SMALL</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">I</span>&gt;</span>此处为斜体文本<span class="tag">&lt;/<span class="name">I</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">TT</span>&gt;</span>此处为等宽字体文本<span class="tag">&lt;/<span class="name">TT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span>此处为下划线文本<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">S</span>&gt;</span>此处为使用<span class="symbol">&amp;lt;</span>S<span class="symbol">&amp;gt;</span>标记设置的删除线文本<span class="tag">&lt;/<span class="name">S</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">STRIKE</span>&gt;</span>此处为使用<span class="symbol">&amp;lt;</span>STRIKE<span class="symbol">&amp;gt;</span>标记设置的删除线文本<span class="tag">&lt;/<span class="name">STRIKE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>此处为上标示例：x<span class="tag">&lt;<span class="name">SUP</span>&gt;</span>2<span class="tag">&lt;/<span class="name">SUP</span>&gt;</span> + y<span class="tag">&lt;<span class="name">SUP</span>&gt;</span>2<span class="tag">&lt;/<span class="name">SUP</span>&gt;</span> = R<span class="tag">&lt;<span class="name">SUP</span>&gt;</span>2<span class="tag">&lt;/<span class="name">SUP</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>此处为下标示例：H<span class="tag">&lt;<span class="name">SUB</span>&gt;</span>2<span class="tag">&lt;/<span class="name">SUB</span>&gt;<span class="name">SO</span></span><span class="tag">&lt;<span class="name">SUB</span>&gt;</span>4<span class="tag">&lt;/<span class="name">SUB</span>&gt;</span></span><br></pre></td></tr></table></figure><P><B>此处为粗体显示文本</B><P><BIG>此处为大字体文本</BIG><P><SMALL>此处为小字体文本</SMALL><P><I>此处为斜体文本</I><P><TT>此处为等宽字体文本</TT><P><u>此处为下划线文本</u><P><S>此处为使用&lt;S&gt;标记设置的删除线文本</S><P><STRIKE>此处为使用&lt;STRIKE&gt;标记设置的删除线文本</STRIKE><P>此处为上标示例：x<SUP>2</SUP> + y<SUP>2</SUP> = R<SUP>2</SUP><P>此处为下标示例：H<SUB>2</SUB>SO<SUB>4</SUB><h3 id="marquee-滚动文字"><a href="#marquee-滚动文字" class="headerlink" title="marquee 滚动文字"></a>marquee 滚动文字</h3><p>包含一些比较常用的属性：</p><ul><li>width 和 height 滚动字幕的宽度和高度</li><li>bgcolor 滚动字幕的背景颜色</li><li>direction 滚动方向 left right up down</li><li>loop 滚动重复次数 不设置为无限循环</li><li>behavior 设置如何滚动 scroll slide alternate。</li></ul><h3 id="旁注文字"><a href="#旁注文字" class="headerlink" title="旁注文字"></a>旁注文字</h3><p>使用 &lt;ruby&gt;&lt;/ruby&gt; 来包围需要被旁注的文字。</p><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><p>利于爬虫提取时间的一中标签，表示里面是时间 &lt;time&gt;</p><p>拥有属性:</p><ul><li>datetime 普通日期时间  </li><li>pubdate 发表时间</li></ul><h3 id="文本分段"><a href="#文本分段" class="headerlink" title="文本分段"></a>文本分段</h3><ul><li>&lt;p&gt; 将文本分割成段落 paragraph</li><li>&lt;br&gt; 强制换行 break</li><li>&lt;hr&gt; （horizontal rule 水平尺）水平分割线  内含有属性 color size noshade(没有值，表示去除分割线阴影) align(对齐方式 left right center)</li><li>&lt;hn&gt;  其中 n 为自定义数字，表示第 n 级标题，n 最大为 6。</li></ul><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><ul><li>&lt;div&gt; (division) 将多段文本整合为一个节，这个节可以利用 &lt;div&gt; 中的 align 属性，设置一致的对齐方式， align拥有可选项： left right center justify（两端对齐） 此标签作用是将 html 代码分块管理。</li><li>&lt;center&gt;&lt;/center&gt; 将包括里面的内容居中对齐</li></ul><h3 id="文本格式保留"><a href="#文本格式保留" class="headerlink" title="文本格式保留"></a>文本格式保留</h3><p>使用 &lt;pre&gt; 标签可以想使用 Python 中的 ‘’’ 效果一样，完全保留在标签内的排版。</p><h3 id="组合文本"><a href="#组合文本" class="headerlink" title="组合文本"></a>组合文本</h3><p>使用 &lt;span&gt;XXXX&lt;span&gt; 用于标记的文字 XXXX 一些特别的表现，需要结合样式来确定具体的效果。</p><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><p>使用  &lt;ol&gt;&lt;/ol&gt; 来创建一个列表样式，ol：ordered list，&lt;ol&gt; 标签里面使用 &lt;li&gt; 来表示列表的一个元素。</p><p>ol 包含的属性：</p><ul><li>type 设置标记第几个的符号可选 1 A a I i（后两个为大小写罗马数字）</li><li>start 设置数字的起始值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;I&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>This is the first!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>This is the second!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>This is the third!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>列表可嵌套，只需要在 &lt;li&gt;&lt;/li&gt; 标签之间再新建一个列表即可。</p><hr><p>使用&lt;ul&gt; 标签可以搞一个无序列表 unordered list，使用 &lt;li&gt; 作为单个标记，用法效果和 md 里面的 - 符号相同。</p><hr><p>使用 &lt;dl&gt; discribe list 搞一个描述列表，里面有 &lt;dt&gt; discribe title 来自定义当前列表的标题。使用 &lt;dd&gt; discribe data 来跟在标题后面，表示属于其的内容。</p><p>可以搞 嵌套列表</p><h2 id="图像与超链接"><a href="#图像与超链接" class="headerlink" title="图像与超链接"></a>图像与超链接</h2><h3 id="Web-图像基础"><a href="#Web-图像基础" class="headerlink" title="Web 图像基础"></a>Web 图像基础</h3><p>矢量图和位图的区别。。。</p><ul><li>gif ： 颜色少于256位，允许透明，可以是图片或者动画</li><li>jpeg/jpg：颜色艳丽体积小，不支持透明和动画</li><li>png：可以用于矢量图，允许半透明</li></ul><h3 id="图像标记符-lt-img-gt"><a href="#图像标记符-lt-img-gt" class="headerlink" title="图像标记符  &lt;img&gt;"></a>图像标记符  &lt;img&gt;</h3><p>这个标签拥有属性：</p><ul><li>src 添加图像的 URL</li><li>dynsrc 添加视频的 URL</li><li>alt (alternative) 图像加载不出来的时候显示的文字</li><li>align 对齐方式，可选 left right top middle bottom</li><li>height 高度</li><li>width 宽度</li><li>hspace 水平方向空白大小</li><li>vspace 垂直方向空白大小</li></ul><h3 id="视频标记符-lt-video-gt"><a href="#视频标记符-lt-video-gt" class="headerlink" title="视频标记符 &lt;video&gt;"></a>视频标记符 &lt;video&gt;</h3><p>HTML5 支持三种视频格式： mp4、WebM 和 Ogg</p><p>标签 &lt;video&gt; 拥有下列属性：</p><ul><li>src 值 URL 为视频地址</li><li>autoplay 值 autoplay</li><li>loop 值 loop</li><li>muted 值 muted 设置为默认静音</li><li>width</li><li>height</li></ul><p>可以内嵌多个 &lt;source src=”” type=”video/mp4” &gt; 来代替标签内的 src 实现多个视频源备选。</p><h3 id="音频标记符-lt-audio-gt"><a href="#音频标记符-lt-audio-gt" class="headerlink" title="音频标记符 &lt;audio&gt;"></a>音频标记符 &lt;audio&gt;</h3><p>用法和上面的 &lt;video&gt; 差不多。</p><p>可以内嵌多个 &lt;source src=”” type=”audio/mp3” &gt; 来代替标签内的 src 实现多个音频源备选。</p><h3 id="多媒体文件-lt-embed-gt"><a href="#多媒体文件-lt-embed-gt" class="headerlink" title="多媒体文件 &lt;embed&gt;"></a>多媒体文件 &lt;embed&gt;</h3><p>embed 嵌入，这个标签用来加入除了视频和音频以外的多媒体文件，比如 Flash ，用法和上面的一样。</p><h3 id="单独一块内容-lt-figure-gt"><a href="#单独一块内容-lt-figure-gt" class="headerlink" title="单独一块内容 &lt;figure&gt;"></a>单独一块内容 &lt;figure&gt;</h3><p>用来声明单独的一块内容来显示东西，&lt;figcaption&gt; 用于放在 &lt;figure&gt; 标签里面用来用来介绍下面一块单独内容为什么东西。</p><h3 id="超链接标识符-lt-a-gt-XXX-lt-a-gt"><a href="#超链接标识符-lt-a-gt-XXX-lt-a-gt" class="headerlink" title="超链接标识符 &lt;a&gt;XXX&lt;/a&gt;"></a>超链接标识符 &lt;a&gt;XXX&lt;/a&gt;</h3><p>可以在可以显示的任意地方使用：<code>&lt;a href=https://xorex.space&gt;这是我的博客&lt;/a&gt;</code></p><p>h ref ：Hypertext reference</p><p>上面 XXX 的地方除了可以写文字，也可以插入一个图片。</p><hr><p>当然这个 href 可以是同一个页面的一个标签，直接跳转到标签所在的位置。标签的声明方法：</p><p><code>&lt;a name=&quot;mark1&quot;&gt;</code> 然后把 href 的值改为标签的名字 #mark1 即可。</p><hr><p>超链接拥有的属性：</p><ul><li>href 输入链接</li><li>target 何处打开目标 <code>_self</code> 当前窗口 默认，<code>_blank</code> 新窗口</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格的内容定义在 &lt;table&gt;&lt;/table&gt; 之间，一行一行定义的，每一行使用 &lt;tr&gt;&lt;/tr&gt; 之间定义这一行的内容，对于第一行来说，里面每一列的元素使用标签 &lt;th&gt;&lt;/th&gt; 来定义每一列的标题 head。第二行及其后面第一个使用&lt;th&gt;&lt;/th&gt;来表示这一行的标题head，后面的则使用标签 &lt;td&gt;&lt;/td&gt; 来表示每一列的具体数据。其中 tr：table row ，th：table head，td：table data。</p><p>举个例子：</p><table><thead><tr><th>姓名</th><th>上午</th><th>中午</th><th>晚上</th></tr></thead><tbody><tr><td>Xorex</td><td>打游戏</td><td>睡觉</td><td>打游戏</td></tr><tr><td>Megumi</td><td>看动漫</td><td>睡觉</td><td>看动漫</td></tr><tr><td>Yukino</td><td>学习</td><td>睡觉</td><td>学习</td></tr></tbody></table> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">1</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>上午<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>下午<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Xorex<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Megumi<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>看动漫<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>看动漫<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Yukino<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签&lt;Table&gt;属性</p><ul><li>width 表格宽度</li><li>border 是否显示边框，0 表示没有边框 1表示拥有边框</li><li>align 控制表格的对齐方式，可以是 left right center</li><li>bgcolor 设置表格背景颜色</li><li>background 设置背景图片</li></ul><p>标签 &lt;caption&gt; 用于给表格添加标题等说明文字</p><ul><li>align 可选择 left right center</li></ul><p>标签 &lt;tr&gt; 定义表格的一行</p><ul><li>align 行中数据水平的对齐方式 left right center</li><li>valign 行中数据垂直的对齐方式 top middle bottom</li><li>bgcolor 一行的背景颜色</li></ul><p>标签 &lt;td&gt; 定义表格的一个单独的数据</p><ul><li><p>align  可选 left right center</p></li><li><p>valign 可选 top middle bottom</p></li><li><p>width height 宽度和高度</p></li><li><p>rowspan 单元格合并格数 span(跨度，持续) 向右合并</p></li><li><p>colspan 单元格合并的列数可以内嵌多个 &lt;source src=”” type=”audio/mp3” &gt; 来代替标签内的 src 实现多个音频源备选。  向下合并</p></li></ul><p>标签 &lt;colgroup&gt; 对某一列进行统一标记</p><ul><li>可以使用 &lt;td&gt; 的所有属性，按照此标签个数，是第几个就是对第几列的控制。</li></ul><p>标签 &lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt; 对一行行数据进行标注</p><ul><li>要求三个同时出现，并且包含所有的元素。</li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>表单的格式： <code>&lt;form name=&quot;&quot; method=&quot;&quot; action=&quot;&quot;&gt;&lt;/from&gt;</code></p><ul><li>name 表示表单的名称</li><li>method 表示提交方法可以是 get 或者 post</li><li>action 表示将信息交给处理对象，比如 index.php</li></ul><p>&lt;input&gt; 标记，可以用来定义文本框，提交按钮，复选框等</p><ul><li>type 表示此表单的类型，有 文本框：text，密码框：password，提交按钮：submit，重置按钮：reset，单选按钮：radio，图像提交按钮：image，隐藏输入字段：hidden，上传文件：file，多选框：checkbox，多行文本框：textarea，选项菜单：select。</li><li>name 此表单的名称</li><li>size 单行文本框的长度</li><li>maxlength 文本框最大输入字数</li><li>value 若为文本框，则为默认值。若为选择按钮，则为被选中后传入服务器的值。若为按钮，则为按钮上的文字。</li><li>checked 表示默认选中的选项</li><li>readonly 赋值为 “readonly” 的时候，此文本框无法被修改。</li></ul><h3 id="input-新增表单控件"><a href="#input-新增表单控件" class="headerlink" title="input 新增表单控件"></a>input 新增表单控件</h3><ul><li>url 会自动验证数据是否为 url</li><li>email 会自动验证</li><li>时期或时间 可选择 date month week time detetime datetime-local</li><li>数字，可选 number（类似 &lt;select&gt; 选择） 或者 range（拖动条）</li></ul><h3 id="lt-filedset-gt-分组"><a href="#lt-filedset-gt-分组" class="headerlink" title="&lt;filedset&gt; 分组"></a>&lt;filedset&gt; 分组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就像上面把各种 &lt;input&gt; 表单分组，一个是用户登录，一个是用户注册，命名使用 &lt;legend&gt; （说明）来命名，和 &lt;input&gt; 并列。</p><h3 id="表单的各种实现"><a href="#表单的各种实现" class="headerlink" title="表单的各种实现"></a>表单的各种实现</h3><p>比如文本框 ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">Introduction</span> <span class="attr">maxlength</span>=<span class="string">250</span> <span class="attr">value</span>=<span class="string">&quot;Input in there.&quot;</span> <span class="attr">size</span>=<span class="string">20</span> <span class="attr">readonly</span>=<span class="string">readonly</span> &gt;</span></span><br></pre></td></tr></table></figure><p>比如密码框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">password</span> <span class="attr">maxlength</span>=<span class="string">16</span>  <span class="attr">size</span>=<span class="string">20</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">&quot;Submit the ID and password.&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">reset</span> <span class="attr">name</span>=<span class="string">&quot;Reset the datas.&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Reset&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">buttom</span> <span class="attr">name</span>=<span class="string">&quot;Show example.&quot;</span> <span class="attr">value-</span>&quot;<span class="attr">Show</span> <span class="attr">example</span>&quot; <span class="attr">onclick</span>=<span class="string">Example.js</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如单选框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">Sex</span> <span class="attr">value</span>=<span class="string">Man</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">Sex</span> <span class="attr">value</span>=<span class="string">Woman</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">death</span> <span class="attr">value</span>=<span class="string">0</span>&gt;</span>死亡</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">death</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span>存活</span><br></pre></td></tr></table></figure><p>比如多选框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">checkbox</span> <span class="attr">name</span>=<span class="string">ways</span> <span class="attr">value</span>=<span class="string">web</span>&gt;</span>Web</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">checkbox</span> <span class="attr">name</span>=<span class="string">ways</span> <span class="attr">value</span>=<span class="string">revrse</span>&gt;</span>逆向</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">checkbox</span> <span class="attr">name</span>=<span class="string">ways</span> <span class="attr">value</span>=<span class="string">crypto</span>&gt;</span>密码学</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">checkbox</span> <span class="attr">name</span>=<span class="string">ways</span> <span class="attr">value</span>=<span class="string">pwn</span>&gt;</span>二进制安全</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如文件框：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">name</span>=<span class="string">user_file</span> &gt;</span></span><br></pre></td></tr></table></figure><p>比如隐藏框（并不会被显示出来，一般用来搞验证的 token）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">id</span> <span class="attr">value</span>=<span class="string">123123123</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多行文本框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">10</span> <span class="attr">cols</span>=<span class="string">200</span> <span class="attr">name</span>=<span class="string">self_introduction</span>&gt;</span>在这里输入个人简介吧！<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选择列表"><a href="#选择列表" class="headerlink" title="选择列表"></a>选择列表</h3><p>选择列表在标签 &lt;select&gt;&lt;/select&gt; 中添加，它拥有以下属性：</p><ul><li>size 指定下拉菜单显示的菜单项目数量。</li><li>multiple=multiple 可以按住 ctrl 或者 shift 多选。</li></ul><p>选择列表需要配合 &lt;option&gt;&lt;/option&gt; 标签使用，属性如 下：</p><ul><li>value 被选中后返回到服务器的值</li><li>selected=selected 默认被选择</li></ul><p>比如建立一个语言选择列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">C++</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">Java</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">C#</span>&gt;</span>C#<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">Python</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">Pascal</span>&gt;</span>Pascal<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据选择列表：&lt;datalist&gt;</p><p>这个东西的使用场景是要填写一个答案固定几种的文本框，然后给文本框编写待选数据使用的，所以这个标签需要绑定一个文本框才可以使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">size</span>=<span class="string">40</span> <span class="attr">list</span>=<span class="string">URL</span> <span class="attr">name</span>=<span class="string">URL</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">URL</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">https://google.com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">https://xorex.space</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">https://tempest.space</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML-基础&quot;&gt;&lt;a href=&quot;#HTML-基础&quot; class=&quot;headerlink&quot; title=&quot;HTML 基础&quot;&gt;&lt;/a&gt;HTML 基础&lt;/h2&gt;&lt;p&gt;HTML 网页的组成由 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 标签包围，里面有文件头和</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Web" scheme="https://xorex.space/tags/Web/"/>
    
    <category term="HTML" scheme="https://xorex.space/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>行为型模式笔记</title>
    <link href="https://xorex.space/2021/03/16/1c210db0c3a4/"/>
    <id>https://xorex.space/2021/03/16/1c210db0c3a4/</id>
    <published>2021-03-16T15:27:47.000Z</published>
    <updated>2021-03-23T09:22:03.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。</p><p>其实本质上就是类的继承，首先父类将所要实现的功能放到<strong>模板方法</strong>里面 TemplateMethod() 外界只会调用这个方法来完成某一个任务。而完成模板方法可以变动的细节，再抽取成抽象方法，让子类用不同的方式实现这些方法。也就是说，父类的 TemplateMethod() 会通过调用子类实现的抽象方法来最终完成整个任务，不同的子类意味着实现方式的不同。</p><p>主要是对于同一个目标的不同实现方法分别放在不同的子类中，根据实际分析出最好的方法，然后用对应的子类完成。</p><p>下面就是模板方法的 UML 图，父类的 TemplateMethod() 会调用自己定义的抽象方法完成任务，而抽象方法的具体实现交给不同的子类。</p><p><img src="https://xorex.space/image/179.jpg"></p><p>模板方法模式的主要思想：父类定义骨架，子类实现某些细节。这里的骨架就是获取最短路径的步骤，建表-迭代-输出。而将拥有不同实现方法的细节——迭代，延迟到子类去实现（Floyd 算法、Dijkstra 算法）</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们用求最短路来表示一下模板方法模式，这里父类给出了要解决最短路问题的主要框架：建表-迭代-输出，然后迭代细节交给不同的子类用不同的算法实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shortest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Edge[] edges;</span><br><span class="line"></span><br><span class="line">    Shortest(Edge[] edges) &#123;</span><br><span class="line">        <span class="keyword">this</span>.edges=edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Edge[] GetShortest() &#123; <span class="comment">// 模板方法，调用此方法完成某一项功能</span></span><br><span class="line">        BuildEdge(<span class="keyword">this</span>.edges); <span class="comment">// 固定的算法骨架-建表</span></span><br><span class="line">        ToShort(<span class="keyword">this</span>.edges); <span class="comment">// 调用子类实现的细节-迭代</span></span><br><span class="line">        <span class="keyword">return</span> Output(<span class="keyword">this</span>.edges); <span class="comment">// 固定的算法骨架-输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BuildEdge</span><span class="params">(Edge[] edges)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在建立邻接表&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Edge[] Output(Edge[] edges) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;正在整合输出&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> Edge[] ToShort(Edge[] edges); <span class="comment">// 部分等待实现的细节，不同子类用不同方式实现。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 Floyd 和 Dijkstra 算法实现的最短路子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Floyd</span> <span class="keyword">extends</span> <span class="title">Shortest</span> </span>&#123;</span><br><span class="line">    Floyd(Edge[] edges) &#123;</span><br><span class="line">        <span class="keyword">super</span>(edges);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Edge[] ToShort(Edge[] edges) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用 Floyd 算法迭代出来了最短路&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dijkstra</span> <span class="keyword">extends</span> <span class="title">Shortest</span> </span>&#123;</span><br><span class="line">    Dijkstra(Edge[] edges) &#123;</span><br><span class="line">        <span class="keyword">super</span>(edges);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Edge[] ToShort(Edge[] edges) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用 Dijkstra 算法迭代出来了最短路&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用，实例化对应某一方法的子类，调用其模板方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetShort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Edge[] edges=<span class="keyword">new</span> Edge[<span class="number">100</span>];</span><br><span class="line">        Shortest toshort=<span class="keyword">new</span> Floyd(edges);</span><br><span class="line">        edges=toshort.GetShortest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>上面的模板方法模式的主要思想是：父类定义骨架，子类实现某些细节。这说明父类是针对与某一个问题的总体实现，框架是固定的，只不过是部分的实现细节不同（不同细节对不同资源的消耗是不同的），但最后得到的结果<strong>都是相同</strong>的。</p><p>而策略模式针对的不是一种解决方式的不同细节实现，而是多个整体解决方式。这些整体解决方式可以被替换，因为都是实现了同一个接口，所以替换不会影响到客户端的调用。一般来说是不同的策略得到的结果<strong>是不一样</strong>的。</p><p>比如 <code>Arrays.sort(T[] a, Comparator&lt;? super T&gt; c)</code> 这个排序方法，其中的 Comparator 接口就是排序策略的统一接口，不同的 compare() 实现的是不同的比较策略，对于不同的比较策略，最后排序的结果也会不同。</p><p>综上：策略模式的核心思想是在一个计算方法中把容易变化的算法抽出来接口作为 “策略” 参数传进去，从而使得新增策略不必修改原有逻辑。</p><p>策略模式的实现结构，所谓的环境类就是利用不同策略的类（比如接收 Comparator 接口的排序类）：</p><p><img src="https://xorex.space/image/180.jpg"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们实现一个根据 VIP 等级决定不同打折策略的购物系统。</p><p>策略接口和实现的不同策略类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> price)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span> <span class="keyword">implements</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;VIP会员，统一打八折&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> result=price*<span class="number">0.8</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coupon</span> <span class="keyword">implements</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cutdown;</span><br><span class="line"></span><br><span class="line">    Coupon(<span class="keyword">int</span> price) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cutdown=price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拥有优惠卷，便宜&quot;</span>+cutdown+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> price-cutdown;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> <span class="keyword">implements</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通会员，不优惠&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境类：超市购物系统，接收打折策略并完成结算过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMarket</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Discount discount;</span><br><span class="line"></span><br><span class="line">    SuperMarket(Discount discount) &#123;</span><br><span class="line">        <span class="keyword">this</span>.discount=discount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkOut</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discount.getPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户来超市实际的购物过程，不同的优惠策略对应不同的价格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperMarket sm1=<span class="keyword">new</span> SuperMarket(<span class="keyword">new</span> VIP());</span><br><span class="line">        System.out.println(sm1.checkOut(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        SuperMarket sm2=<span class="keyword">new</span> SuperMarket(<span class="keyword">new</span> Coupon(<span class="number">20</span>));</span><br><span class="line">        System.out.println(sm2.checkOut(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        SuperMarket sm3=<span class="keyword">new</span> SuperMarket(<span class="keyword">new</span> Common());</span><br><span class="line">        System.out.println(sm3.checkOut(<span class="number">100</span>));   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>对于一般我们控制一样东西，都是客户端直接持有需要控制的对象，然后和其进行交互。</p><p>但是当控制越来越复杂，就需要引入中间件来降低系统的耦合度了，这个中间件就是命令接口，实现其接口的不同子类拥有不同的命令，我们只需要持有命令接口，就可以用简单的代码完成复杂命令的发出。</p><p><img src="https://xorex.space/image/181.jpg"></p><p>使用小爱同学（中间件）来控制智能家居就是命令模式，小爱可以帮你传达控制智能家居的命令（红外 / wifi），还可以封装一些基本控制的组合为一个新的整体命令（小爱捷径），还可以在小爱执行列表里看到命令执行情况（中间件添加的日志系统）。</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>看看上面的 UML 图就行了，这个设计模式逻辑过于简单，就不写代码了。</p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>责任链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><p>比如异常的处理机制，从出问题的地方抛出来，然后经过每一个 catch() 进行判断是否可以捕捉，如果可以捕捉，则捕捉异常并处理，如果不能，则传递给下一个 catch()，直到有人能处理异常或者直接抛到程序外面，终止程序的运行。</p><p>责任链的实现也很简单，先建立一个抽象类规定处理者的公有属性和方法，（属性：下一个处理者）（方法：处理问题方法）。</p><p>构建责任链有两种方式，一种是直接创造好所有责任链所拥有的实例，然后用内聚的方法在调用处构造好责任链，然后传入待处理对象处理。另外一种是在写具体处理者的时候，就定义好责任链的下一个处理者，下一个处理者的实例化交给当前处理者决定（如果自己能处理，就自己处理，如果不能，实例化下一个处理者，并交付给它。）</p><p>下图是第一种责任链的构造方式：</p><p><img src="https://xorex.space/image/182.jpg"></p><p>然后一步一步的去处理：</p><p><img src="https://xorex.space/image/183.jpg"></p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们来写写第二种责任链的代码实现，实现一个责任链给人穿衣服。</p><p>定义被处理者 Person ，和处理者 Wearer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Person(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Person person;</span><br><span class="line">    </span><br><span class="line">    Wearer(Person person) &#123;</span><br><span class="line">        <span class="keyword">this</span>.person=person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Wearer next=<span class="keyword">new</span> WearPants(person);</span><br><span class="line">        <span class="keyword">return</span> next.wear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一下责任链里面的每一个单独处理者:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearPants</span> <span class="keyword">extends</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    WearPants(Person person) &#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在给&quot;</span>+person.getName()+<span class="string">&quot;穿内裤&quot;</span>);</span><br><span class="line">        Wearer next=<span class="keyword">new</span> WearJacket(person);</span><br><span class="line">        <span class="keyword">return</span> next.wear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearJacket</span> <span class="keyword">extends</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    WearJacket(Person person) &#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在给&quot;</span>+person.getName()+<span class="string">&quot;穿上衣&quot;</span>);</span><br><span class="line">        Wearer next=<span class="keyword">new</span> WearTrousers(person);</span><br><span class="line">        <span class="keyword">return</span> next.wear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearTrousers</span> <span class="keyword">extends</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    WearTrousers(Person person) &#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在给&quot;</span>+person.getName()+<span class="string">&quot;穿裤子&quot;</span>);</span><br><span class="line">        Wearer next=<span class="keyword">new</span> WearShoes(person);</span><br><span class="line">        <span class="keyword">return</span> next.wear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearShoes</span> <span class="keyword">extends</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    WearShoes(Person person) &#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在给&quot;</span>+person.getName()+<span class="string">&quot;穿鞋子&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;完成穿衣，准备出门!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后让 Xorex 小朋友被责任链一个接着一个穿衣服：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person Xorex=<span class="keyword">new</span> Person(<span class="string">&quot;Xorex&quot;</span>);</span><br><span class="line">        Wearer wearer=<span class="keyword">new</span> Wearer(Xorex);</span><br><span class="line">        System.out.println(wearer.wear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取最终的输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正在给Xorex穿内裤</span><br><span class="line">正在给Xorex穿上衣</span><br><span class="line">正在给Xorex穿裤子</span><br><span class="line">正在给Xorex穿鞋子</span><br><span class="line">完成穿衣，准备出门!</span><br></pre></td></tr></table></figure><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>状态关系的定义：对有状态的对象，把复杂的不同状态代码提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</p><p>我们会遇到在不同情况下，一个类需要有不同的应对处理状态。那么这个时候最基础的解决方法就是在类里面用 if 或者 switch 语句来判断当前所处于的状态，然后里面写对应状态的处理代码。但是这样做的缺陷会很大，代码会很复杂，很难维护，所以我们就更具定义，法复杂的状态代码提取到不同的状态对象中。定义一个状态接口，然后实现不同状态的类的代码。一旦系统处于某个状态，那么我们就持有对应这个状态的实例来处理事物，从而进行代码解耦。</p><p>对于持有应对外界状态的实例变化，有两种方式，一种是让状态实例自己判断并改变：实现原理就是让状态实例处理的时候，传入环境实例，等状态实例处理完成之后再自行判断并修改环境实例中的状态标志，从而改变状态。比如下面的 UML 类图就是这种模式：</p><p><img src="https://xorex.space/image/184.jpg"></p><p>另外一种则是交给外界控制并持有状态类实例的环境类来判断改变。其实现原理更加简单了，环境类执行状态实例的处理方法之后，根据处理方法返回的信息，决定环境类持有的下一个状态实例。没有 UML 图，但是有代码：</p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>我个人是觉得第二种更加好一点，这样可以单方面解耦状态类和环境类之间的联系，更加纯粹一点。</p><p>现在有一个人，可以进行交互，状态有开心和生气两种，改变状态触发条件时 Play() 和 Wrok() 。</p><p>状态接口以及两种状态类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">States</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">Talk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">Play</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">Work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HappyState</span> <span class="keyword">implements</span> <span class="title">States</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好啊，一起去玩吧！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;好耶，去玩！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;不想工作啊……&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AngryState</span> <span class="keyword">implements</span> <span class="title">States</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;滚，别和我说话。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;让我工作，想要找死吗？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;真是受够了，终于能玩了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境类，用于控制状态的转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> States now;</span><br><span class="line"></span><br><span class="line">    Context(States now) &#123;</span><br><span class="line">        <span class="keyword">this</span>.now=now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> now.Talk();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ans=now.Work();</span><br><span class="line">        now=<span class="keyword">new</span> AngryState();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ans=now.Play();</span><br><span class="line">        now=<span class="keyword">new</span> HappyState();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟和这个人交互：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context Xorex=<span class="keyword">new</span> Context(<span class="keyword">new</span> AngryState());</span><br><span class="line">        System.out.println(Xorex.Talk());</span><br><span class="line">        System.out.println(Xorex.Work());</span><br><span class="line">        System.out.println(Xorex.Play());</span><br><span class="line">        System.out.println(Xorex.Play());</span><br><span class="line">        System.out.println(Xorex.Talk());</span><br><span class="line">        System.out.println(Xorex.Work());</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后表现，可以看到中间 Play() 之后状态由 angry 转化为了 happy。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">滚，别和我说话。</span><br><span class="line">让我工作，想要找死吗？</span><br><span class="line">真是受够了，终于能玩了</span><br><span class="line">好耶，去玩！</span><br><span class="line">你好啊，一起去玩吧！</span><br><span class="line">不想工作啊……</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>观察者模式定义：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。</p><p>观察者模式是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响。而具体的实现方式就是建立一个中介，里面保存着所有的需要被通知的观察者，一旦被观察者通过自己被修改了，那么它会逐一通知所有保存着的观察者。</p><p><img src="https://xorex.space/image/185.jpg"></p><p>核心就是将观察者和被观察者解耦，建立一个中间类，中间类负责代理观察者监视被观察者，并根据被观察者的改变发送给观察者信息，包括管理订阅消息的观察者。</p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><p>观察者需要实现的接口，以及具体的观察者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">(String info)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yukino</span> <span class="keyword">implements</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Yukino received] &quot;</span>+info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Asuna</span> <span class="keyword">implements</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Yukino received] &quot;</span>+info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负责管理被观察者信息改变，并传递给观察者消息的信息管理者，以及被观察者的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageManger</span> </span>&#123;</span><br><span class="line">    Xorex xorex=<span class="keyword">new</span> Xorex();</span><br><span class="line">    List&lt;Observable&gt; obser=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOberver</span><span class="params">(Observable observer)</span> </span>&#123;</span><br><span class="line">        obser.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        xorex.setHeart(num);</span><br><span class="line">        notification(num);</span><br><span class="line">        inform(num);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inform</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        obser.forEach(o-&gt;o.getInfo(<span class="string">&quot;Xorex&#x27;s heart number is changed to &quot;</span>+num));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notification</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;[Message Manger] Information changed to &quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xorex</span> </span>&#123; <span class="comment">//被观察者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> heart;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeart</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.heart=num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改被观察者的信息，发现观察者已经接收到通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MessageManger mm=<span class="keyword">new</span> MessageManger();</span><br><span class="line">        mm.setOberver(<span class="keyword">new</span> Asuna());</span><br><span class="line">        mm.setOberver(<span class="keyword">new</span> Yukino());</span><br><span class="line">        mm.change(<span class="number">100</span>);</span><br><span class="line">        mm.change(<span class="number">10</span>);</span><br><span class="line">        mm.change(<span class="number">1</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收到的通知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Message Manger] Information changed to 100</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 100</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 100</span><br><span class="line"></span><br><span class="line">[Message Manger] Information changed to 10</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 10</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 10</span><br><span class="line"></span><br><span class="line">[Message Manger] Information changed to 1</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 1</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 1</span><br></pre></td></tr></table></figure><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>中介者模式定义：定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是最小认知原则的典型应用。</p><p>其实就是一堆应用应为相互依赖过于混乱，导致了改一个其他都可能会出问题，那么就搞一个中介，让所有的人都通过中介和其他人交互。大概就是从网状网络的去中心化更改为了星形网络的中心化，这样对于一切更改，我们只需要针对中介这一个类就可以了。</p><p>举个例子，对于同事们之间的信息交互，我们可以搞一个中介类来负责数据的发送和接收，UML 类图大概是这样：（其实抽象中介者一般来说都可以省略）</p><p><img src="https://xorex.space/image/186.jpg"></p><h3 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h3><p>代理模式：一般来说是代理类代替被代理类作为目标类来使用，用来完成被代理类无法完成或者不方便完成的任务。</p><p>中介者模式：作为一群类的处理交互人，这些类的相互交互全在中介类一个人身上。</p><p>外观模式：目标类（被其它类交互的类）整理出来一个统一的接口，来规范化简洁化和自己交互的过程。</p><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><p>因为中介者模式比较简单，所以不写了。</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p>迭代器模式前面学习集合的时候肯定已经非常熟悉了，就是对于一种聚合数据的类（无论是集合还是映射），都有遍历里面所有元素的需求，而这些需求都是聚合数据类内部实现的。遍历的方法是获取迭代器 Iterator，这个迭代器往往通过聚合数据类的 iterator() 获取。</p><p>而 Iteratior 接口就是这种标准的迭代接口，在 Collection 接口种就规定了一个方法用来返回用于此集合遍历的迭代器 Iterator<E> iterator();。而 Iteratior 接口规定了实现迭代统一而必不可少的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>; <span class="comment">// 返回是否还有下一个元素</span></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>; <span class="comment">// 返回下一个元素并移动指针指向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错，只有这两个方法就够了，判断还有下一个元素没有了，如果有就取出来，如果没有那就迭代完成！我们不需要关心集合是啥，只要 hasNext 和 next ，闭着眼都能遍历它。</p><p>而我们需要实现对聚合数据类进行迭代的时候，只需要对此类标注实现接口 Iterable 表示实现了方法 iterator() 来返回此数据聚合类的迭代器。然后重点就是让 iterator() 方法返回一个实现了 Iterator 接口的迭代器的实例。</p><p>主要是用内部类实现 Iterator 并重写 hasNext() 和 next() 方法，对应实现迭代器的 UML 图如下：</p><p><img src="https://xorex.space/image/197.jpg"></p><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><p>实现了 Iterable 接口的聚合数据类，表示可以被迭代，拥有 iterator() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCollection</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line"></span><br><span class="line">    MyCollection() &#123;</span><br><span class="line">        <span class="keyword">this</span>.array=(T[]) <span class="keyword">new</span> Object[<span class="number">1000</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        array[index++]=t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//返回本实例的迭代器实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Iter</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="comment">//通过内部类来实现迭代器的代码</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> curser=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> curser&lt;index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> array[curser++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码验证迭代器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCollection&lt;String&gt; mycol=<span class="keyword">new</span> MyCollection&lt;&gt;();</span><br><span class="line">        mycol.add(<span class="string">&quot;Xorex&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Tempest&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Yukino&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Asuna&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Katou&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Megumi&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String i:mycol) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后迭代成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Xorex</span><br><span class="line">Tempest</span><br><span class="line">Yukino</span><br><span class="line">Asuna</span><br><span class="line">Katou</span><br><span class="line">Megumi</span><br></pre></td></tr></table></figure><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><h3 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h3><p>定义：将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。它将对数据的操作与数据结构进行分离。</p><p>说人话版本，将对于数据结构里面数据的遍历和数据的操作分离。举个例子：遍历一个树结构然后将每一个节点的值 +1，这里遍历一个树结构是数据的遍历，将每一个节点的值 +1 是对数据的操作。这里我们可以将对数据的操作抽取出来，作为一个访问者，不同访问者的实现类实现了对数据的不同操作。这样在遍历数据的时候，我们就可以传入不同的访问者实例来决定对数据进行不同操作。</p><p>首先需要设置数据元素的接口，然后实现不同的元素类。</p><p>其次需要设置访问者接口，然后实现不同操作的访问者，访问者需要接收上面的符合元素接口实例，然后操作传入的实例。</p><p>最后就是实现数据结构类，负责对数据的增删查改和遍历，可以传入不同的访问者来实现对数据遍历的时候不同的操作。</p><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们写一个通过访问者修改数据的字符串内容为全部大写的需求。</p><p>首先代码数据的接口及其具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line"></span><br><span class="line">    Person(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后代码访问者的接口及代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Handle</span><span class="params">(Element element)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upper</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Changed element:] &quot;</span>+element.getName()+<span class="string">&quot; to &quot;</span>+element.getName().toUpperCase());</span><br><span class="line">        element.setName(element.getName().toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现数据聚合的控制类和主函数去调用对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ElementController ec=<span class="keyword">new</span> ElementController();</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Xorex&quot;</span>));</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Yukino&quot;</span>));</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Megumi&quot;</span>));</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Asuna&quot;</span>));</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Origami&quot;</span>));</span><br><span class="line">        ec.forEach(<span class="keyword">new</span> Upper());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElementController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Element&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Element i:list) &#123;</span><br><span class="line">            visitor.Handle(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过访问者成功修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Changed element:] Xorex to XOREX</span><br><span class="line">[Changed element:] Yukino to YUKINO</span><br><span class="line">[Changed element:] Megumi to MEGUMI</span><br><span class="line">[Changed element:] Asuna to ASUNA</span><br><span class="line">[Changed element:] Origami to ORIGAMI</span><br></pre></td></tr></table></figure><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><h3 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h3><p>就是对某一个类的某个状态进行抽取成某个格式，并保存到备忘录类中，方便实现历史状态回溯。</p><p>首先需要一个存档类，也就是某个类去存储状态的时候，里面属性的存储格式。这里可以是被存储类的部分属性组成的类，也可以直接 clone() 被存储类（存档格式就是被存储类本身）</p><p>然后就是一个存档容器类，里面用集合存储存档实例，内部由存储，提取，删除存档等功能。</p><p>如果存档类是要被存储类本身的话，获取存档只需要调用 clone() 就可以返回一个复制的存档用来存储。如果不是的话，还需要一个存档类生成器，用于传入被存储类，然后返回存档类。</p><p>实现的 UML 图大概如下，其中发起人 Originator 就是需要被存储的类，它可以自己创建并返回自己当前状态的存档类 Memonto ，也可以接收 Memonto 实例来恢复对应存档当时的状态。获取自己当前的状态类 Memonto 之后，交为管理者 Caretaker 存储管理。</p><p>客户端主要和管理者和被存储类交互，从被存储类获取它当前状态的存档并保存到管理者这里，或者从管理者这里获取过去状态存档然后传给被存储类进行状态恢复。</p><p><img src="https://xorex.space/image/198.jpg"></p><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><p>觉得这个模式比较好理解，所以就不写代码了 QAQ</p><h2 id="解释者模式"><a href="#解释者模式" class="headerlink" title="解释者模式"></a>解释者模式</h2><h3 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h3><p>解释器模式的定义：给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释语言中的句子。也就是说，用编译语言的方式来分析应用中的实例。这种模式实现了文法表达式处理的接口，该接口解释一个特定的上下文。</p><p>举个例子就是各种编程语言，SQL 语言，正则表达式，都是通过定义此语言的文法表示，然后用解析器解析成所需要执行的步骤。这里对应的就是各语言的 编译器/解释器 。</p><p>所以因为过于复杂，一般来说除非想写编译器，否则根本用不上。</p><h3 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h3><p>请翻阅各种语言的编译器/解释器源代码 QAQ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模板方法模式&quot;&gt;&lt;a href=&quot;#模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式&quot;&gt;&lt;/a&gt;模板方法模式&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行为型" scheme="https://xorex.space/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>UML 类图学习笔记</title>
    <link href="https://xorex.space/2021/03/15/b583afde1613/"/>
    <id>https://xorex.space/2021/03/15/b583afde1613/</id>
    <published>2021-03-15T09:24:59.000Z</published>
    <updated>2021-03-29T13:57:05.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><blockquote><p>UML类图是用来描述在面向对象设计程序的时候，各种类，接口等本身的信息和之间的联系。</p></blockquote><p>一些快速参考的资料：<a href="http://c.biancheng.net/view/8374.html">UML类图及类图之间的关系</a>、<a href="http://c.biancheng.net/view/8375.html">UML理解记忆</a> 。</p><h2 id="UML类之间的关系"><a href="#UML类之间的关系" class="headerlink" title="UML类之间的关系"></a>UML类之间的关系</h2><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>A 类在代码内部临时调用 B 类（通过局部实例变量，方法参数传入，或者直接调用静态方法）这种不持有 B 类，但是需要用到 B 类的关系，称为依赖关系，A 类依赖于 B 类。而依赖是单方面的依赖，</p><p>比如 Person 类中的 call(Phone phone) 方法需要传入 Phone 类的实例，然后内部调用实例 phone 的方法完成通话，那么就说 Person 类依赖于 Phone 类。</p><p>依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/171.jpg"></p><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>关联关系表示两个类有一定的联系，比如 Person 和 Address 之间，人拥有自己的住址，住址地方有人的存在。两者就是相互关联的关系。关联可以是单方面的关联，也可也是互相关联。被关联的类会成为关联者的一个属性。</p><p>单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类，而双向的关联可以用带两个箭头或者没有箭头的实线来表示。关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/172.jpg"></p><h3 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h3><p>当 A 类是由 B 类聚合而成的，并且 B 类可以独立于 A 类，那么称 A 和 B 的关系为聚合关系。比如雁群和大雁的关系，雁群由任意个大雁组成，而大雁可以独立于雁群，就成为大雁聚合成为了雁群。老师们聚合到了学校里面，即使学校倒闭，也可以独立存在，不会随着学校一起消亡。（被聚合个体实例创建在外部，聚合个体时通过外部传入被聚合实例，聚合体销毁的时候，被聚合体实例在外部仍然有引用，不会被回收）</p><p>聚合关系可以用带空心菱形的实线来表示，菱形指向整体，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/173.jpg"></p><h3 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h3><p>组合关系需要一个类由若干个类真正组合而成，比如人是由四肢、躯干、头组成的。少了头，人就不完整了，没有了人，头也无法单独存在。这种极为紧密的关系被称为组合关系，实现这样的部分对象不能脱离整体对象的存在实现方法就是在整体的内部创建部分。这样整体一旦被销毁，部分会因为没有外部引用指向它而也被销毁。</p><p>组合关系用带实心菱形的实线来表示，菱形指向整体，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/174.jpg"></p><h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><p>泛化：变得宽泛，指由个别到一般或由具体到抽象。</p><p>也就是说，泛化关系指的是父类和子类之间的继承关系。</p><p>泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/175.jpg"></p><h3 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h3><p>实现关系是接口和实现类的关系。</p><p>实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/176.jpg"></p><h2 id="记忆理解图"><a href="#记忆理解图" class="headerlink" title="记忆理解图"></a>记忆理解图</h2><p><img src="https://xorex.space/image/177.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UML类图&quot;&gt;&lt;a href=&quot;#UML类图&quot; class=&quot;headerlink&quot; title=&quot;UML类图&quot;&gt;&lt;/a&gt;UML类图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;UML类图是用来描述在面向对象设计程序的时候，各种类，接口等本身的信息和之间的联系。&lt;/p</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="UML" scheme="https://xorex.space/tags/UML/"/>
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>结构型模式笔记</title>
    <link href="https://xorex.space/2021/03/11/41a99764aa02/"/>
    <id>https://xorex.space/2021/03/11/41a99764aa02/</id>
    <published>2021-03-11T03:23:54.000Z</published>
    <updated>2021-03-23T09:20:33.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/TT2ej6" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><p>大概流程：</p><p><img src="https://xorex.space/image/166.jpg"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>这里情景是 ChinaLapTop 需求 Electric220V 但是没有，只有现成的 Electric110V，那么我们就建立一个适配器 Adapter，将被适配者 Electric110V 适配为 Electric220V。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseComputer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChinaLapTop laptop=<span class="keyword">new</span> ChinaLapTop();</span><br><span class="line">        <span class="comment">// 这里模拟从中国带去美国的笔记本，需要 220V 的电源(ChinaElectric)</span></span><br><span class="line">        <span class="comment">// 但是没有，只有 110V 的电源(AmericaElectric)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用适配器将已有的资源转化为需要的资源</span></span><br><span class="line">        Electric110V electric=<span class="keyword">new</span> Electric110V();</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter(electric);</span><br><span class="line">        laptop.PowerOn(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们需求的 ChinaElectric</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Electric220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPower</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器转化结果为 ChinaElectric</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Electric220V</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Electric110V USelc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Electric110V USelc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.USelc = USelc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> USelc.getPower()*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已有资源，被适配者 Adaptee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Electric110V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">110</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源需求者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaLapTop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChinaLapTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I hava a China LapTop!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PowerOn</span><span class="params">(Electric220V electric)</span> </span>&#123;</span><br><span class="line">        electric.getPower();</span><br><span class="line">        System.out.println(<span class="string">&quot;Power on succeed!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>参考文章：<a href="https://blog.csdn.net/dianzhenluo3164/article/details/102143836">设计模式 – 桥接模式(Bridge)</a></p></blockquote><p>桥接模式就是为了解决因为排列组合事物所有的属性而导致子类爆炸的情况。</p><p>比如汽车，汽车的车型有：载货汽车，牵引车，客车，轿车等等，汽车的发动机有：柴油发动机，汽油发动机，电动发动机。那么我们如果要具体的汽车，就需要把这些汽车的组合都写成类，一共就要 4*3=12 种。而且一旦有新的动力来源或者车型增加，那么增加的子类就更多了。为了解决这个问题，我们可以将这些属性抽象（<code>从众多的事物中抽取出共同的、本质性的特征</code>）为不同的维度，比如汽车里面的车型为一个维度，发动机类型为一个维度。然后通过组合两个维度来顶替一个具体的实现类来使用，这样就只需要 4+3=7 个类即可，将复杂度从 m*n 降到了 m+n 。</p><p>如何实现两个不同维度的组合呢？这就要说桥接模式了，用它来将两个不同的维度联系（桥接）起来。首先我们将事物属性抽象为不同的维度之后，选择其中一个维度作为抽象维度，剩下的其他维度作为实现维度。这里的选择没有具体的要求，根据取舍来选择。我们将上面的汽车属性抽象为维度：车型维度和发动机维度。然后选取车型作为抽象维度，发动机作为实现维度。</p><p>实现维度的每一个类都需要具体代码实现自己的功能，并让抽象维度去调用（桥接），这样来实现维度之间的结合。比如实现维度的所有类都需要用实际代码实现 <code>getPower()</code> 方法，不同的类实现不同，有的是通过烧柴油，有的是通过烧汽油。而抽象维度内部定义的统一方法的实现则是通过调用实现维度实现的方法完成的。比如抽象维度里面的越野车，里面的 <code>Drive()</code> 方法获取动力就是依靠实现类的方法 <code>getPower()</code>。</p><p>因此，这里的抽象维度的 抽象 就仅仅是方法内部的 <strong>一部分</strong> 需要其他人实现，是特殊意义上的抽象类和抽象方法（这个方法内部全都需要他人实现）。和 <code>从众多的事物中抽取出共同的、本质性的特征</code> 这个概念关系无关。</p><p>桥接的对象是两个维度，其中必定有一个维度为抽象维度，另外一个维度为实现维度。桥接之后的整体可以作为一个新的实现维度，因为不需要调用其他外部实现维度就可以实现自己的方法，所以整体可以作为新的实现维度给抽象维度调用。</p><p>因此，拥有复杂属性的事物，就可以用桥接组合来实现。比如一个抽象维度建立多个桥接到实现维度上，而实现维度也可以拆分为另一个抽象维度和实现维度的整体（发动机维度）。比如下图。</p><p><img src="https://xorex.space/image/167.jpg"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在 Java 中的 JDBC 编程中就用到了桥接模式，实现数据库的驱动有很多，不可能让我们写的程序对每一种数据库都搞一个版本，那么我们可以将我们的程序和数据库驱动分离为两个维度，我们持有数据库驱动的接口，调用接口里面的方法来实现我们程序（抽象维度）。而实现维度为满足驱动接口的不同数据库的驱动。</p><p>当然这里实际的 JDBC 比桥接还多了一个设计模式，那就是抽象类获取实现类实例的时候，用到了工厂方法模式，获取实例交给工厂 DirverManager 来实现。</p><p><img src="https://xorex.space/image/168.jpg"></p><h3 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/da3jS3" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/193.jpg"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>对于桥接模型的实际实现代码，有两种不同的方式，之间的区别在于如何获取实现类的实例，分为为 组合 和 聚合。</p><p>组合实例：内部持有的实例是内部直接实例化出来（通过传入参数判断实例化对象）的，一旦组合类销毁，组合的实例会因为没有引用而销毁。</p><p>聚合实例：内部持有的实例是外部实例化（自己控制实例化对象）再传进来的，如果聚合类销毁，可能并不会影响聚合的实例，取决于外部是否还有引用指向此实例。</p><p>我们用会随着聚合类一起销毁的聚合方法来实现桥接吧。</p><p>下面实现手机抽象类和若干零部件的实现类之间的桥接。手机作为抽象类有小米子类，华为子类，桥接屏幕、和电池。屏幕又作为一个整体分为屏幕材质抽象类和分辨率抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bridging</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone RedmiK30s = <span class="keyword">new</span> MiPhone(<span class="keyword">new</span> B5000mah(), <span class="keyword">new</span> LCD(<span class="keyword">new</span> FHD()));</span><br><span class="line">        Phone HuaweiMate40Pro = <span class="keyword">new</span> HuaweiPhone(<span class="keyword">new</span> B4400mah(),<span class="keyword">new</span> OLED(<span class="keyword">new</span> QHD()));</span><br><span class="line">        RedmiK30s.LightUp();</span><br><span class="line">        HuaweiMate40Pro.LightUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类手机</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Bettary bettary;</span><br><span class="line">    <span class="keyword">protected</span> Screen screen;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(Bettary bettary, Screen screen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bettary = bettary;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">LightUp</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象子类小米手机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MiPhone</span><span class="params">(Bettary bettary, Screen screen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bettary, screen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//小米手机业务代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LightUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The Mi Phone is trying LightUp.&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> power = bettary.GetPower();</span><br><span class="line">        screen.returnLight(power);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象子类华为手机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HuaweiPhone</span><span class="params">(Bettary bettary, Screen screen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bettary, screen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 华为手机业务代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LightUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The HuaweiPhone is trying LightUp.&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> power = bettary.GetPower();</span><br><span class="line">        screen.returnLight(power);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独来说作为抽象类，和它的实现类 Resolution 一起就成了 Phone 的实现类了</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Resolution resolution;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Screen</span><span class="params">(Resolution resolution)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resolution = resolution;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">returnLight</span><span class="params">(<span class="keyword">int</span> power)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OLED</span> <span class="keyword">extends</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OLED</span><span class="params">(Resolution resolution)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resolution);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnLight</span><span class="params">(<span class="keyword">int</span> power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pixel = resolution.retrunPixel();</span><br><span class="line">        System.out.println(<span class="string">&quot;Using LCD Screen with &quot;</span>+pixel+<span class="string">&quot; pixels,powered by &quot;</span>+power+<span class="string">&quot;mah bettary&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCD</span> <span class="keyword">extends</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LCD</span><span class="params">(Resolution resolution)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resolution);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnLight</span><span class="params">(<span class="keyword">int</span> power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pixel = resolution.retrunPixel();</span><br><span class="line">        System.out.println(<span class="string">&quot;Using LCD Screen with &quot;</span>+pixel+<span class="string">&quot; pixels,powered by &quot;</span>+power+<span class="string">&quot;mah bettary&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Screen 的实现类接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Resolution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">retrunPixel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QHD</span> <span class="keyword">implements</span> <span class="title">Resolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">retrunPixel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2772</span>*<span class="number">1344</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FHD</span> <span class="keyword">implements</span>  <span class="title">Resolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">retrunPixel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2400</span>*<span class="number">1080</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Phone 的其中一个实现类接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bettary</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetPower</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B4400mah</span> <span class="keyword">implements</span> <span class="title">Bettary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B5000mah</span> <span class="keyword">implements</span> <span class="title">Bettary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="代理模式思维导图"><a href="#代理模式思维导图" class="headerlink" title="代理模式思维导图"></a>代理模式思维导图</h3><blockquote><p>很水的思维导图</p></blockquote><iframe src="https://www.xmind.net/embed/qsBZdT" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="静态代理阐述"><a href="#静态代理阐述" class="headerlink" title="静态代理阐述"></a>静态代理阐述</h3><blockquote><p>下面的描述是对以前学习代理的时候，留下来的笔记的改正版。</p></blockquote><p>当我们调用以前写过的类去完成一些任务的时候，发现这个类没有办法满足我们的需求，而需要添加一些功能。如果要去修改这些代码，不但不符合开闭原则，还有可能因为修改代码让其他调用这个类的地方出现错误。在调用者这里完成需求的话，又会让调用者变得极其复杂，不符合单一职责原则。这个时候，我们就可以再新建一个类，作为调用者的代理类，在这个类里面添加拓展功能的实现代码，并代替调用者调用目标类的方法。这样这个代理类就代替我们实现了所有的业务需求。</p><p>通过建立一个代理，来帮助我们和目标类交互并处理结果，拓展业务的代码交给代理类即可。</p><p>这就是静态代理： <strong>代理类 = 目标类 + 增强代码</strong></p><p><img src="https://xorex.space/image/169.jpg" alt="preview"></p><p>我们直接调用代理类即可，代理类会代替我们访问目标类并完善交互结果。</p><h3 id="UML-图-1"><a href="#UML-图-1" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/194.jpg"></p><h3 id="静态代理代码实现"><a href="#静态代理代码实现" class="headerlink" title="静态代理代码实现"></a>静态代理代码实现</h3><blockquote><p>这里模拟的情景为买手机，买手机我们可以直接去手机工厂购买，但是这对于普通消费者来说，还是太不友好了。于是这里引入一个代理类：手机商店，然消费者去手机商店买。而手机商店会去代替消费者去手机工厂购买，并且还提供了额外的一些服务，如咨询机型服务，砍价服务，赠送礼品服务等等。这里消费者就是调用者，而手机商店就是消费者的代理类，代替消费者和目标类（手机工厂）交互，并完善交互结果。</p></blockquote><p>手机工厂及其接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">GetPhone</span><span class="params">(<span class="keyword">int</span> Money,String Model)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiPhoneFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">GetPhone</span><span class="params">(<span class="keyword">int</span> Money, String Model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (Model)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Redmi K30s Ultra&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">2200</span>) <span class="keyword">return</span> <span class="string">&quot;Redmi K30s Ultra&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Mi11&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">3500</span>) <span class="keyword">return</span> <span class="string">&quot;Mi11&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span>  <span class="string">&quot;Redmi k40&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">1700</span>) <span class="keyword">return</span> <span class="string">&quot;Redmi K40&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiPhoneFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">GetPhone</span><span class="params">(<span class="keyword">int</span> Money, String Model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (Model)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei P40&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">3000</span>) <span class="keyword">return</span> <span class="string">&quot;Huawei P40&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei Mate40&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">4100</span>) <span class="keyword">return</span> <span class="string">&quot;Huawei Mate40&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span>  <span class="string">&quot;Huawei Mate40Pro&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">5500</span>) <span class="keyword">return</span> <span class="string">&quot;Huawei Mate40Pro&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类手机商店，及其包括的一些额外服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneShopProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PhoneFactory pf;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> Coupon=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Consult</span><span class="params">(String Band,<span class="keyword">int</span> AllMoney)</span> </span>&#123;</span><br><span class="line">        String Phone=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(Band.equals(<span class="string">&quot;XiaoMi&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Coupon) AllMoney+=<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">this</span>.pf=<span class="keyword">new</span> MiPhoneFactory();</span><br><span class="line">            <span class="keyword">if</span>(AllMoney&gt;<span class="number">3999</span>) Phone=<span class="string">&quot;Mi11&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(AllMoney&gt;=<span class="number">2599</span>) Phone=<span class="string">&quot;Redmi K30s Ultra&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(AllMoney&gt;=<span class="number">1999</span>) Phone=<span class="string">&quot;Redmi k40&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> Phone=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(Phone==<span class="keyword">null</span>) System.out.println(<span class="string">&quot;请多带些钱来把!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(<span class="string">&quot;我们建议你购买：&quot;</span>+Phone);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(Band.equals(<span class="string">&quot;Huawei&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Coupon) AllMoney+=<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">this</span>.pf=<span class="keyword">new</span> HuaweiPhoneFactory();</span><br><span class="line">            <span class="keyword">if</span>(AllMoney&gt;<span class="number">5999</span>) Phone=<span class="string">&quot;Huawei Mate40Pro&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(AllMoney&gt;=<span class="number">4999</span>) Phone=<span class="string">&quot;Huawei Mate40&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(AllMoney&gt;=<span class="number">3999</span>) Phone=<span class="string">&quot;Huawei P40&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> Phone=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(Phone==<span class="keyword">null</span>) System.out.println(<span class="string">&quot;钱不够呢，请多带些钱来把!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(<span class="string">&quot;我们建议你购买：&quot;</span>+Phone);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这里没有你想要的手机呢&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Bargain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Coupon=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们这已经是成本价了，赔钱给你便宜 100 块吧。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Gift</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;充电宝，贴膜，手机壳，耳机，电饭煲&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BuyPhone</span><span class="params">(String PhoneName)</span> </span>&#123;</span><br><span class="line">        String Phone=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (PhoneName) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Mi11&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">3500</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Redmi K30s Ultra&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">2200</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Redmi k40&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">1700</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei P40&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">3000</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei Mate40&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">4000</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei Mate40Pro&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">5000</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Phone==<span class="keyword">null</span>) System.out.println(<span class="string">&quot;购买失败，型号错误&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">&quot;购买成功，&quot;</span>+Phone+<span class="string">&quot; 礼品：&quot;</span>+Gift());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>购买手机的实际消费者（被代理类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyPhone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PhoneShopProxy shop1=<span class="keyword">new</span> PhoneShopProxy();</span><br><span class="line">        String Phone1=shop1.Consult(<span class="string">&quot;XiaoMi&quot;</span>, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">if</span>(Phone1!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            shop1.Bargain();</span><br><span class="line">            shop1.BuyPhone(Phone1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        PhoneShopProxy shop2=<span class="keyword">new</span> PhoneShopProxy();</span><br><span class="line">        String Phone2=shop2.Consult(<span class="string">&quot;Huawei&quot;</span>, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">if</span>(Phone2!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            shop2.Bargain();</span><br><span class="line">            shop2.BuyPhone(Phone2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们建议你购买：Redmi k40</span><br><span class="line">我们这已经是成本价了，赔钱给你便宜 100 块吧。</span><br><span class="line">购买成功，手机: Redmi K40 礼品：充电宝，贴膜，手机壳，耳机，电饭煲</span><br><span class="line"></span><br><span class="line">钱不够呢，请多带些钱来把!</span><br></pre></td></tr></table></figure><h3 id="动态代理阐述"><a href="#动态代理阐述" class="headerlink" title="动态代理阐述"></a>动态代理阐述</h3><p>前面说类静态代理，说是静态代理是因为这些过程在运行的时候都是不变的，编译生成 <code>.class</code> 文件是在 JVM <strong>运行之前</strong>完成的。但是动态代理的代理类，是在 JVM <strong>运行中</strong>生成的 <code>.class</code> 的。</p><p>动态代理有什么好处吗，为什么在 JVM 运行中生成有什么用啊？</p><p>当然有用，它最大的用处就是在运行中生成。在静态代理中，如果我们需要对大量的目标类进行编写增强代码相似的代理类来代替消费者访问，重复的工作就太多了。于是我们想要在程序运行的时候，根据实际所对应的目标类能自动生成消费者需要的代理类，我们只用写一次代理类模板，就能直接访问并完善所有的目标类，那就太方便了。想到动态代理可以在程序运行中生成代理类，这不就是我们想要的嘛，写一个代理类模板，运行的时候依次生成所有访问目标类的代理类，这样以后修改增强代码只需要在代理类模板里修改即可。</p><p>看下图，这里静态代理和动态代理最大的区别就是多了一个中间处理方法 invoke() ，这个invoke() 里面就是用来写增强代码的地方，里面对目标类的各种交互利用反射来完成。只需要将目标类传进代理生成器，就能利用反射生成一个访问目标类的代理类，最后只要操作这个生成的代理类代替我们和目标类交互即可。修改代码只修改 invoke()</p><p><img src="https://xorex.space/image/170.jpg" alt="preview"></p><p>为了能生成代理类，就需要有模板 <code>InvocationHandler.invoke()</code> ，这个是我们自己通过重写实现的，然后需要一个代理类生成器：<code>Proxy.newProxyInstance()</code> ，最后，只需要将模板和数据塞入代理类生成器，就能量产代理类了。</p><h3 id="动态代理代码实现"><a href="#动态代理代码实现" class="headerlink" title="动态代理代码实现"></a>动态代理代码实现</h3><p>这里将不同接口： PhoneFactory、LapTopFactory 作为目标类（也是只有动态代理才可以使用的），通过动态代理来生成代理类，供代替消费者买手机。</p><p>产品的不同接口和实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetPhone</span><span class="params">()</span></span>;</span><br><span class="line">&#125; <span class="comment">// 接口一</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiPhoneFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产成功：小米手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LapTopFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetLapTop</span><span class="params">()</span></span>;</span><br><span class="line">&#125; <span class="comment">// 接口二</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiLapTopFactory</span> <span class="keyword">implements</span> <span class="title">LapTopFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetLapTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产成功：小米笔记本&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成代理类的 InvocationHandler 模板，以及生成方法 Proxy.newProxyInstance() 这里将实现模板和调用生成方法两个集成到了同一个类中。</p><p>具体的代码解释可以看以前学习反射的时候写的动态代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=target;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),<span class="keyword">this</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在前往工厂购买产品&quot;</span>);</span><br><span class="line">            result=method.invoke(<span class="keyword">this</span>.target, args);</span><br><span class="line">            System.out.println(<span class="string">&quot;正在将产品运往商店&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用者使用代理类来和 target 交互，这里一定要注意交互不同的 target 的时候，如果使用写法一就需要声明不同的 DynamicProxy 啊！理由看上面的代码注释。如果想要节省资源就要用写法二。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MiPhoneFactory pf=<span class="keyword">new</span> MiPhoneFactory();</span><br><span class="line">        MiLapTopFactory lf=<span class="keyword">new</span> MiLapTopFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写法一：</span></span><br><span class="line">        DynamicProxy dp1=<span class="keyword">new</span> DynamicProxy();</span><br><span class="line">        DynamicProxy dp2=<span class="keyword">new</span> DynamicProxy();</span><br><span class="line">        PhoneFactory phoneproxy=(PhoneFactory) dp1.getProxy(pf);</span><br><span class="line">        LapTopFactory laptopfactory=(LapTopFactory) dp2.getProxy(lf);</span><br><span class="line">        phoneproxy.GetPhone();</span><br><span class="line">        System.out.println();</span><br><span class="line">        laptopfactory.GetLapTop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写法二：</span></span><br><span class="line">        DynamicProxy dp=<span class="keyword">new</span> DynamicProxy();</span><br><span class="line">        PhoneFactory phoneproxy=(PhoneFactory) dp.getProxy(pf);</span><br><span class="line">        phoneproxy.GetPhone();</span><br><span class="line">        System.out.println();</span><br><span class="line">        LapTopFactory laptopfactory=(LapTopFactory) dp.getProxy(lf);</span><br><span class="line">        laptopfactory.GetLapTop();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正在前往工厂购买产品</span><br><span class="line">生产成功：小米手机</span><br><span class="line">正在将产品运往商店</span><br><span class="line"></span><br><span class="line">正在前往工厂购买产品</span><br><span class="line">生产成功：小米笔记本</span><br><span class="line">正在将产品运往商店</span><br></pre></td></tr></table></figure><hr><p>记录一个小错误：</p><p>因为：在用 Proxy.newInstaceProxy() 获取代理类的时候，传入的 this 为本 DynamicProxy 实例。本实例的属性 target 的内存地址是固定的，只能保存一个 target。所以生成的代理类调用的目标类 target 的时候，是一个 DynamicProxy 对应一个 target 的。<strong>不同的</strong>目标类<strong>同时</strong>使用需要声明不同的 DynamicProxy，不同的目标类依次使用只需要声明一个 DynamicProxy。</p><p>下面表示用一个 DynamicProxy 生成器生成访问不同目标类的两种代理类，并同时使用的错误：（没错我就是刚犯！）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MiPhoneFactory pf=<span class="keyword">new</span> MiPhoneFactory();</span><br><span class="line">        MiLapTopFactory lf=<span class="keyword">new</span> MiLapTopFactory();</span><br><span class="line"></span><br><span class="line">        DynamicProxy dp=<span class="keyword">new</span> DynamicProxy();</span><br><span class="line">        PhoneFactory phoneproxy=(PhoneFactory) dp.getProxy(pf); <span class="comment">// 在 target 属性内存中写入 pf</span></span><br><span class="line">        LapTopFactory laptopfactory=(LapTopFactory) dp.getProxy(lf); <span class="comment">// 在 target 属性内存中 覆盖 pf 写入 lf</span></span><br><span class="line">        phoneproxy.GetPhone(); <span class="comment">// 此时 dp 实例中 target 属性的内存中的实例为 lf，但 lf 为 LapTopFactory 没有 GEtPhone() 方法。</span></span><br><span class="line">        <span class="comment">// 就会抛出 object is not an instance of declaring class 这样的错误，毕竟 lf 的确不是 PhoneFactory 的实例，没有 GetPhone() 方法。</span></span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        laptopfactory.GetLapTop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>装饰器模式故名思意，是对一个类进行装饰（增加小功能）。而装饰有一个特点，那就是装饰完一个物品之后，得到的结果还是该物品，可以像原来一样使用。</p><p>装饰器模式在 Java IO 的 FilterInputStream 和 FileterOutPutStream 中有使用过。请先阅读下面博文了解： <a href="https://xorex.space/2021/02/21/6b113700fd3d/#Filter-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">Filter 模式</a></p><p>以 FilterInputStream 为例，这个装饰器父类是 InputStream 的子类，也就是说，对于每一种具体的不同装饰子类，也同样是 InputSream 的子类。而在父类 FilterInputSream 中，有一个叫 in 的属性类型为 InputStream，就是专门用来保存被装饰物。</p><p>然后重写 InputSream 留下的 read() 方法，重写主要是添加一些装饰的功能，比如对输入进来的数据进行 base64 解码。那么就可以用被装饰物 InputStream 本来的 read() 方法先读入数据，然后手写 base64 解码代码，最后输出到 byte[] 数组中。</p><p>装饰类像是将被装饰类包裹起来（被装饰类作为装饰类内部的一个实例），从而完成对原有功能的完善。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ol><li>抽象构件 (InputSream) 角色：定义一个抽象接口以规范准备接收附加功能的对象。</li><li>具体构件 (FileInputSream extends InputSream)角色：实现抽象构件，通过装饰角色为其添加一些功能。</li><li>抽象装饰 (FilterInputSream extends InputStream) 角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰 (Base64InputStream extends FilterInputSream) 角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的功能。</li></ol><h3 id="UML-图-2"><a href="#UML-图-2" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/195.jpg"></p><h3 id="装饰器、桥接之间的异同"><a href="#装饰器、桥接之间的异同" class="headerlink" title="装饰器、桥接之间的异同"></a>装饰器、桥接之间的异同</h3><p>到了这里应该能很清楚的明白和桥接模式之间的异同点了。</p><p>相同点：</p><ol><li>两者都是为了解决因为多个元素排列组合导致的子类爆炸的问题。</li><li>两者解决方法都是通过一个维度持有另外一个维度的实例，来实现功能的组合的。</li></ol><p>不同点：</p><ol><li>桥接模式的实现是高等级类持有低等级类的实例，来实现低等级功能附加到高等级身上。</li><li>装饰器模式是低等级装饰者持有高等级被装饰者，装饰者加上内部的被装饰者作为一个整体又是一个被装饰者，就像月饼包装一样，一层套一层，是包装包含月饼。</li></ol><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>除了 Java 的 IO 实现了装饰器模式，我们自己也可以自己实现装饰器模式，就拿饼来举个例子，我们有很多饼，河南鸡蛋灌饼，山东杂粮煎饼等等。同时可以给这些并加很多配料（装饰），如辣条，鸡蛋，香肠，等等。我们就可以用修饰器模式解决这些组合的问题。</p><p>首先写我们想要装饰的东西，饼：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Pancake</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makePancake</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getPancake</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HenanPancake</span> <span class="keyword">implements</span> <span class="title">Pancake</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始制作鸡蛋灌饼&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;煎好白面饼了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加鸡蛋&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加生菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在打包鸡蛋灌饼&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请拿走鸡蛋灌饼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShanDongPancake</span> <span class="keyword">implements</span> <span class="title">Pancake</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始制作杂粮煎饼&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;煎好杂粮饼了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加鸡蛋&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加生菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在打包杂粮煎饼&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请拿走杂粮煎饼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写装饰饼的各种配料类：<br>写一个父类的原因除了复用代码以外，还有封装 Pancake，只暴漏指定的方法给装饰器使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Things</span> <span class="keyword">implements</span> <span class="title">Pancake</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pancake pancake;</span><br><span class="line"></span><br><span class="line">    Things(Pancake pancake) &#123;</span><br><span class="line">        <span class="keyword">this</span>.pancake=pancake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pancake.makePancake();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pancake.addThings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pancake.getPancake();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span> <span class="keyword">extends</span> <span class="title">Things</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Egg(Pancake pancake) &#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addThings();</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加鸡蛋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Suasage</span> <span class="keyword">extends</span> <span class="title">Things</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Suasage(Pancake pancake) &#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addThings();</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加香肠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spicy</span> <span class="keyword">extends</span> <span class="title">Things</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Spicy(Pancake pancake) &#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addThings();</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加辣条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后消费者就可以随便添加想要的配料了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两个蛋，一包辣条，一根香肠的河南鸡蛋灌饼</span></span><br><span class="line">        Pancake Henan=<span class="keyword">new</span> HenanPancake();</span><br><span class="line">        Pancake eggHenan=<span class="keyword">new</span> Egg(Henan);</span><br><span class="line">        Pancake spicyEggHenan=<span class="keyword">new</span> Spicy(eggHenan);</span><br><span class="line">        Pancake suasageSpicyEggHenan=<span class="keyword">new</span> Suasage(spicyEggHenan);</span><br><span class="line">        suasageSpicyEggHenan.makePancake();</span><br><span class="line">        suasageSpicyEggHenan.addThings();</span><br><span class="line">        suasageSpicyEggHenan.getPancake();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 两包辣条，一根肠的山东杂粮煎饼</span></span><br><span class="line">        Pancake Shandong=<span class="keyword">new</span> Spicy(<span class="keyword">new</span> Spicy(<span class="keyword">new</span> Suasage(<span class="keyword">new</span> ShanDongPancake())));</span><br><span class="line">        Shandong.makePancake();</span><br><span class="line">        Shandong.addThings();</span><br><span class="line">        Shandong.getPancake();</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">开始制作鸡蛋灌饼</span><br><span class="line">煎好白面饼了</span><br><span class="line">正在添加鸡蛋</span><br><span class="line">正在添加生菜</span><br><span class="line">正在添加鸡蛋</span><br><span class="line">正在添加辣条</span><br><span class="line">正在添加香肠</span><br><span class="line">正在打包鸡蛋灌饼</span><br><span class="line">请拿走鸡蛋灌饼</span><br><span class="line"></span><br><span class="line">开始制作杂粮煎饼</span><br><span class="line">煎好杂粮饼了</span><br><span class="line">正在添加鸡蛋</span><br><span class="line">正在添加生菜</span><br><span class="line">正在添加香肠</span><br><span class="line">正在添加辣条</span><br><span class="line">正在添加辣条</span><br><span class="line">正在打包杂粮煎饼</span><br><span class="line">请拿走杂粮煎饼</span><br></pre></td></tr></table></figure><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>外观模式其实就是将操作者和被操作对象之间，增加一个中间类，作为被操作对象的外观，来方便操作者调用。</p><p>生活中最明显的例子就是小爱捷径，对于拥有上百个智能家居的人来说，对于一个情景的控制就会很麻烦，比如一起床就需要控制拉开窗帘、打开灯、打开电饭煲热粥、打开热水器准备洗澡、略微提高空调的温度，查询今天的天气，打开语音播报的功能。</p><p>对于这种一个行为需要和大量类进行交互的情况，为了简化代码，可以将这些大量类的多个交互简化成一个交互。getUp() 一个方法帮我们完成这些复杂的类交互。对于调用者只需要调用这一个方法，就能完成所有的事情。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p><ol><li>就是大大简化了代码，简化了可以统一封装的大量类交互，隐藏了细节。</li><li>降低了耦合度，符合最小认知原则。</li></ol><p>缺点：</p><ol><li>一旦新增加操作就需要增加外观类的方法，不符合开闭原则。</li><li>因为外观类的引入增加了项目的复杂度。</li></ol><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>享元模式其实就对象实例的缓存机制，对于一些可以重复利用的实例，我们可以将其加入到对应生成工厂的缓存里面，来提高重复利用程度。</p><p>对于比较简单的一些享元，比如 String，Byte 这些所有内容都不会变的，那么就直接去缓存查找，是否有已经存在的实例，如果有，那么直接返回，如果没有，创建一个新的实例并添加到缓存中。比如 String 对于一个字符串的不同引用来说，都会指向一个内存地址，这就是因为缓存返回的都是同一个一样的对象。而 Byte 也同样是，使用静态方法获取实例的时候，内部就使用了缓存，来共享相同的已存在实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Byte <span class="title">valueOf</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">return</span> ByteCache.cache[(<span class="keyword">int</span>)b + offset];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对于一些比较复杂的享元，那就是一部分可以共享，而有一些实际操作是不一样的。比如线程池里面的线程实例是可以共享的，但是运行时候需要的 Runnable 实例是非共享的（自定义的运行内容），JDBC 连接池里面和数据库保持连接的 Connection 是可以共享的（数据库地址，账号，密码不变），而执行的 Statement 是不可以共享的。</p><p>所以你可以发现，写 Java 的程序员就很好的意识到了这些，特意的将可以资源消耗大，但是需要频繁使用的实例拆分开来，拆分为可共享部分和不可共享部分。可共享部分利用线程池、连接池来进行重复利用的资源优化，不可共享部分则（Runnable，Statement）通过外部构建并传入，或者传入参数内部构建，来组合成完整的功能。</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们来写一个简单的享元模式的图书馆吧，而图书馆里面的图书就是可以共享的资源：</p><p>图书实例（其实不嫌麻烦可以写成接口，然后搞不同种类的书，如杂志、小说、漫画等等，不过这样的话就需要为 Book 单独建立一个生成工厂了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Book(String name) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;购买图书：&quot;</span>+name);</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Look</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在阅读：&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用来管理图书实例的图书馆：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,List&lt;Book&gt;&gt; books=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Book book;</span><br><span class="line">        <span class="keyword">if</span>(books.containsKey(name)) &#123;</span><br><span class="line">            List&lt;Book&gt; Lbook=books.get(name);</span><br><span class="line">            <span class="keyword">if</span>(Lbook.isEmpty()) &#123;</span><br><span class="line">                book=<span class="keyword">new</span> Book(name);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                book=Lbook.get(<span class="number">0</span>);</span><br><span class="line">                Lbook.remove(book);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            books.put(name,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            book=<span class="keyword">new</span> Book(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;借阅图书：&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;归还图书：&quot;</span>+book.getName());</span><br><span class="line">        books.get(book.getName()).add(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读者开始借书读书：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Library lib=<span class="keyword">new</span> Library();</span><br><span class="line"></span><br><span class="line">        Book book1=lib.getBook(<span class="string">&quot;CSAPP&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;图书编号：&quot;</span>+book1);</span><br><span class="line">        book1.Look();</span><br><span class="line">        lib.backBook(book1);</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Book book2=lib.getBook(<span class="string">&quot;CSAPP&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;图书编号：&quot;</span>+book2);</span><br><span class="line">        book2.Look();</span><br><span class="line">        lib.backBook(book2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后借阅结果，发现两次借阅获得的书是同一本（同一个内存地址中的实例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">购买图书：CSAPP</span><br><span class="line">借阅图书：CSAPP</span><br><span class="line">图书编号：Java.VScodeProject.Book@1fe20588</span><br><span class="line">正在阅读：CSAPP</span><br><span class="line">归还图书：CSAPP</span><br><span class="line"></span><br><span class="line">借阅图书：CSAPP</span><br><span class="line">图书编号：Java.VScodeProject.Book@1fe20588</span><br><span class="line">正在阅读：CSAPP</span><br><span class="line">归还图书：CSAPP</span><br></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>组合模式（又叫整体-部分模式）：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p><p>举个例子，比如文件夹和文件的关系，文件夹就是由子文件夹和文件构成的，文件夹和文件组合在一起变成整体，文件夹和文件都可以作为部分，而且之间可以组成树形的结构模型。</p><p><img src="https://xorex.space/image/178.jpg"></p><p>而组合模式的核心就是将这些相似的东西：文件和文件夹当作一个东西处理，它们都是 File 类的实例，里面同时包含了各自的方法，使用的时候需要鉴别方法是否对当前对象可以使用。</p><p>比如一个文件的 File 类，使用 listFile() 返回的就是 null 空引用，所以缺点就是不太安全，但是优点就是方便操作，管他是文件还是文件夹，都是 File 的实例。</p><h3 id="UML-图-3"><a href="#UML-图-3" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/196.jpg"></p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>定义统一的一个接口，接口包含所有整体和部分的方法。然后整体类和部分类分别实现接口的代码，要求整体类的构造方法可以或者 add() 方法可以传入类型为接口类型（这样整体类对象和部分类对象都可以作为它的一部分）</p><p>比如文件夹系统，分为文件夹类（整体类）和文件类（部分类），一起实现同一个接口 File，这个接口定义里文件操作和文件夹操作的所有方法。而构造文件夹类的实例的时候，可以传入文件夹实例和文件实例，作为当前文件夹的内部部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">具体代码就不写了，参考 Java 里面的 File 类就行了。</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote><p>哇哇哇，结构型模式笔记终于写完了，写到了后面连思维导图都不想搞了，主要是拖得时间太长了，里面内容也很多，而且思维导图对于这种类型的知识点来说没啥用。但是想想看自己学的时间还是太长了，所以要不停的提高学习效率啊！不然后端开发的知识点这么多，这样学下去怕不是得学到毕业……</p></blockquote><p>呼~ 长呼一口气，准备开始行为型模式的学习吧，加油啊！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;&lt;h3 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="结构型" scheme="https://xorex.space/tags/%E7%BB%93%E6%9E%84%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>创建型模式笔记</title>
    <link href="https://xorex.space/2021/03/09/d965ea17830f/"/>
    <id>https://xorex.space/2021/03/09/d965ea17830f/</id>
    <published>2021-03-09T11:49:46.000Z</published>
    <updated>2021-03-23T09:21:26.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>创建型模式的核心就是通过将创建对象和使用对象分离开来，去关注于怎样去创建一个对象。</p></blockquote><h2 id="单列模式"><a href="#单列模式" class="headerlink" title="单列模式"></a>单列模式</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/8cxt5R" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/187.jpg"></p><h3 id="懒汉式单列实现代码"><a href="#懒汉式单列实现代码" class="headerlink" title="懒汉式单列实现代码"></a>懒汉式单列实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyXorex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazyXorex instance=<span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// instance 一定要通过 volatile 即使写入内存中！</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyXorex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法也要被锁住，方式多创建了实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazyXorex <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">            instance=<span class="keyword">new</span> LazyXorex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式单列实现代码"><a href="#饿汉式单列实现代码" class="headerlink" title="饿汉式单列实现代码"></a>饿汉式单列实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HungryXorex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungryXorex instance=<span class="keyword">new</span> HungryXorex();</span><br><span class="line">    <span class="comment">// 在类被加载到内存的时候 instance 就拥有了实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungryXorex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungryXorex <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/TkqvpR" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-1"><a href="#UML-图-1" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/188.jpg"></p><h3 id="实现可克隆类"><a href="#实现可克隆类" class="headerlink" title="实现可克隆类"></a>实现可克隆类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tempest</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String Xorex=<span class="string">&quot;Xorex&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Tempest <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Tempest)<span class="keyword">super</span>.clone(); <span class="comment">// 调用父类 Object 的 clone() 方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><h3 id="思维导图-2"><a href="#思维导图-2" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/krk9YR" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-2"><a href="#UML-图-2" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/189.jpg"></p><h3 id="实现内部封装的简单工厂"><a href="#实现内部封装的简单工厂" class="headerlink" title="实现内部封装的简单工厂"></a>实现内部封装的简单工厂</h3><blockquote><p>下面代码例子是使用简单工厂的方式获取不同的 Waifu 产品。步骤是通过相同的工厂 Factory 的静态方法 makeWaifu 来获取产品，waifu 产品的具体创建交给工厂的 makeWaifu 来决定。至于返回的是哪一个具体的 Waifu，我们并不需要关心，只需要用统一接口 Waifu 来接收并操作即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleWaifuFactory.Waifu Yukino=SimpleWaifuFactory.Factory.makeWaifu(SimpleWaifuFactory.Yukinoshita_Yukino);</span><br><span class="line">        SimpleWaifuFactory.Waifu Asuna=SimpleWaifuFactory.Factory.makeWaifu(SimpleWaifuFactory.Yuuki_Asuna);</span><br><span class="line">        Yukino.selfIntroduction();</span><br><span class="line">        Asuna.selfIntroduction();</span><br><span class="line">    &#125; <span class="comment">// 外部调用简单工厂来获取对应的实例，然后调用里面的方法。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个单独的 public 工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWaifuFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Yukinoshita_Yukino = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Yuuki_Asuna = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 定义工厂接收的参数标准</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span></span>;</span><br><span class="line">    &#125; <span class="comment">// 定义本工厂生产的产品的统一模板，让外部持有接口使用实例。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Yukino</span> <span class="keyword">implements</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Ya~hello,There is Yukinoshita Yukino!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// 产品 Yukino 实例定义类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Asuna</span> <span class="keyword">implements</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hi,I am Yuuki Asnua!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// 产品 Asuna 实例定义类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Waifu <span class="title">makeWaifu</span><span class="params">(<span class="keyword">int</span> waifuID)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (waifuID) &#123;</span><br><span class="line">                <span class="keyword">case</span> Yukinoshita_Yukino:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Yukino();</span><br><span class="line">                <span class="keyword">case</span> Yuuki_Asuna:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Asuna();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// 生成实例的工厂</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现外部散开工厂"><a href="#实现外部散开工厂" class="headerlink" title="实现外部散开工厂"></a>实现外部散开工厂</h3><p>这里代码需要注意，所有的工厂相关类都需要写在一个包里面，保证非 public 类型（不对外开放的）产品类只能被包内的工厂访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Waifu Yukino=SimpleWaifuFactory.makeWaifu(SimpleWaifuFactory.Yukinoshita_Yukino);</span><br><span class="line">        Waifu Asuna=SimpleWaifuFactory.makeWaifu(SimpleWaifuFactory.Yuuki_Asuna);</span><br><span class="line">        Yukino.selfIntroduction();</span><br><span class="line">        Asuna.selfIntroduction();</span><br><span class="line">    &#125; <span class="comment">// 外部调用简单工厂来获取对应的实例，然后调用里面的方法。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个单独的 public 工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWaifuFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Yukinoshita_Yukino = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Yuuki_Asuna = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 定义工厂接收的参数标</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Waifu <span class="title">makeWaifu</span><span class="params">(<span class="keyword">int</span> waifuID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (waifuID) &#123;</span><br><span class="line">            <span class="keyword">case</span> Yukinoshita_Yukino:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Yukino();</span><br><span class="line">            <span class="keyword">case</span> Yuuki_Asuna:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Asuna();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="comment">// 生成实例的工厂</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span></span>;</span><br><span class="line">&#125; <span class="comment">// 定义本工厂生产的产品的统一模板，让外部持有接口使用实例。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yukino</span> <span class="keyword">implements</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ya~hello,There is Yukinoshita Yukino!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 产品 Yukino 实例定义类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Asuna</span> <span class="keyword">implements</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hi,I am Yuuki Asnua!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 产品 Asuna 实例定义类</span></span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><h3 id="思维导图-3"><a href="#思维导图-3" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/CKNFh6" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-3"><a href="#UML-图-3" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/190.jpg"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>主要是从简单工厂模式的一个工厂对应不同产品到工厂模式的不同工厂对应不同产品，来实现开闭原则。一旦有产品增加，可以通过增加工厂的方式来实现需求，不需要像简单工厂那样去修改原有的工厂代码。但简单工厂的代码修改可以限制在增加生产方法上面，其实也很好维护。</p></blockquote><blockquote><p>下面的代码通过不同的电视工厂来获取不同的电视产品，比如通过小米电视工厂获取小米电视，华为电视工厂获取华为电视，比简单工厂模式多了一个工厂接口，因此可以建立不同的工厂满足种类繁多的产品的创建，一类工厂满足一类产品。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TVFactroy MiF=<span class="keyword">new</span> MiTVFactory();</span><br><span class="line">        TV MiTv=MiF.getTV();</span><br><span class="line">        MiTv.Show();</span><br><span class="line"></span><br><span class="line">        TVFactroy HuaweiF=<span class="keyword">new</span> HuaweiTVFactory();</span><br><span class="line">        TV HuaweiTv=HuaweiF.getTV();</span><br><span class="line">        HuaweiTv.Show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相较于简单工厂模式增加了一个工厂接口，通过扩展工厂类的方式代替修改工厂代码</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TVFactroy</span> </span>&#123;</span><br><span class="line">    <span class="function">TV <span class="title">getTV</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同的产品对应不同的工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiTVFactory</span> <span class="keyword">implements</span> <span class="title">TVFactroy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">getTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MiTV4s70();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiTVFactory</span> <span class="keyword">implements</span> <span class="title">TVFactroy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">getTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiTV65();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiTV4s70</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am MiTV4s70&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiTV65</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am HuaweiTV65&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="思维导图-4"><a href="#思维导图-4" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/BeTDYu" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-4"><a href="#UML-图-4" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/191.jpg"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>下面的代码通过建立小米族产品超级工厂和华为族产品超级工厂实现超级抽象工厂接口，这些超级工厂生产不同级产品。如通过抽象工厂接口 SuperFactory 操作小米工厂 MiFactory 的不同生产方法，如 getTV() 获取实现了抽象产品 TV 的实际产品 MiTV，用 getPhone() 获取实现了抽象产品 Phone 的实际产品 Mi11。不同工厂的同级产品，实现的抽象产品接口都是一样的。比如小米工厂生产的 Mi11 产品和华为工厂生产的 HUAWEIMate40Pro 产品同级，都是实现了抽象产品接口 Phone。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//展示消费者通过超级工厂获取产品的实例</span></span><br><span class="line">        System.out.println(<span class="string">&quot;I am a Mi-funs&quot;</span>);</span><br><span class="line">        SuperFactory Mi=<span class="keyword">new</span> MiFactory();</span><br><span class="line">        Phone MiPhone=Mi.getPhone();</span><br><span class="line">        TV MiTV=Mi.getTV();</span><br><span class="line">        MiPhone.call();</span><br><span class="line">        MiTV.watchTV();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;I am a HUAWEI-funs&quot;</span>);</span><br><span class="line">        SuperFactory HUAWEI=<span class="keyword">new</span> HUAWEIFactory();</span><br><span class="line">        Phone HUAWEIPhone=HUAWEI.getPhone();</span><br><span class="line">        TV HUAWEITV=HUAWEI.getTV();</span><br><span class="line">        HUAWEIPhone.call();</span><br><span class="line">        HUAWEITV.watchTV();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义超级工厂的同族不同级的产品生产</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SuperFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">getPhone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">TV <span class="title">getTV</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小米工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiFactory</span> <span class="keyword">implements</span> <span class="title">SuperFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Mi11();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">getTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MiTV4s65();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 华为工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HUAWEIFactory</span> <span class="keyword">implements</span> <span class="title">SuperFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HUAWEIMate40Pro();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">getTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HAUWEIX70();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义手机产品统一功能</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义电视产品统一功能</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">watchTV</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mi11</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am calling by Mi11&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HUAWEIMate40Pro</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am calling by HUAWEIMate40Pro&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiTV4s65</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am watching MiTV4s65&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HAUWEIX70</span> <span class="keyword">implements</span>  <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am watching HUAWEIX70!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h3 id="思维导图-5"><a href="#思维导图-5" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/trTwtE" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-5"><a href="#UML-图-5" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/image/192.jpg"></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>下面代码通过将一个复杂产品（手机）的建造交给不同的建造者（小米建造、华为建造）得到不同的产品（小米手机，华为手机），而选择建造者的指挥建造者的是手机生产的流水线（指挥者），选择小米建造者生产小米手机，同理获得华为手机。</p></blockquote><ul><li><p>消费者 Foxconn：告诉指挥者（流水线）ConstructStream 需要什么手机，然后等待流水线返回手机 Phone 的实例。</p></li><li><p>指挥者 ConstructStream：根据消费者的需求（传入的手机名称），选择合适的建造者（创建对应实例 MiBuilder HUAWEIBuilder），然后指挥建造者去做自己可以完成的每一道工序（installCPU()…），完成所有步骤之后，让建造者返回手机给自己（getPhone()）。</p></li><li><p>建造者 Builder：实现了建造手机的所有步骤，不同的建造者用于建造不同的手机，MiBuilder 只能完成 Mi11 的建造。</p></li><li><p>手机 Phone：单个产品，创建非常复杂，有很多初始化参数，所以交给流水线处理。</p></li></ul><p>建造者关心的是如何一步一步建造 <strong>一个</strong> 比较复杂的产品（通过建造者完成大量步骤获取产品），而工厂方法关心的是以怎样的方式获取一类产品（比如通过超级工厂获取不同级产品）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.xorex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foxconn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 来富士康拿手机</span></span><br><span class="line">        ConstructStream ConMiPhone=<span class="keyword">new</span> ConstructStream(<span class="string">&quot;Mi11&quot;</span>);</span><br><span class="line">        Phone Mi=ConMiPhone.StartConstruct();</span><br><span class="line">        ConstructStream ConHUAWEIPhone=<span class="keyword">new</span> ConstructStream(<span class="string">&quot;HUAWEIMate40Pro&quot;</span>);</span><br><span class="line">        Phone HUAWEI=ConHUAWEIPhone.StartConstruct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指挥手机生产的流水线（指挥者 Director）,从这里获取手机实例</span></span><br><span class="line"><span class="comment">// 不需要关心如何指挥手机的具体建造者，让流水线（指挥者）管理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstructStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String PhoneName;</span><br><span class="line">    <span class="keyword">private</span> Builder worker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstructStream</span><span class="params">(String phoneName)</span> </span>&#123;</span><br><span class="line">        PhoneName = phoneName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">StartConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(PhoneName==<span class="string">&quot;Mi11&quot;</span>) worker=<span class="keyword">new</span> MiBuilder(PhoneName);</span><br><span class="line">        <span class="keyword">if</span>(PhoneName==<span class="string">&quot;HUAWEIMate40Pro&quot;</span>) worker=<span class="keyword">new</span> HUAWEIBuilder(PhoneName);</span><br><span class="line"></span><br><span class="line">        worker.installCPU();</span><br><span class="line">        worker.installGPU();</span><br><span class="line">        worker.installRAM();</span><br><span class="line">        worker.installROM();</span><br><span class="line">        worker.installScreen();</span><br><span class="line">        worker.installBattery();</span><br><span class="line">        worker.installCamera();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> worker.getPhone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象建造者，定义建造者需要执行的步骤</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installCPU</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installGPU</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installRAM</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installROM</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installScreen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installBattery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installCamera</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Phone <span class="title">getPhone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现的具体建造者，不同建造者获取的产品不同</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Phone phone=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    MiBuilder(String PhoneName) &#123;</span><br><span class="line">        phone=<span class="keyword">new</span> Phone(PhoneName);</span><br><span class="line">        System.out.println(PhoneName+<span class="string">&quot; start making!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installCPU(<span class="string">&quot;SnapDragon 888&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Installed CPU : SnapDragon 888&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installGPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installGPU(<span class="string">&quot;Adreno 660&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install GPU : Adreno 660&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installRAM(<span class="string">&quot;LPDDR5&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install RAM : LPDDR5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installROM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installROM(<span class="string">&quot;UFS 3.1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install ROM : UFS 3.1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installScreen(<span class="string">&quot;OLED2k120HZ&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Screen : OLED2k120HZ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installBattery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installBettary(<span class="string">&quot;4600mah&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Battery : 4600mah&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installCarame(<span class="string">&quot;HMX&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Camera : HMX&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mi11 made Successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现的具体建造者，不同建造者获取的产品不同</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HUAWEIBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Phone phone=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    HUAWEIBuilder(String PhoneName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = <span class="keyword">new</span> Phone(PhoneName);</span><br><span class="line">        System.out.println(PhoneName+<span class="string">&quot; start making!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installCPU(<span class="string">&quot;Kirin9000&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install CPU Kirin9000&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installGPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installGPU(<span class="string">&quot;Mali-G78&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install GPU : Mali-G78&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installRAM(<span class="string">&quot;LPDDR5&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install RAM : LPDDR5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installROM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installROM(<span class="string">&quot;UFS3.1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install ROM : UFS3.1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installScreen(<span class="string">&quot;OLED1080P90HZ&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Screen : OLED1080P90HZ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installBattery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installBettary(<span class="string">&quot;4400mah&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Battery : 4400mah&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installCarame(<span class="string">&quot;IMX700&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Camera : IMX700&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HUAWEIMate40Pro made Successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要获取的产品实例（流水线指挥不同的建造者生产不同的手机）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String Name=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String CPU=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String GPU=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String RAM=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String ROM=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String Screen=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String Bettary=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String Carame=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCPU</span><span class="params">(String CPU)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.CPU = CPU;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installGPU</span><span class="params">(String GPU)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.GPU = GPU;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installRAM</span><span class="params">(String RAM)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.RAM = RAM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installROM</span><span class="params">(String ROM)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ROM = ROM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installScreen</span><span class="params">(String screen)</span> </span>&#123;</span><br><span class="line">        Screen = screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installBettary</span><span class="params">(String bettary)</span> </span>&#123;</span><br><span class="line">        Bettary = bettary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCarame</span><span class="params">(String carame)</span> </span>&#123;</span><br><span class="line">        Carame = carame;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;创建型模式的核心就是通过将创建对象和使用对象分离开来，去关注于怎样去创建一个对象。&lt;/p&gt;
&lt;/blockquot</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="创建型" scheme="https://xorex.space/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>笔记计划 2.0</title>
    <link href="https://xorex.space/2021/03/09/f0796de4869b/"/>
    <id>https://xorex.space/2021/03/09/f0796de4869b/</id>
    <published>2021-03-09T11:45:19.000Z</published>
    <updated>2021-03-29T13:54:56.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于笔记记录的一点思考"><a href="#关于笔记记录的一点思考" class="headerlink" title="关于笔记记录的一点思考"></a>关于笔记记录的一点思考</h2><p>今天在记录创建型模式的时候发现这种需要大段文字描述的知识点并不适合使用思维导图，所以后面讲解设计模式具体的案例的时候，会重新回归笔记的方式，emmmm，或者说是，笔记+思维导图。</p><p>自己以前好像一直在滥用思维导图，现在想想思维导图应该是为了帮助自己更加清晰的梳理关系，归纳知识点，而不是一味的将所有的学习内容都用思维导图罗列表示出来。</p><p>所以应该两者一起使用，并再多学习一些 XMind 的模板，主要将思维导图作为关系展示图。而对于详细某些知识点的理解，应该还是要用文字和代码一起说明。</p><p>新的笔记应该聚焦于一些核心知识点的记录，而不是用来引导萌新的新手教程，尽可能写的简练而又全面。笔记的目的是为了自己以后遗忘了某块知识，需要查阅的时候，可以快速定位并快速提取出来需要的信息。</p><p>目前的打算是，对于一个全新的知识点，首先有一个概览笔记，主要是梳理所有内容的联系和一些基本名词的解释，然后再用若干篇小文章来分别阐述不同的具体知识。而对于一些类的方法的列出，或者命令的集合，还是使用思维导图比较合适归纳。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于笔记记录的一点思考&quot;&gt;&lt;a href=&quot;#关于笔记记录的一点思考&quot; class=&quot;headerlink&quot; title=&quot;关于笔记记录的一点思考&quot;&gt;&lt;/a&gt;关于笔记记录的一点思考&lt;/h2&gt;&lt;p&gt;今天在记录创建型模式的时候发现这种需要大段文字描述的知识点并不适合使</summary>
      
    
    
    
    <category term="阶段性总结" scheme="https://xorex.space/categories/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="笔记" scheme="https://xorex.space/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="规划" scheme="https://xorex.space/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>设计模式原则思维导图</title>
    <link href="https://xorex.space/2021/03/09/ebff1b4e77e7/"/>
    <id>https://xorex.space/2021/03/09/ebff1b4e77e7/</id>
    <published>2021-03-09T11:44:41.000Z</published>
    <updated>2021-03-11T08:49:45.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h2><p>一句话概括：</p><table><thead><tr><th>设计原则</th><th>一句话归纳</th><th>目的</th></tr></thead><tbody><tr><td>开闭原则</td><td>对扩展开放，对修改关闭</td><td>降低维护带来的新风险</td></tr><tr><td>依赖倒置原则</td><td>高层不应该依赖低层，要面向接口编程</td><td>更利于代码结构的升级扩展</td></tr><tr><td>单一职责原则</td><td>一个类只干一件事，实现类要单一</td><td>便于理解，提高代码的可读性</td></tr><tr><td>接口隔离原则</td><td>一个接口只干一件事，接口要精简单一</td><td>功能解耦，高聚合、低耦合</td></tr><tr><td>迪米特法则(最小认知原则)</td><td>不该知道的不要知道，一个类应该保持对其它对象最少的了解，降低耦合度</td><td>只和朋友交流，不和陌生人说话，减少代码臃肿</td></tr><tr><td>里氏替换原则</td><td>不要破坏继承体系，子类重写方法功能发生改变，不应该影响父类方法的含义</td><td>防止继承泛滥</td></tr><tr><td>合成复用原则</td><td>尽量使用组合或者聚合关系实现代码复用，少使用继承</td><td>降低代码耦合</td></tr></tbody></table><iframe src="https://www.xmind.net/embed/73pZXu" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式原则&quot;&gt;&lt;a href=&quot;#设计模式原则&quot; class=&quot;headerlink&quot; title=&quot;设计模式原则&quot;&gt;&lt;/a&gt;设计模式原则&lt;/h2&gt;&lt;p&gt;一句话概括：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设计原则&lt;/th&gt;
&lt;th&gt;一句话归</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>中文编码与开发</title>
    <link href="https://xorex.space/2021/03/07/b688fb992b28/"/>
    <id>https://xorex.space/2021/03/07/b688fb992b28/</id>
    <published>2021-03-07T09:42:27.000Z</published>
    <updated>2021-03-08T12:59:51.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>其实原本是想写一个 Java 脚本来帮我处理下载视频的名字更改，但是因为编码的问题让我非常生气，Windows 文件用 GBK 编码，再加上和 char 的 Unicode、String 的 byte[] 以及输入法输入的编码问题，直接把我搞蒙了，String 自带的一些方法用的云里雾里，能否正确全看玄学。为了能够一劳永逸的解决中文编码问题，于是此文就这样诞生了。</p></blockquote><h2 id="编码发展历史"><a href="#编码发展历史" class="headerlink" title="编码发展历史"></a>编码发展历史</h2><h3 id="ASCII-编码时代"><a href="#ASCII-编码时代" class="headerlink" title="ASCII 编码时代"></a>ASCII 编码时代</h3><p>最开始的开始，因为计算机发明在美国，所以计算机的字符是使用 ASCII 作为编码方式的，这让英语系国家们用的很开心，只需要 1 个字节就可以轻松的表示自己所有的字符，只占用 0-127，其中有 33 个控制字符，94 个可显字符。</p><p>后来，为了加入一些其他必要的符号，比如带重音的字母（法国人狂喜），希腊字母（希腊人狂喜），特殊的拉丁符号（罗马人狂喜），特殊的计算符号（科学家狂喜）等等等等。欧洲的发达国家开始打 ASCII 没有使用到的 128-255 这个区间的主意，出现了一堆各种各样的 EASCII 编码方式，即拓展 ASCII，用的比较多的有两个：OEM EASCII 和 ANSI EASCII 。</p><p>虽说扩展了整整一倍，但是因为所能表示的字符还是太少了，其他国家并不乐意，所以 EASCII 就很快的退出历史舞台，现在搜索 ASCII 一般搜索的都是 0-127 的初始版本。</p><h3 id="ANSI-编码时代"><a href="#ANSI-编码时代" class="headerlink" title="ANSI 编码时代"></a>ANSI 编码时代</h3><p>而非英语国家的人们为了使用计算机，也纷纷开始开发自己本国的文字编码方式，在 ANSI (American National Standards Institute) 的牵头下，各国的文字编码方式被 ANSI 承认之后，会作为该国文字的国际标准编码，叫作 ANSI 编码。 ANSI 编码是一种基于 ASCII 的变长编码，而且是固定的两个字节大小，前 128 个是 ASCII ，后面的是本国的文字。</p><p>虽然不同的国家都有了自己文字的编码方式也都快乐的用上了计算机，但各个文字的 ANSI 编码并不互通，导致了一种 ANSI 文字编码的文件里面不可以有其他国家的文字，否则就会乱码。</p><h4 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h4><p>中国显然也参与了这个过程中来，在 1980 年的时候，中国指定了汉字的 ANSI 编码：GB2312 即国标 2312 ，一共收录了 6763 个汉字，一级汉字 3755 个，二级汉字 3008 个，同时收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的 682 个字符。这个字符集基本上覆盖了中国大陆 99.75% 的使用频率（因为繁体中文不在里面）。而 GB2312 的编码方式如下：</p><ul><li><p>GB2312 将稀少的两个字节分为了区字节（0xB0-0xF7 87个区）和位字节（0xA1-0xFE 94个位），用一个区字节和一个位字节结合起来来表示一个汉字。</p></li><li><p>之所以从 0x80 128 和 0xA1 161 开始表示区字节和位字节，就是为了照顾 ASCII 字符可以被单个字节表示，只要检测到字符大小小于 128 ，那么这就是一个 ASCII 字符，读取一个字节即可。如果大于等于 128，那么就说明这是一个汉字，读取两个字节，并按照组合出来的编号显示汉字。</p></li></ul><h4 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h4><p>但是，可怜的 GB2312 当时设置的比较草率，还有很多的空间没有使用，再加上 6763 个汉字真的是太少了，于是在 1995 年的时候，又搞了一个汉字的 ANSI 编码，叫作 GBK 编码，国(G)标(B)扩展(K)。这个 GBK 编码覆盖了 21886 个字符，增加了额外的汉字，繁体字，日文假名等等（但是不支持朝鲜字），现在还是 Windows 默认的文字编码方式。</p><ul><li>GBK 完全兼容 GB2312。并将位字节从 0x00 开始表示汉字，因为只要区字节大于 128 即可确定后面跟着的就是位字节而不是 ASCII，然后很好的利用了 GB2312 没有分配的空间，成功的容纳了绝大部分日常使用汉字。</li></ul><h4 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h4><p>但是，两个字节的极限就是容纳 2^16 个字符，是不可能容纳所有的汉字的，所以后来又改良 GBK 出来了一个 GB18030 ，这玩意终于将整个汉字+少数民族文字全部都编到了一起。</p><ul><li>GB18030 之所以能把中国所有的文字都搞到一起，是因为它最大长度是四个字节，其中一个字节和两个字节和 GBK 基本兼容。四个字节扩充了 6k+ 的字符，完成了汉字的所有收录（注意 GB18030 是没有三个字节的情况的）。</li></ul><h3 id="Unicode-时代"><a href="#Unicode-时代" class="headerlink" title="Unicode 时代"></a>Unicode 时代</h3><p>虽说 ANSI 解决了非英语国家使用计算机的问题，但是对于网上传输其他国家的文字，因为使用 ANSI 编码不同，会导致无法解析，比如韩国电脑解析不出来 GBK 编码的文字，打开直接乱码。</p><p>随着计算机存储元器件价格的大幅度下降和全球互联网的快速发展，统一文字编码方式让不同文字的展现无障碍越来越重要。为了将所有的文字都制定一个标准之中，让所有人都能解析所有文字，Unicode 字符集就诞生了，立志于给所有文字都编上号。最初版本的 Unicode 只有两个字节，而分给 CJK 系列字符的只有两万个，导致只有最常用的 CJK 字符才能被编写到 Unicode 里面，后来经过一段曲折与斗争，Unicode 终于扩展字节，发展成为了真正的万国码。</p><ul><li><p>现在 Unicode 字符集的空间规划是按照空间平面的方式进行的，为 0-16 平面，每个平面占用两个字节，可以表示 2^16 个字符。其中最初版本的 Unicode 表示的字符为 0 号平面，被称为 BMP <code>Basic Multilingual Plane</code> 基本语言平面，表示范围为：U+0000 到 U+FFFF，可以省略最前面的平面编号，占用两个字节。而剩下的字符都在辅助平面 SMP 上面，从 U+010000 一直到 U+10FFFF，占用三个字节。</p></li><li><p>基本上 BMP 就覆盖了世界上大多数语言的绝大多数使用情景，但是要明白的是 SMP 的产生，对于 CJK 国家来说意义重大。这意味着在通用的语言字符集里面，东亚文化可以完整的保留下来，一个汉字的不同书写、演化方式，各种生僻字，这些都是绝对不允许被科技的发展而被忽略和抛弃的。</p></li></ul><p>需要注意的是，Unicode 并不是一种编码方式，而是一个字符集，它只会给字符一个独一无二的编号，而不会规定这个字符如何在计算机种存储。规定如何在计算机中存储的是编码方式，如比较早的 UTF-16 编码，它使用两个字节或者四个字节来编码字符，对于 BMP 平面上的字符，使用两个字节，对于 SMP 平面上的字符，使用四个字节。</p><ul><li>UTF-16 中，两个字节和四个字节读取区分很简单，首先都按照两个字节读取，如果读取结果在 BMP 上面有实际的字符，那么就断定这是一个 BMP 字符。如果没有实际的字符，即 U+D800 到 U+DBFF（此区间为空区间），那么就四个字节连在一起读取，判断为 SMP 平面字符。四个字节一共保存了 2^20 位有效信息，对应着 16 个 2^16 个 SMP 字符。</li></ul><p>Unicode 并没有在英语系国家快速发展开来，因为他们的大量内容都是使用 ASCII 来编码的，UTF-16 不但不兼容 ASCII，还要让他们白白的多使用一个字节的空间来存储一个字符，于是基于 Unicode 字符集的新编码方式： UTF-8 就诞生了。</p><p>UTF-8 的最大特性就是可变字符长度，对于 ASCII 的字符，编码方式和 ASCII 相同，都只占用一个字节的空间。非 ASCII 的字符也根据 Unicode 编码占用 2-4 个字符，这样就不但不需要改变原来使用 ASCII 编码的信息，还符合和其他文字一起用的标准，并且能节省大量的空间。由于这些优良的特性，使得 UTF-8 编码快速成为了互联网上最流行的文字编码形式。</p><ul><li>UTF-8 规定，对于 ASCII 的字符，占用一个字节，开头标识为 0，后面 7 位存储数据。对于非 ASCII 字符，占用几个字节，那么第一位字节开头就有几个 1，用 0 标识结束，后面跟着的字节开头设为 10。比如三字节的汉字：1110XXXX 10XXXXXX 10XXXXXX 。</li></ul><h2 id="Windows-编码"><a href="#Windows-编码" class="headerlink" title="Windows 编码"></a>Windows 编码</h2><p>因为计算机的内存中需要使用固定长度来保存字符，所以使用了 Unicode 字符集的 UTF-16 来编码存储数据，而对于内容的存储，则会将内存中的 UTF-16 转化为 GBK/UTF-8/GB18030 这些编码方式然后保存，使用 UTF-16 一是因为当时最新的 Unicode 标准就是 UTF-16 ，其次是当时 UTF-16 定长编码，无论是什么数字，都是两个字节，对于在内存中快速定位非常方便（当然现在随着 Unicode 的扩充，UTF-16 还有四个字节的），使用 GBK/UTF-8/GB18030 存储是为了节省存储空间和方便网上传输。</p><p>在 Windows 里面，打开文档的时候，会将硬盘里面用 GBK/UTF-8/GB18030 存储的数据转化为 UTF-16 ，然后放进内存里。我们看到的东西其实都是存在于内存中的。互联网上的网页也是，返回请求的数据使用 UTF-8 编码，浏览器接收之后，会解码为 UTF-16 并放到内存中，然后才能展示给我们看。我们在复制显示的数据的时候，其实都是 UTF-16 编码，粘贴到文档里面的时候，也是将 UTF-16 编码转移到对应应用程序的内存区中，最后这个应用程序将数据保存到硬盘的时候，才会将内存的 UTF-16 数据转化为定义的保存编码格式。</p><p>所以根本不需要担心复制粘贴的可以看见的数据的编码问题，只要我们能看见（打开到了内存中），不是乱码，就全部都是正确的 UTF-16。我们唯一需要担心的是保存在硬盘里面的数据，因为不知道保存的时候是按照 GBK/UTF-8/GB18030 等等的哪种编码方式保存，所以打开的时候选择的解码方式，<strong>复制</strong>的时候也需要注意前后文件存储编码是否相同（因为直接复制文本，没有经过内存的 UTF-16 转化）。</p><h2 id="输入法原理"><a href="#输入法原理" class="headerlink" title="输入法原理"></a>输入法原理</h2><p>输入法作为一个应用程序，本质上还是向另外一个应用程序的内存中写入 UTF-16 编码，因为其他的应用程序用拿到的都是确定的 UTF-16 所以输入法输入时不需要担心编码问题的。</p><h2 id="Java-中的编码"><a href="#Java-中的编码" class="headerlink" title="Java 中的编码"></a>Java 中的编码</h2><p>在创造 Java 的时候，当时最流行的 Unicode 编码就是两个字节的 UTF-16，所以就给 Java 的 char 类型设置了两字节的空间，并使用 UTF-16 作为 char 类型的存储方式，所以 Char 只能标识 BMP 范围里面的字符。</p><p>对于 String 来说，同样是使用 UTF-16 作为编码方式，不过内部存储时使用 byte[] 而不是 char[]。这是因为以前使用 char[] 来实现 String 的时候，对于 SMP 的字符因为受 char 两个字节大小的制约而部分四字节编码无法显示，改为 byte[] 之后，就没有这个问题了，即使是四字节的 SMP 字符，一样可以很好的处理。</p><p>而<strong>最需要注意</strong>的是，String 保存的 UTF-16 格式的开头，会有一个 BOM byte-order mark 字节顺序标记，用一 0xff 和 0xfe 的顺序标识。0xfe 0xff 标识大端序（位数大的在左边，适合人阅读），反之标识小端序（位数小的在左边，适合计算机阅读）。我们平时处理获取的 UTF-16 编码一般来说是大端序，直接忽略最前面返回的 0xfe 和 0xff 两个字符即可。</p><p>而 JVM 打开 <code>.java</code> 文件进行编译运行的时候，会使用系统默认的编码方式打开文件，比如 Windows 存储中文到硬盘里面的默认编码方式就是 GBK，使用 Vscode 写的 UTF-8 编码的中文无法让 JVM 正确解码，就会出错。要么更改 VScode 保存编码为 GBK，要么编译加参数更改打开文件编码为 UTF-8。或者直接用 IDEA，保存打开方式都是 UTF-8，不存在编码问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;其实原本是想写一个 Java 脚本来帮我处理下载视频的名字更改，但是因为编码的问题让我非常生气，Windows 文</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="笔记" scheme="https://xorex.space/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="中文编码" scheme="https://xorex.space/tags/%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java 函数式编程</title>
    <link href="https://xorex.space/2021/03/05/728260c40cfe/"/>
    <id>https://xorex.space/2021/03/05/728260c40cfe/</id>
    <published>2021-03-05T08:01:05.000Z</published>
    <updated>2021-03-29T13:54:49.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><blockquote><p>搞了两天的函数式编程终于弄完了，也明白了这种设计方法和理念，下一步，Java 设计模式！</p></blockquote><iframe src="https://www.xmind.net/embed/bvBmma" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;搞了两天的函数式编程终于弄完了，也明白了这种设计方法和理念，下一步，Java 设计模式！&lt;</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="函数式" scheme="https://xorex.space/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JDBC 思维导图</title>
    <link href="https://xorex.space/2021/03/02/9a53fb3643d5/"/>
    <id>https://xorex.space/2021/03/02/9a53fb3643d5/</id>
    <published>2021-03-02T14:43:19.000Z</published>
    <updated>2021-03-29T13:54:38.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC-思维导图"><a href="#JDBC-思维导图" class="headerlink" title="JDBC 思维导图"></a>JDBC 思维导图</h2><blockquote><p>在 JAVA 中，如何用代码和数据库进行交互呢？JDBC 告诉你答案！</p></blockquote><iframe src="https://www.xmind.net/embed/y3kVuZ" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDBC-思维导图&quot;&gt;&lt;a href=&quot;#JDBC-思维导图&quot; class=&quot;headerlink&quot; title=&quot;JDBC 思维导图&quot;&gt;&lt;/a&gt;JDBC 思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在 JAVA 中，如何用代码和数据库进行交互呢？JDBC </summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="SQL" scheme="https://xorex.space/tags/SQL/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="JDBC" scheme="https://xorex.space/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>SQL 基本语句思维导图</title>
    <link href="https://xorex.space/2021/03/02/726651d44320/"/>
    <id>https://xorex.space/2021/03/02/726651d44320/</id>
    <published>2021-03-02T14:40:32.000Z</published>
    <updated>2021-03-29T13:57:06.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL-基本语句思维导图"><a href="#SQL-基本语句思维导图" class="headerlink" title="SQL 基本语句思维导图"></a>SQL 基本语句思维导图</h2><blockquote><p>其实暑假学习安全的时候，就学过一部分 SQL 的相关语句，但是都忘了，好在有了前面的基础，很快就复习好了，并且完成了这个思维导图，感觉更清晰了一点。</p></blockquote><iframe src="https://www.xmind.net/embed/wB36P6" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SQL-基本语句思维导图&quot;&gt;&lt;a href=&quot;#SQL-基本语句思维导图&quot; class=&quot;headerlink&quot; title=&quot;SQL 基本语句思维导图&quot;&gt;&lt;/a&gt;SQL 基本语句思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;其实暑假学习安全的时候，就学过一部</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="SQL" scheme="https://xorex.space/tags/SQL/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 数据库概念思维导图</title>
    <link href="https://xorex.space/2021/03/02/8adb5d7ef601/"/>
    <id>https://xorex.space/2021/03/02/8adb5d7ef601/</id>
    <published>2021-03-02T14:36:52.000Z</published>
    <updated>2021-03-29T13:54:30.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-数据库概念思维导图"><a href="#MySQL-数据库概念思维导图" class="headerlink" title="MySQL 数据库概念思维导图"></a>MySQL 数据库概念思维导图</h2><blockquote><p>还是要了解一下什么是数据库才好啊！！！</p></blockquote><iframe src="https://www.xmind.net/embed/eZ6P3x" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MySQL-数据库概念思维导图&quot;&gt;&lt;a href=&quot;#MySQL-数据库概念思维导图&quot; class=&quot;headerlink&quot; title=&quot;MySQL 数据库概念思维导图&quot;&gt;&lt;/a&gt;MySQL 数据库概念思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;还是要了解</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="SQL" scheme="https://xorex.space/tags/SQL/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="MySQL" scheme="https://xorex.space/tags/MySQL/"/>
    
  </entry>
  
</feed>
