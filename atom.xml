<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xorex</title>
  
  <subtitle>要成为世界上最幸福的人啊！</subtitle>
  <link href="https://xorex.space/atom.xml" rel="self"/>
  
  <link href="https://xorex.space/"/>
  <updated>2021-03-22T13:14:03.731Z</updated>
  <id>https://xorex.space/</id>
  
  <author>
    <name>Xorex</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS 学习笔记</title>
    <link href="https://xorex.space/2021/03/21/d2e131b68164/"/>
    <id>https://xorex.space/2021/03/21/d2e131b68164/</id>
    <published>2021-03-21T08:41:04.000Z</published>
    <updated>2021-03-22T13:14:03.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS 的基本结构：</p><p><img src="https://xorex.space/image/199.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;p&gt;CSS 的基本结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://xorex.space/image/199.jpg&quot;&gt;&lt;/p</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Web" scheme="https://xorex.space/tags/Web/"/>
    
    <category term="CSS" scheme="https://xorex.space/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML学习笔记</title>
    <link href="https://xorex.space/2021/03/19/84e6977d90f9/"/>
    <id>https://xorex.space/2021/03/19/84e6977d90f9/</id>
    <published>2021-03-19T07:04:46.000Z</published>
    <updated>2021-03-21T09:03:36.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><p>HTML 网页的组成由 <code>&lt;html&gt;</code> 标签包围，里面有文件头和文件主体。文件头可以写网站的标题，以及一些元数据，这些在文件头的元数据一一般是服务器加到 http 协议文件头的东西，比如 set-cookie 设置 cookie，refresh 刷新页面并重定向网页地址。而 body 里面主要就是 网页文件主要显示的内容了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is the website title!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">set-cookie</span> <span class="attr">content</span>=<span class="string">&quot;Xorex is the best!&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">refresh</span> <span class="attr">content</span>=<span class="string">&quot;3;URL=https://xorex.space&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">auther</span> <span class="attr">content</span>=<span class="string">&quot;Xorex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        Just wait 3 seconds.</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;Welcome,after 3 seconds you will jump to my blog!&quot;</span>);</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以在 body 标签中定义里面的页面基本属性：</p><ul><li>backgroud= 背景图片文件名</li><li>bgcolor= 背景颜色</li><li>text= 文本默认颜色</li><li>link= 没有被访问的链接的原文字颜色</li><li>alink= 被激活的链接的原文字颜色 active link</li><li>vlink= 访问过的链接的原文字的颜色 visited link</li><li>topmargin= 信息内容顶边距离</li><li>leftmargin= 信息内容左边距离 margin 边距</li></ul><h3 id="bgsound-背景音乐"><a href="#bgsound-背景音乐" class="headerlink" title="bgsound 背景音乐"></a>bgsound 背景音乐</h3><p>内含属性  <code>src=音乐源文件 loop=循环次数（不指定无限循环）</code>  </p><h3 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h3><p>使用 <code>&lt;!-- 中间的是注释，两边的是注释标记，可以添加到任意位置 --&gt;</code></p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>有些没法直接输入的字符，可以使用对应的数字代码或者代码名称来替代，比如：</p><table><thead><tr><th>特殊字符</th><th>数字代码</th><th>代码名称</th></tr></thead><tbody><tr><td>&amp;</td><td><code>&amp;#38;</code></td><td><code>&amp;amp;</code> (amperstand)</td></tr><tr><td>&lt;</td><td><code>&amp;#60;</code></td><td><code>&amp;lt;</code> (Less than It)</td></tr><tr><td>&gt;</td><td><code>&amp;#62;</code></td><td><code>&amp;gt;</code>  (Great than It)</td></tr><tr><td>空格</td><td>&amp;<code>#160;</code></td><td><code>&amp;nbsp;</code> (No-Break Space)</td></tr><tr><td>“</td><td>&amp;#34</td><td><code>&amp;quot;</code>  (Quot)</td></tr><tr><td>©</td><td>版权</td><td><code>&amp;copy;</code></td></tr><tr><td>&reg;</td><td>注册商标</td><td><code>&amp;reg;</code></td></tr></tbody></table><h3 id="lt-base-gt-基准控制"><a href="#lt-base-gt-基准控制" class="headerlink" title="&lt;base&gt; 基准控制"></a>&lt;base&gt; 基准控制</h3><p>放在 &lt;head&gt; 里面，用来给一些东西作为基准，比如链接，可以设置 <code>&lt;base href=&quot;https://Xorex.space&quot; target=_blank &gt;</code> 这样以后写超链接的时候，就不需要写 target ，并且 href 只需要写 域名后面的地址即可，比如 <code>href=index.html</code></p><h3 id="lt-iframe-gt-内联框架"><a href="#lt-iframe-gt-内联框架" class="headerlink" title="&lt;iframe&gt; 内联框架"></a>&lt;iframe&gt; 内联框架</h3><p>用来实现漂浮的窗口，拥有属性：</p><ul><li>src 框架的 html 代码地址</li></ul><h2 id="文本控制"><a href="#文本控制" class="headerlink" title="文本控制"></a>文本控制</h2><h3 id="字体控制标识符"><a href="#字体控制标识符" class="headerlink" title="字体控制标识符"></a>字体控制标识符</h3><p>添加到 <code>&lt;font size=XXX color=XXX face=XXX &gt;This is the words!&lt;/font&gt;</code></p><ul><li>size 字号从 1-7 字号越大字体越大</li><li>color 使用 html 指定颜色名称或者颜色的十六进制值比如 <code>#FFFFFF</code> 一共是六位十六进制符号</li><li>face 为字体，英文字体有 Times New Roman 中文字体有 宋体/楷体 等等。</li></ul><h3 id="物理字符样式"><a href="#物理字符样式" class="headerlink" title="物理字符样式"></a>物理字符样式</h3><p>比如下面的 b 为粗体（Bring Attention To），big 为变大，small 为变小，i 表示斜体文字（italic），tt 等宽字体（打印机字体 teletype text），u 下划线 （underlined），s 删除线 （strikethrough），strike 同样是删除线 ，sup 上标记（superscript ），sub 下标记（subscript），em 强调（emphasis），del 删除（delete），ins 插入（insert）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">B</span>&gt;</span>此处为粗体显示文本<span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">BIG</span>&gt;</span>此处为大字体文本<span class="tag">&lt;/<span class="name">BIG</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">SMALL</span>&gt;</span>此处为小字体文本<span class="tag">&lt;/<span class="name">SMALL</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">I</span>&gt;</span>此处为斜体文本<span class="tag">&lt;/<span class="name">I</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">TT</span>&gt;</span>此处为等宽字体文本<span class="tag">&lt;/<span class="name">TT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span>此处为下划线文本<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">S</span>&gt;</span>此处为使用<span class="symbol">&amp;lt;</span>S<span class="symbol">&amp;gt;</span>标记设置的删除线文本<span class="tag">&lt;/<span class="name">S</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">STRIKE</span>&gt;</span>此处为使用<span class="symbol">&amp;lt;</span>STRIKE<span class="symbol">&amp;gt;</span>标记设置的删除线文本<span class="tag">&lt;/<span class="name">STRIKE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>此处为上标示例：x<span class="tag">&lt;<span class="name">SUP</span>&gt;</span>2<span class="tag">&lt;/<span class="name">SUP</span>&gt;</span> + y<span class="tag">&lt;<span class="name">SUP</span>&gt;</span>2<span class="tag">&lt;/<span class="name">SUP</span>&gt;</span> = R<span class="tag">&lt;<span class="name">SUP</span>&gt;</span>2<span class="tag">&lt;/<span class="name">SUP</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>此处为下标示例：H<span class="tag">&lt;<span class="name">SUB</span>&gt;</span>2<span class="tag">&lt;/<span class="name">SUB</span>&gt;<span class="name">SO</span></span><span class="tag">&lt;<span class="name">SUB</span>&gt;</span>4<span class="tag">&lt;/<span class="name">SUB</span>&gt;</span></span><br></pre></td></tr></table></figure><P><B>此处为粗体显示文本</B><P><BIG>此处为大字体文本</BIG><P><SMALL>此处为小字体文本</SMALL><P><I>此处为斜体文本</I><P><TT>此处为等宽字体文本</TT><P><u>此处为下划线文本</u><P><S>此处为使用&lt;S&gt;标记设置的删除线文本</S><P><STRIKE>此处为使用&lt;STRIKE&gt;标记设置的删除线文本</STRIKE><P>此处为上标示例：x<SUP>2</SUP> + y<SUP>2</SUP> = R<SUP>2</SUP><P>此处为下标示例：H<SUB>2</SUB>SO<SUB>4</SUB><h3 id="marquee-滚动文字"><a href="#marquee-滚动文字" class="headerlink" title="marquee 滚动文字"></a>marquee 滚动文字</h3><p>包含一些比较常用的属性：</p><ul><li>width 和 height 滚动字幕的宽度和高度</li><li>bgcolor 滚动字幕的背景颜色</li><li>direction 滚动方向 left right up down</li><li>loop 滚动重复次数 不设置为无限循环</li><li>behavior 设置如何滚动 scroll slide alternate。</li></ul><h3 id="旁注文字"><a href="#旁注文字" class="headerlink" title="旁注文字"></a>旁注文字</h3><p>使用 &lt;ruby&gt;&lt;/ruby&gt; 来包围需要被旁注的文字。</p><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><p>利于爬虫提取时间的一中标签，表示里面是时间 &lt;time&gt;</p><p>拥有属性:</p><ul><li>datetime 普通日期时间  </li><li>pubdate 发表时间</li></ul><h3 id="文本分段"><a href="#文本分段" class="headerlink" title="文本分段"></a>文本分段</h3><ul><li>&lt;p&gt; 将文本分割成段落 paragraph</li><li>&lt;br&gt; 强制换行 break</li><li>&lt;hr&gt; （horizontal rule 水平尺）水平分割线  内含有属性 color size noshade(没有值，表示去除分割线阴影) align(对齐方式 left right center)</li><li>&lt;hn&gt;  其中 n 为自定义数字，表示第 n 级标题，n 最大为 6。</li></ul><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><ul><li>&lt;div&gt; (division) 将多段文本整合为一个节，这个节可以利用 &lt;div&gt; 中的 align 属性，设置一致的对齐方式， align拥有可选项： left right center justify（两端对齐） 此标签作用是将 html 代码分块管理。</li><li>&lt;center&gt;&lt;/center&gt; 将包括里面的内容居中对齐</li></ul><h3 id="文本格式保留"><a href="#文本格式保留" class="headerlink" title="文本格式保留"></a>文本格式保留</h3><p>使用 &lt;pre&gt; 标签可以想使用 Python 中的 ‘’’ 效果一样，完全保留在标签内的排版。</p><h3 id="组合文本"><a href="#组合文本" class="headerlink" title="组合文本"></a>组合文本</h3><p>使用 &lt;span&gt;XXXX&lt;span&gt; 用于标记的文字 XXXX 一些特别的表现，需要结合样式来确定具体的效果。</p><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><p>使用  &lt;ol&gt;&lt;/ol&gt; 来创建一个列表样式，ol：ordered list，&lt;ol&gt; 标签里面使用 &lt;li&gt; 来表示列表的一个元素。</p><p>ol 包含的属性：</p><ul><li>type 设置标记第几个的符号可选 1 A a I i（后两个为大小写罗马数字）</li><li>start 设置数字的起始值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;I&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>This is the first!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>This is the second!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>This is the third!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>列表可嵌套，只需要在 &lt;li&gt;&lt;/li&gt; 标签之间再新建一个列表即可。</p><hr><p>使用&lt;ul&gt; 标签可以搞一个无序列表 unordered list，使用 &lt;li&gt; 作为单个标记，用法效果和 md 里面的 - 符号相同。</p><hr><p>使用 &lt;dl&gt; discribe list 搞一个描述列表，里面有 &lt;dt&gt; discribe title 来自定义当前列表的标题。使用 &lt;dd&gt; discribe data 来跟在标题后面，表示属于其的内容。</p><p>可以搞 嵌套列表</p><h2 id="图像与超链接"><a href="#图像与超链接" class="headerlink" title="图像与超链接"></a>图像与超链接</h2><h3 id="Web-图像基础"><a href="#Web-图像基础" class="headerlink" title="Web 图像基础"></a>Web 图像基础</h3><p>矢量图和位图的区别。。。</p><ul><li>gif ： 颜色少于256位，允许透明，可以是图片或者动画</li><li>jpeg/jpg：颜色艳丽体积小，不支持透明和动画</li><li>png：可以用于矢量图，允许半透明</li></ul><h3 id="图像标记符-lt-img-gt"><a href="#图像标记符-lt-img-gt" class="headerlink" title="图像标记符  &lt;img&gt;"></a>图像标记符  &lt;img&gt;</h3><p>这个标签拥有属性：</p><ul><li>src 添加图像的 URL</li><li>dynsrc 添加视频的 URL</li><li>alt (alternative) 图像加载不出来的时候显示的文字</li><li>align 对齐方式，可选 left right top middle bottom</li><li>height 高度</li><li>width 宽度</li><li>hspace 水平方向空白大小</li><li>vspace 垂直方向空白大小</li></ul><h3 id="视频标记符-lt-video-gt"><a href="#视频标记符-lt-video-gt" class="headerlink" title="视频标记符 &lt;video&gt;"></a>视频标记符 &lt;video&gt;</h3><p>HTML5 支持三种视频格式： mp4、WebM 和 Ogg</p><p>标签 &lt;video&gt; 拥有下列属性：</p><ul><li>src 值 URL 为视频地址</li><li>autoplay 值 autoplay</li><li>loop 值 loop</li><li>muted 值 muted 设置为默认静音</li><li>width</li><li>height</li></ul><p>可以内嵌多个 &lt;source src=”” type=”video/mp4” &gt; 来代替标签内的 src 实现多个视频源备选。</p><h3 id="音频标记符-lt-audio-gt"><a href="#音频标记符-lt-audio-gt" class="headerlink" title="音频标记符 &lt;audio&gt;"></a>音频标记符 &lt;audio&gt;</h3><p>用法和上面的 &lt;video&gt; 差不多。</p><p>可以内嵌多个 &lt;source src=”” type=”audio/mp3” &gt; 来代替标签内的 src 实现多个音频源备选。</p><h3 id="多媒体文件-lt-embed-gt"><a href="#多媒体文件-lt-embed-gt" class="headerlink" title="多媒体文件 &lt;embed&gt;"></a>多媒体文件 &lt;embed&gt;</h3><p>embed 嵌入，这个标签用来加入除了视频和音频以外的多媒体文件，比如 Flash ，用法和上面的一样。</p><h3 id="单独一块内容-lt-figure-gt"><a href="#单独一块内容-lt-figure-gt" class="headerlink" title="单独一块内容 &lt;figure&gt;"></a>单独一块内容 &lt;figure&gt;</h3><p>用来声明单独的一块内容来显示东西，&lt;figcaption&gt; 用于放在 &lt;figure&gt; 标签里面用来用来介绍下面一块单独内容为什么东西。</p><h3 id="超链接标识符-lt-a-gt-XXX-lt-a-gt"><a href="#超链接标识符-lt-a-gt-XXX-lt-a-gt" class="headerlink" title="超链接标识符 &lt;a&gt;XXX&lt;/a&gt;"></a>超链接标识符 &lt;a&gt;XXX&lt;/a&gt;</h3><p>可以在可以显示的任意地方使用：<code>&lt;a href=https://xorex.space&gt;这是我的博客&lt;/a&gt;</code></p><p>h ref ：Hypertext reference</p><p>上面 XXX 的地方除了可以写文字，也可以插入一个图片。</p><hr><p>当然这个 href 可以是同一个页面的一个标签，直接跳转到标签所在的位置。标签的声明方法：</p><p><code>&lt;a name=&quot;mark1&quot;&gt;</code> 然后把 href 的值改为标签的名字 #mark1 即可。</p><hr><p>超链接拥有的属性：</p><ul><li>href 输入链接</li><li>target 何处打开目标 <code>_self</code> 当前窗口 默认，<code>_blank</code> 新窗口</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格的内容定义在 &lt;table&gt;&lt;/table&gt; 之间，一行一行定义的，每一行使用 &lt;tr&gt;&lt;/tr&gt; 之间定义这一行的内容，对于第一行来说，里面每一列的元素使用标签 &lt;th&gt;&lt;/th&gt; 来定义每一列的标题 head。第二行及其后面第一个使用&lt;th&gt;&lt;/th&gt;来表示这一行的标题head，后面的则使用标签 &lt;td&gt;&lt;/td&gt; 来表示每一列的具体数据。其中 tr：table row ，th：table head，td：table data。</p><p>举个例子：</p><table><thead><tr><th>姓名</th><th>上午</th><th>中午</th><th>晚上</th></tr></thead><tbody><tr><td>Xorex</td><td>打游戏</td><td>睡觉</td><td>打游戏</td></tr><tr><td>Megumi</td><td>看动漫</td><td>睡觉</td><td>看动漫</td></tr><tr><td>Yukino</td><td>学习</td><td>睡觉</td><td>学习</td></tr></tbody></table> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">1</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>上午<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>下午<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Xorex<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Megumi<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>看动漫<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>看动漫<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Yukino<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签&lt;Table&gt;属性</p><ul><li>width 表格宽度</li><li>border 是否显示边框，0 表示没有边框 1表示拥有边框</li><li>align 控制表格的对齐方式，可以是 left right center</li><li>bgcolor 设置表格背景颜色</li><li>background 设置背景图片</li></ul><p>标签 &lt;caption&gt; 用于给表格添加标题等说明文字</p><ul><li>align 可选择 left right center</li></ul><p>标签 &lt;tr&gt; 定义表格的一行</p><ul><li>align 行中数据水平的对齐方式 left right center</li><li>valign 行中数据垂直的对齐方式 top middle bottom</li><li>bgcolor 一行的背景颜色</li></ul><p>标签 &lt;td&gt; 定义表格的一个单独的数据</p><ul><li><p>align  可选 left right center</p></li><li><p>valign 可选 top middle bottom</p></li><li><p>width height 宽度和高度</p></li><li><p>rowspan 单元格合并格数 span(跨度，持续) 向右合并</p></li><li><p>colspan 单元格合并的列数可以内嵌多个 &lt;source src=”” type=”audio/mp3” &gt; 来代替标签内的 src 实现多个音频源备选。  向下合并</p></li></ul><p>标签 &lt;colgroup&gt; 对某一列进行统一标记</p><ul><li>可以使用 &lt;td&gt; 的所有属性，按照此标签个数，是第几个就是对第几列的控制。</li></ul><p>标签 &lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt; 对一行行数据进行标注</p><ul><li>要求三个同时出现，并且包含所有的元素。</li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>表单的格式： <code>&lt;form name=&quot;&quot; method=&quot;&quot; action=&quot;&quot;&gt;&lt;/from&gt;</code></p><ul><li>name 表示表单的名称</li><li>method 表示提交方法可以是 get 或者 post</li><li>action 表示将信息交给处理对象，比如 index.php</li></ul><p>&lt;input&gt; 标记，可以用来定义文本框，提交按钮，复选框等</p><ul><li>type 表示此表单的类型，有 文本框：text，密码框：password，提交按钮：submit，重置按钮：reset，单选按钮：radio，图像提交按钮：image，隐藏输入字段：hidden，上传文件：file，多选框：checkbox，多行文本框：textarea，选项菜单：select。</li><li>name 此表单的名称</li><li>size 单行文本框的长度</li><li>maxlength 文本框最大输入字数</li><li>value 若为文本框，则为默认值。若为选择按钮，则为被选中后传入服务器的值。若为按钮，则为按钮上的文字。</li><li>checked 表示默认选中的选项</li><li>readonly 赋值为 “readonly” 的时候，此文本框无法被修改。</li></ul><h3 id="input-新增表单控件"><a href="#input-新增表单控件" class="headerlink" title="input 新增表单控件"></a>input 新增表单控件</h3><ul><li>url 会自动验证数据是否为 url</li><li>email 会自动验证</li><li>时期或时间 可选择 date month week time detetime datetime-local</li><li>数字，可选 number（类似 &lt;select&gt; 选择） 或者 range（拖动条）</li></ul><h3 id="lt-filedset-gt-分组"><a href="#lt-filedset-gt-分组" class="headerlink" title="&lt;filedset&gt; 分组"></a>&lt;filedset&gt; 分组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就像上面把各种 &lt;input&gt; 表单分组，一个是用户登录，一个是用户注册，命名使用 &lt;legend&gt; （说明）来命名，和 &lt;input&gt; 并列。</p><h3 id="表单的各种实现"><a href="#表单的各种实现" class="headerlink" title="表单的各种实现"></a>表单的各种实现</h3><p>比如文本框 ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">Introduction</span> <span class="attr">maxlength</span>=<span class="string">250</span> <span class="attr">value</span>=<span class="string">&quot;Input in there.&quot;</span> <span class="attr">size</span>=<span class="string">20</span> <span class="attr">readonly</span>=<span class="string">readonly</span> &gt;</span></span><br></pre></td></tr></table></figure><p>比如密码框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">password</span> <span class="attr">maxlength</span>=<span class="string">16</span>  <span class="attr">size</span>=<span class="string">20</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">&quot;Submit the ID and password.&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">reset</span> <span class="attr">name</span>=<span class="string">&quot;Reset the datas.&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Reset&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">buttom</span> <span class="attr">name</span>=<span class="string">&quot;Show example.&quot;</span> <span class="attr">value-</span>&quot;<span class="attr">Show</span> <span class="attr">example</span>&quot; <span class="attr">onclick</span>=<span class="string">Example.js</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如单选框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">Sex</span> <span class="attr">value</span>=<span class="string">Man</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">Sex</span> <span class="attr">value</span>=<span class="string">Woman</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">death</span> <span class="attr">value</span>=<span class="string">0</span>&gt;</span>死亡</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">death</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span>存活</span><br></pre></td></tr></table></figure><p>比如多选框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">checkbox</span> <span class="attr">name</span>=<span class="string">ways</span> <span class="attr">value</span>=<span class="string">web</span>&gt;</span>Web</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">checkbox</span> <span class="attr">name</span>=<span class="string">ways</span> <span class="attr">value</span>=<span class="string">revrse</span>&gt;</span>逆向</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">checkbox</span> <span class="attr">name</span>=<span class="string">ways</span> <span class="attr">value</span>=<span class="string">crypto</span>&gt;</span>密码学</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">checkbox</span> <span class="attr">name</span>=<span class="string">ways</span> <span class="attr">value</span>=<span class="string">pwn</span>&gt;</span>二进制安全</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如文件框：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">name</span>=<span class="string">user_file</span> &gt;</span></span><br></pre></td></tr></table></figure><p>比如隐藏框（并不会被显示出来，一般用来搞验证的 token）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">id</span> <span class="attr">value</span>=<span class="string">123123123</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多行文本框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">10</span> <span class="attr">cols</span>=<span class="string">200</span> <span class="attr">name</span>=<span class="string">self_introduction</span>&gt;</span>在这里输入个人简介吧！<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选择列表"><a href="#选择列表" class="headerlink" title="选择列表"></a>选择列表</h3><p>选择列表在标签 &lt;select&gt;&lt;/select&gt; 中添加，它拥有以下属性：</p><ul><li>size 指定下拉菜单显示的菜单项目数量。</li><li>multiple=multiple 可以按住 ctrl 或者 shift 多选。</li></ul><p>选择列表需要配合 &lt;option&gt;&lt;/option&gt; 标签使用，属性如 下：</p><ul><li>value 被选中后返回到服务器的值</li><li>selected=selected 默认被选择</li></ul><p>比如建立一个语言选择列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">C++</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">Java</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">C#</span>&gt;</span>C#<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">Python</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">Pascal</span>&gt;</span>Pascal<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据选择列表：&lt;datalist&gt;</p><p>这个东西的使用场景是要填写一个答案固定几种的文本框，然后给文本框编写待选数据使用的，所以这个标签需要绑定一个文本框才可以使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">size</span>=<span class="string">40</span> <span class="attr">list</span>=<span class="string">URL</span> <span class="attr">name</span>=<span class="string">URL</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">URL</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">https://google.com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">https://xorex.space</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">https://tempest.space</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML-基础&quot;&gt;&lt;a href=&quot;#HTML-基础&quot; class=&quot;headerlink&quot; title=&quot;HTML 基础&quot;&gt;&lt;/a&gt;HTML 基础&lt;/h2&gt;&lt;p&gt;HTML 网页的组成由 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 标签包围，里面有文件头和</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Web" scheme="https://xorex.space/tags/Web/"/>
    
    <category term="HTML" scheme="https://xorex.space/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>行为型模式笔记</title>
    <link href="https://xorex.space/2021/03/16/1c210db0c3a4/"/>
    <id>https://xorex.space/2021/03/16/1c210db0c3a4/</id>
    <published>2021-03-16T15:27:47.000Z</published>
    <updated>2021-03-19T09:20:25.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。</p><p>其实本质上就是类的继承，首先父类将所要实现的功能放到<strong>模板方法</strong>里面 TemplateMethod() 外界只会调用这个方法来完成某一个任务。而完成模板方法可以变动的细节，再抽取成抽象方法，让子类用不同的方式实现这些方法。也就是说，父类的 TemplateMethod() 会通过调用子类实现的抽象方法来最终完成整个任务，不同的子类意味着实现方式的不同。</p><p>主要是对于同一个目标的不同实现方法分别放在不同的子类中，根据实际分析出最好的方法，然后用对应的子类完成。</p><p>下面就是模板方法的 UML 图，父类的 TemplateMethod() 会调用自己定义的抽象方法完成任务，而抽象方法的具体实现交给不同的子类。</p><p><img src="https://xorex.space/image/179.jpg"></p><p>模板方法模式的主要思想：父类定义骨架，子类实现某些细节。这里的骨架就是获取最短路径的步骤，建表-迭代-输出。而将拥有不同实现方法的细节——迭代，延迟到子类去实现（Floyd 算法、Dijkstra 算法）</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们用求最短路来表示一下模板方法模式，这里父类给出了要解决最短路问题的主要框架：建表-迭代-输出，然后迭代细节交给不同的子类用不同的算法实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shortest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Edge[] edges;</span><br><span class="line"></span><br><span class="line">    Shortest(Edge[] edges) &#123;</span><br><span class="line">        <span class="keyword">this</span>.edges=edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Edge[] GetShortest() &#123; <span class="comment">// 模板方法，调用此方法完成某一项功能</span></span><br><span class="line">        BuildEdge(<span class="keyword">this</span>.edges); <span class="comment">// 固定的算法骨架-建表</span></span><br><span class="line">        ToShort(<span class="keyword">this</span>.edges); <span class="comment">// 调用子类实现的细节-迭代</span></span><br><span class="line">        <span class="keyword">return</span> Output(<span class="keyword">this</span>.edges); <span class="comment">// 固定的算法骨架-输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BuildEdge</span><span class="params">(Edge[] edges)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在建立邻接表&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Edge[] Output(Edge[] edges) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;正在整合输出&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> Edge[] ToShort(Edge[] edges); <span class="comment">// 部分等待实现的细节，不同子类用不同方式实现。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 Floyd 和 Dijkstra 算法实现的最短路子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Floyd</span> <span class="keyword">extends</span> <span class="title">Shortest</span> </span>&#123;</span><br><span class="line">    Floyd(Edge[] edges) &#123;</span><br><span class="line">        <span class="keyword">super</span>(edges);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Edge[] ToShort(Edge[] edges) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用 Floyd 算法迭代出来了最短路&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dijkstra</span> <span class="keyword">extends</span> <span class="title">Shortest</span> </span>&#123;</span><br><span class="line">    Dijkstra(Edge[] edges) &#123;</span><br><span class="line">        <span class="keyword">super</span>(edges);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Edge[] ToShort(Edge[] edges) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用 Dijkstra 算法迭代出来了最短路&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用，实例化对应某一方法的子类，调用其模板方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetShort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Edge[] edges=<span class="keyword">new</span> Edge[<span class="number">100</span>];</span><br><span class="line">        Shortest toshort=<span class="keyword">new</span> Floyd(edges);</span><br><span class="line">        edges=toshort.GetShortest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>上面的模板方法模式的主要思想是：父类定义骨架，子类实现某些细节。这说明父类是针对与某一个问题的总体实现，框架是固定的，只不过是部分的实现细节不同（不同细节对不同资源的消耗是不同的），但最后得到的结果<strong>都是相同</strong>的。</p><p>而策略模式针对的不是一种解决方式的不同细节实现，而是多个整体解决方式。这些整体解决方式可以被替换，因为都是实现了同一个接口，所以替换不会影响到客户端的调用。一般来说是不同的策略得到的结果<strong>是不一样</strong>的。</p><p>比如 <code>Arrays.sort(T[] a, Comparator&lt;? super T&gt; c)</code> 这个排序方法，其中的 Comparator 接口就是排序策略的统一接口，不同的 compare() 实现的是不同的比较策略，对于不同的比较策略，最后排序的结果也会不同。</p><p>综上：策略模式的核心思想是在一个计算方法中把容易变化的算法抽出来接口作为 “策略” 参数传进去，从而使得新增策略不必修改原有逻辑。</p><p>策略模式的实现结构，所谓的环境类就是利用不同策略的类（比如接收 Comparator 接口的排序类）：</p><p><img src="https://xorex.space/image/180.jpg"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们实现一个根据 VIP 等级决定不同打折策略的购物系统。</p><p>策略接口和实现的不同策略类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> price)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span> <span class="keyword">implements</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;VIP会员，统一打八折&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> result=price*<span class="number">0.8</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coupon</span> <span class="keyword">implements</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cutdown;</span><br><span class="line"></span><br><span class="line">    Coupon(<span class="keyword">int</span> price) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cutdown=price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拥有优惠卷，便宜&quot;</span>+cutdown+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> price-cutdown;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> <span class="keyword">implements</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通会员，不优惠&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境类：超市购物系统，接收打折策略并完成结算过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMarket</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Discount discount;</span><br><span class="line"></span><br><span class="line">    SuperMarket(Discount discount) &#123;</span><br><span class="line">        <span class="keyword">this</span>.discount=discount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkOut</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discount.getPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户来超市实际的购物过程，不同的优惠策略对应不同的价格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperMarket sm1=<span class="keyword">new</span> SuperMarket(<span class="keyword">new</span> VIP());</span><br><span class="line">        System.out.println(sm1.checkOut(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        SuperMarket sm2=<span class="keyword">new</span> SuperMarket(<span class="keyword">new</span> Coupon(<span class="number">20</span>));</span><br><span class="line">        System.out.println(sm2.checkOut(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        SuperMarket sm3=<span class="keyword">new</span> SuperMarket(<span class="keyword">new</span> Common());</span><br><span class="line">        System.out.println(sm3.checkOut(<span class="number">100</span>));   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>对于一般我们控制一样东西，都是客户端直接持有需要控制的对象，然后和其进行交互。</p><p>但是当控制越来越复杂，就需要引入中间件来降低系统的耦合度了，这个中间件就是命令接口，实现其接口的不同子类拥有不同的命令，我们只需要持有命令接口，就可以用简单的代码完成复杂命令的发出。</p><p><img src="https://xorex.space/image/181.jpg"></p><p>使用小爱同学（中间件）来控制智能家居就是命令模式，小爱可以帮你传达控制智能家居的命令（红外 / wifi），还可以封装一些基本控制的组合为一个新的整体命令（小爱捷径），还可以在小爱执行列表里看到命令执行情况（中间件添加的日志系统）。</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>看看上面的 UML 图就行了，这个设计模式逻辑过于简单，就不写代码了。</p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>责任链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><p>比如异常的处理机制，从出问题的地方抛出来，然后经过每一个 catch() 进行判断是否可以捕捉，如果可以捕捉，则捕捉异常并处理，如果不能，则传递给下一个 catch()，直到有人能处理异常或者直接抛到程序外面，终止程序的运行。</p><p>责任链的实现也很简单，先建立一个抽象类规定处理者的公有属性和方法，（属性：下一个处理者）（方法：处理问题方法）。</p><p>构建责任链有两种方式，一种是直接创造好所有责任链所拥有的实例，然后用内聚的方法在调用处构造好责任链，然后传入待处理对象处理。另外一种是在写具体处理者的时候，就定义好责任链的下一个处理者，下一个处理者的实例化交给当前处理者决定（如果自己能处理，就自己处理，如果不能，实例化下一个处理者，并交付给它。）</p><p>下图是第一种责任链的构造方式：</p><p><img src="https://xorex.space/image/182.jpg"></p><p>然后一步一步的去处理：</p><p><img src="https://xorex.space/image/183.jpg"></p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们来写写第二种责任链的代码实现，实现一个责任链给人穿衣服。</p><p>定义被处理者 Person ，和处理者 Wearer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Person(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Person person;</span><br><span class="line">    </span><br><span class="line">    Wearer(Person person) &#123;</span><br><span class="line">        <span class="keyword">this</span>.person=person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Wearer next=<span class="keyword">new</span> WearPants(person);</span><br><span class="line">        <span class="keyword">return</span> next.wear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一下责任链里面的每一个单独处理者:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearPants</span> <span class="keyword">extends</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    WearPants(Person person) &#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在给&quot;</span>+person.getName()+<span class="string">&quot;穿内裤&quot;</span>);</span><br><span class="line">        Wearer next=<span class="keyword">new</span> WearJacket(person);</span><br><span class="line">        <span class="keyword">return</span> next.wear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearJacket</span> <span class="keyword">extends</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    WearJacket(Person person) &#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在给&quot;</span>+person.getName()+<span class="string">&quot;穿上衣&quot;</span>);</span><br><span class="line">        Wearer next=<span class="keyword">new</span> WearTrousers(person);</span><br><span class="line">        <span class="keyword">return</span> next.wear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearTrousers</span> <span class="keyword">extends</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    WearTrousers(Person person) &#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在给&quot;</span>+person.getName()+<span class="string">&quot;穿裤子&quot;</span>);</span><br><span class="line">        Wearer next=<span class="keyword">new</span> WearShoes(person);</span><br><span class="line">        <span class="keyword">return</span> next.wear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearShoes</span> <span class="keyword">extends</span> <span class="title">Wearer</span> </span>&#123;</span><br><span class="line">    WearShoes(Person person) &#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">wear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在给&quot;</span>+person.getName()+<span class="string">&quot;穿鞋子&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;完成穿衣，准备出门!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后让 Xorex 小朋友被责任链一个接着一个穿衣服：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person Xorex=<span class="keyword">new</span> Person(<span class="string">&quot;Xorex&quot;</span>);</span><br><span class="line">        Wearer wearer=<span class="keyword">new</span> Wearer(Xorex);</span><br><span class="line">        System.out.println(wearer.wear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取最终的输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正在给Xorex穿内裤</span><br><span class="line">正在给Xorex穿上衣</span><br><span class="line">正在给Xorex穿裤子</span><br><span class="line">正在给Xorex穿鞋子</span><br><span class="line">完成穿衣，准备出门!</span><br></pre></td></tr></table></figure><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>状态关系的定义：对有状态的对象，把复杂的不同状态代码提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</p><p>我们会遇到在不同情况下，一个类需要有不同的应对处理状态。那么这个时候最基础的解决方法就是在类里面用 if 或者 switch 语句来判断当前所处于的状态，然后里面写对应状态的处理代码。但是这样做的缺陷会很大，代码会很复杂，很难维护，所以我们就更具定义，法复杂的状态代码提取到不同的状态对象中。定义一个状态接口，然后实现不同状态的类的代码。一旦系统处于某个状态，那么我们就持有对应这个状态的实例来处理事物，从而进行代码解耦。</p><p>对于持有应对外界状态的实例变化，有两种方式，一种是让状态实例自己判断并改变：实现原理就是让状态实例处理的时候，传入环境实例，等状态实例处理完成之后再自行判断并修改环境实例中的状态标志，从而改变状态。比如下面的 UML 类图就是这种模式：</p><p><img src="https://xorex.space/image/184.jpg"></p><p>另外一种则是交给外界控制并持有状态类实例的环境类来判断改变。其实现原理更加简单了，环境类执行状态实例的处理方法之后，根据处理方法返回的信息，决定环境类持有的下一个状态实例。没有 UML 图，但是有代码：</p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>我个人是觉得第二种更加好一点，这样可以单方面解耦状态类和环境类之间的联系，更加纯粹一点。</p><p>现在有一个人，可以进行交互，状态有开心和生气两种，改变状态触发条件时 Play() 和 Wrok() 。</p><p>状态接口以及两种状态类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">States</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">Talk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">Play</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">Work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HappyState</span> <span class="keyword">implements</span> <span class="title">States</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好啊，一起去玩吧！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;好耶，去玩！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;不想工作啊……&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AngryState</span> <span class="keyword">implements</span> <span class="title">States</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;滚，别和我说话。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;让我工作，想要找死吗？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;真是受够了，终于能玩了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境类，用于控制状态的转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> States now;</span><br><span class="line"></span><br><span class="line">    Context(States now) &#123;</span><br><span class="line">        <span class="keyword">this</span>.now=now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> now.Talk();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ans=now.Work();</span><br><span class="line">        now=<span class="keyword">new</span> AngryState();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ans=now.Play();</span><br><span class="line">        now=<span class="keyword">new</span> HappyState();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟和这个人交互：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context Xorex=<span class="keyword">new</span> Context(<span class="keyword">new</span> AngryState());</span><br><span class="line">        System.out.println(Xorex.Talk());</span><br><span class="line">        System.out.println(Xorex.Work());</span><br><span class="line">        System.out.println(Xorex.Play());</span><br><span class="line">        System.out.println(Xorex.Play());</span><br><span class="line">        System.out.println(Xorex.Talk());</span><br><span class="line">        System.out.println(Xorex.Work());</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后表现，可以看到中间 Play() 之后状态由 angry 转化为了 happy。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">滚，别和我说话。</span><br><span class="line">让我工作，想要找死吗？</span><br><span class="line">真是受够了，终于能玩了</span><br><span class="line">好耶，去玩！</span><br><span class="line">你好啊，一起去玩吧！</span><br><span class="line">不想工作啊……</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>观察者模式定义：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。</p><p>观察者模式是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响。而具体的实现方式就是建立一个中介，里面保存着所有的需要被通知的观察者，一旦被观察者通过自己被修改了，那么它会逐一通知所有保存着的观察者。</p><p><img src="https://xorex.space/image/185.jpg"></p><p>核心就是将观察者和被观察者解耦，建立一个中间类，中间类负责代理观察者监视被观察者，并根据被观察者的改变发送给观察者信息，包括管理订阅消息的观察者。</p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><p>观察者需要实现的接口，以及具体的观察者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">(String info)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yukino</span> <span class="keyword">implements</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Yukino received] &quot;</span>+info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Asuna</span> <span class="keyword">implements</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Yukino received] &quot;</span>+info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负责管理被观察者信息改变，并传递给观察者消息的信息管理者，以及被观察者的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageManger</span> </span>&#123;</span><br><span class="line">    Xorex xorex=<span class="keyword">new</span> Xorex();</span><br><span class="line">    List&lt;Observable&gt; obser=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOberver</span><span class="params">(Observable observer)</span> </span>&#123;</span><br><span class="line">        obser.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        xorex.setHeart(num);</span><br><span class="line">        notification(num);</span><br><span class="line">        inform(num);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inform</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        obser.forEach(o-&gt;o.getInfo(<span class="string">&quot;Xorex&#x27;s heart number is changed to &quot;</span>+num));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notification</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;[Message Manger] Information changed to &quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xorex</span> </span>&#123; <span class="comment">//被观察者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> heart;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeart</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.heart=num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改被观察者的信息，发现观察者已经接收到通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MessageManger mm=<span class="keyword">new</span> MessageManger();</span><br><span class="line">        mm.setOberver(<span class="keyword">new</span> Asuna());</span><br><span class="line">        mm.setOberver(<span class="keyword">new</span> Yukino());</span><br><span class="line">        mm.change(<span class="number">100</span>);</span><br><span class="line">        mm.change(<span class="number">10</span>);</span><br><span class="line">        mm.change(<span class="number">1</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收到的通知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Message Manger] Information changed to 100</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 100</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 100</span><br><span class="line"></span><br><span class="line">[Message Manger] Information changed to 10</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 10</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 10</span><br><span class="line"></span><br><span class="line">[Message Manger] Information changed to 1</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 1</span><br><span class="line">[Yukino received] Xorex&#39;s heart number is changed to 1</span><br></pre></td></tr></table></figure><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>中介者模式定义：定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是最小认知原则的典型应用。</p><p>其实就是一堆应用应为相互依赖过于混乱，导致了改一个其他都可能会出问题，那么就搞一个中介，让所有的人都通过中介和其他人交互。大概就是从网状网络的去中心化更改为了星形网络的中心化，这样对于一切更改，我们只需要针对中介这一个类就可以了。</p><p>举个例子，对于同事们之间的信息交互，我们可以搞一个中介类来负责数据的发送和接收，UML 类图大概是这样：（其实抽象中介者一般来说都可以省略）</p><p><img src="https://xorex.space/186.jpg"></p><h3 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h3><p>代理模式：一般来说是代理类代替被代理类作为目标类来使用，用来完成被代理类无法完成或者不方便完成的任务。</p><p>中介者模式：作为一群类的处理交互人，这些类的相互交互全在中介类一个人身上。</p><p>外观模式：目标类（被其它类交互的类）整理出来一个统一的接口，来规范化简洁化和自己交互的过程。</p><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><p>因为中介者模式比较简单，所以不写了。</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p>迭代器模式前面学习集合的时候肯定已经非常熟悉了，就是对于一种聚合数据的类（无论是集合还是映射），都有遍历里面所有元素的需求，而这些需求都是聚合数据类内部实现的。遍历的方法是获取迭代器 Iterator，这个迭代器往往通过聚合数据类的 iterator() 获取。</p><p>而 Iteratior 接口就是这种标准的迭代接口，在 Collection 接口种就规定了一个方法用来返回用于此集合遍历的迭代器 Iterator<E> iterator();。而 Iteratior 接口规定了实现迭代统一而必不可少的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>; <span class="comment">// 返回是否还有下一个元素</span></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>; <span class="comment">// 返回下一个元素并移动指针指向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错，只有这两个方法就够了，判断还有下一个元素没有了，如果有就取出来，如果没有那就迭代完成！我们不需要关心集合是啥，只要 hasNext 和 next ，闭着眼都能遍历它。</p><p>而我们需要实现对聚合数据类进行迭代的时候，只需要对此类标注实现接口 Iterable 表示实现了方法 iterator() 来返回此数据聚合类的迭代器。然后重点就是让 iterator() 方法返回一个实现了 Iterator 接口的迭代器的实例。</p><p>主要是用内部类实现 Iterator 并重写 hasNext() 和 next() 方法，对应实现迭代器的 UML 图如下：</p><p><img src="https://xorex.space/197.jpg"></p><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><p>实现了 Iterable 接口的聚合数据类，表示可以被迭代，拥有 iterator() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCollection</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line"></span><br><span class="line">    MyCollection() &#123;</span><br><span class="line">        <span class="keyword">this</span>.array=(T[]) <span class="keyword">new</span> Object[<span class="number">1000</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        array[index++]=t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//返回本实例的迭代器实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Iter</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="comment">//通过内部类来实现迭代器的代码</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> curser=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> curser&lt;index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> array[curser++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码验证迭代器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCollection&lt;String&gt; mycol=<span class="keyword">new</span> MyCollection&lt;&gt;();</span><br><span class="line">        mycol.add(<span class="string">&quot;Xorex&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Tempest&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Yukino&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Asuna&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Katou&quot;</span>);</span><br><span class="line">        mycol.add(<span class="string">&quot;Megumi&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String i:mycol) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后迭代成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Xorex</span><br><span class="line">Tempest</span><br><span class="line">Yukino</span><br><span class="line">Asuna</span><br><span class="line">Katou</span><br><span class="line">Megumi</span><br></pre></td></tr></table></figure><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><h3 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h3><p>定义：将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。它将对数据的操作与数据结构进行分离。</p><p>说人话版本，将对于数据结构里面数据的遍历和数据的操作分离。举个例子：遍历一个树结构然后将每一个节点的值 +1，这里遍历一个树结构是数据的遍历，将每一个节点的值 +1 是对数据的操作。这里我们可以将对数据的操作抽取出来，作为一个访问者，不同访问者的实现类实现了对数据的不同操作。这样在遍历数据的时候，我们就可以传入不同的访问者实例来决定对数据进行不同操作。</p><p>首先需要设置数据元素的接口，然后实现不同的元素类。</p><p>其次需要设置访问者接口，然后实现不同操作的访问者，访问者需要接收上面的符合元素接口实例，然后操作传入的实例。</p><p>最后就是实现数据结构类，负责对数据的增删查改和遍历，可以传入不同的访问者来实现对数据遍历的时候不同的操作。</p><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们写一个通过访问者修改数据的字符串内容为全部大写的需求。</p><p>首先代码数据的接口及其具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line"></span><br><span class="line">    Person(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后代码访问者的接口及代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Handle</span><span class="params">(Element element)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upper</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Changed element:] &quot;</span>+element.getName()+<span class="string">&quot; to &quot;</span>+element.getName().toUpperCase());</span><br><span class="line">        element.setName(element.getName().toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现数据聚合的控制类和主函数去调用对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ElementController ec=<span class="keyword">new</span> ElementController();</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Xorex&quot;</span>));</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Yukino&quot;</span>));</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Megumi&quot;</span>));</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Asuna&quot;</span>));</span><br><span class="line">        ec.add(<span class="keyword">new</span> Person(<span class="string">&quot;Origami&quot;</span>));</span><br><span class="line">        ec.forEach(<span class="keyword">new</span> Upper());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElementController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Element&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Element i:list) &#123;</span><br><span class="line">            visitor.Handle(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过访问者成功修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Changed element:] Xorex to XOREX</span><br><span class="line">[Changed element:] Yukino to YUKINO</span><br><span class="line">[Changed element:] Megumi to MEGUMI</span><br><span class="line">[Changed element:] Asuna to ASUNA</span><br><span class="line">[Changed element:] Origami to ORIGAMI</span><br></pre></td></tr></table></figure><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><h3 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h3><p>就是对某一个类的某个状态进行抽取成某个格式，并保存到备忘录类中，方便实现历史状态回溯。</p><p>首先需要一个存档类，也就是某个类去存储状态的时候，里面属性的存储格式。这里可以是被存储类的部分属性组成的类，也可以直接 clone() 被存储类（存档格式就是被存储类本身）</p><p>然后就是一个存档容器类，里面用集合存储存档实例，内部由存储，提取，删除存档等功能。</p><p>如果存档类是要被存储类本身的话，获取存档只需要调用 clone() 就可以返回一个复制的存档用来存储。如果不是的话，还需要一个存档类生成器，用于传入被存储类，然后返回存档类。</p><p>实现的 UML 图大概如下，其中发起人 Originator 就是需要被存储的类，它可以自己创建并返回自己当前状态的存档类 Memonto ，也可以接收 Memonto 实例来恢复对应存档当时的状态。获取自己当前的状态类 Memonto 之后，交为管理者 Caretaker 存储管理。</p><p>客户端主要和管理者和被存储类交互，从被存储类获取它当前状态的存档并保存到管理者这里，或者从管理者这里获取过去状态存档然后传给被存储类进行状态恢复。</p><p><img src="https://xorex.space/image/198.jpg"></p><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><p>觉得这个模式比较好理解，所以就不写代码了 QAQ</p><h2 id="解释者模式"><a href="#解释者模式" class="headerlink" title="解释者模式"></a>解释者模式</h2><h3 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h3><p>解释器模式的定义：给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释语言中的句子。也就是说，用编译语言的方式来分析应用中的实例。这种模式实现了文法表达式处理的接口，该接口解释一个特定的上下文。</p><p>举个例子就是各种编程语言，SQL 语言，正则表达式，都是通过定义此语言的文法表示，然后用解析器解析成所需要执行的步骤。这里对应的就是各语言的 编译器/解释器 。</p><p>所以因为过于复杂，一般来说除非想写编译器，否则根本用不上。</p><h3 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h3><p>请翻阅各种语言的编译器/解释器源代码 QAQ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模板方法模式&quot;&gt;&lt;a href=&quot;#模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式&quot;&gt;&lt;/a&gt;模板方法模式&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行为型" scheme="https://xorex.space/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>UML类图学习笔记</title>
    <link href="https://xorex.space/2021/03/15/b583afde1613/"/>
    <id>https://xorex.space/2021/03/15/b583afde1613/</id>
    <published>2021-03-15T09:24:59.000Z</published>
    <updated>2021-03-15T12:36:45.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><blockquote><p>UML类图是用来描述在面向对象设计程序的时候，各种类，接口等本身的信息和之间的联系。</p></blockquote><p>一些快速参考的资料：<a href="http://c.biancheng.net/view/8374.html">UML类图及类图之间的关系</a>、<a href="http://c.biancheng.net/view/8375.html">UML理解记忆</a> 。</p><h2 id="UML类之间的关系"><a href="#UML类之间的关系" class="headerlink" title="UML类之间的关系"></a>UML类之间的关系</h2><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>A 类在代码内部临时调用 B 类（通过局部实例变量，方法参数传入，或者直接调用静态方法）这种不持有 B 类，但是需要用到 B 类的关系，称为依赖关系，A 类依赖于 B 类。而依赖是单方面的依赖，</p><p>比如 Person 类中的 call(Phone phone) 方法需要传入 Phone 类的实例，然后内部调用实例 phone 的方法完成通话，那么就说 Person 类依赖于 Phone 类。</p><p>依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/171.jpg"></p><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>关联关系表示两个类有一定的联系，比如 Person 和 Address 之间，人拥有自己的住址，住址地方有人的存在。两者就是相互关联的关系。关联可以是单方面的关联，也可也是互相关联。被关联的类会成为关联者的一个属性。</p><p>单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类，而双向的关联可以用带两个箭头或者没有箭头的实线来表示。关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/172.jpg"></p><h3 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h3><p>当 A 类是由 B 类聚合而成的，并且 B 类可以独立于 A 类，那么称 A 和 B 的关系为聚合关系。比如雁群和大雁的关系，雁群由任意个大雁组成，而大雁可以独立于雁群，就成为大雁聚合成为了雁群。老师们聚合到了学校里面，即使学校倒闭，也可以独立存在，不会随着学校一起消亡。（被聚合个体实例创建在外部，聚合个体时通过外部传入被聚合实例，聚合体销毁的时候，被聚合体实例在外部仍然有引用，不会被回收）</p><p>聚合关系可以用带空心菱形的实线来表示，菱形指向整体，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/173.jpg"></p><h3 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h3><p>组合关系需要一个类由若干个类真正组合而成，比如人是由四肢、躯干、头组成的。少了头，人就不完整了，没有了人，头也无法单独存在。这种极为紧密的关系被称为组合关系，实现这样的部分对象不能脱离整体对象的存在实现方法就是在整体的内部创建部分。这样整体一旦被销毁，部分会因为没有外部引用指向它而也被销毁。</p><p>组合关系用带实心菱形的实线来表示，菱形指向整体，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/174.jpg"></p><h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><p>泛化：变得宽泛，指由个别到一般或由具体到抽象。</p><p>也就是说，泛化关系指的是父类和子类之间的继承关系。</p><p>泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/175.jpg"></p><h3 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h3><p>实现关系是接口和实现类的关系。</p><p>实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口，关系表示如下图（请勿参考图中例子）：</p><p><img src="https://xorex.space/image/176.jpg"></p><h2 id="记忆理解图"><a href="#记忆理解图" class="headerlink" title="记忆理解图"></a>记忆理解图</h2><p><img src="https://xorex.space/image/177.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UML类图&quot;&gt;&lt;a href=&quot;#UML类图&quot; class=&quot;headerlink&quot; title=&quot;UML类图&quot;&gt;&lt;/a&gt;UML类图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;UML类图是用来描述在面向对象设计程序的时候，各种类，接口等本身的信息和之间的联系。&lt;/p</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="UML" scheme="https://xorex.space/tags/UML/"/>
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>结构型模式笔记</title>
    <link href="https://xorex.space/2021/03/11/41a99764aa02/"/>
    <id>https://xorex.space/2021/03/11/41a99764aa02/</id>
    <published>2021-03-11T03:23:54.000Z</published>
    <updated>2021-03-18T12:07:59.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/TT2ej6" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><p>大概流程：</p><p><img src="https://xorex.space/image/166.jpg"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>这里情景是 ChinaLapTop 需求 Electric220V 但是没有，只有现成的 Electric110V，那么我们就建立一个适配器 Adapter，将被适配者 Electric110V 适配为 Electric220V。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseComputer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChinaLapTop laptop=<span class="keyword">new</span> ChinaLapTop();</span><br><span class="line">        <span class="comment">// 这里模拟从中国带去美国的笔记本，需要 220V 的电源(ChinaElectric)</span></span><br><span class="line">        <span class="comment">// 但是没有，只有 110V 的电源(AmericaElectric)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用适配器将已有的资源转化为需要的资源</span></span><br><span class="line">        Electric110V electric=<span class="keyword">new</span> Electric110V();</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter(electric);</span><br><span class="line">        laptop.PowerOn(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们需求的 ChinaElectric</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Electric220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPower</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器转化结果为 ChinaElectric</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Electric220V</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Electric110V USelc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Electric110V USelc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.USelc = USelc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> USelc.getPower()*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已有资源，被适配者 Adaptee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Electric110V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">110</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源需求者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaLapTop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChinaLapTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I hava a China LapTop!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PowerOn</span><span class="params">(Electric220V electric)</span> </span>&#123;</span><br><span class="line">        electric.getPower();</span><br><span class="line">        System.out.println(<span class="string">&quot;Power on succeed!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>参考文章：<a href="https://blog.csdn.net/dianzhenluo3164/article/details/102143836">设计模式 – 桥接模式(Bridge)</a></p></blockquote><p>桥接模式就是为了解决因为排列组合事物所有的属性而导致子类爆炸的情况。</p><p>比如汽车，汽车的车型有：载货汽车，牵引车，客车，轿车等等，汽车的发动机有：柴油发动机，汽油发动机，电动发动机。那么我们如果要具体的汽车，就需要把这些汽车的组合都写成类，一共就要 4*3=12 种。而且一旦有新的动力来源或者车型增加，那么增加的子类就更多了。为了解决这个问题，我们可以将这些属性抽象（<code>从众多的事物中抽取出共同的、本质性的特征</code>）为不同的维度，比如汽车里面的车型为一个维度，发动机类型为一个维度。然后通过组合两个维度来顶替一个具体的实现类来使用，这样就只需要 4+3=7 个类即可，将复杂度从 m*n 降到了 m+n 。</p><p>如何实现两个不同维度的组合呢？这就要说桥接模式了，用它来将两个不同的维度联系（桥接）起来。首先我们将事物属性抽象为不同的维度之后，选择其中一个维度作为抽象维度，剩下的其他维度作为实现维度。这里的选择没有具体的要求，根据取舍来选择。我们将上面的汽车属性抽象为维度：车型维度和发动机维度。然后选取车型作为抽象维度，发动机作为实现维度。</p><p>实现维度的每一个类都需要具体代码实现自己的功能，并让抽象维度去调用（桥接），这样来实现维度之间的结合。比如实现维度的所有类都需要用实际代码实现 <code>getPower()</code> 方法，不同的类实现不同，有的是通过烧柴油，有的是通过烧汽油。而抽象维度内部定义的统一方法的实现则是通过调用实现维度实现的方法完成的。比如抽象维度里面的越野车，里面的 <code>Drive()</code> 方法获取动力就是依靠实现类的方法 <code>getPower()</code>。</p><p>因此，这里的抽象维度的 抽象 就仅仅是方法内部的 <strong>一部分</strong> 需要其他人实现，是特殊意义上的抽象类和抽象方法（这个方法内部全都需要他人实现）。和 <code>从众多的事物中抽取出共同的、本质性的特征</code> 这个概念关系无关。</p><p>桥接的对象是两个维度，其中必定有一个维度为抽象维度，另外一个维度为实现维度。桥接之后的整体可以作为一个新的实现维度，因为不需要调用其他外部实现维度就可以实现自己的方法，所以整体可以作为新的实现维度给抽象维度调用。</p><p>因此，拥有复杂属性的事物，就可以用桥接组合来实现。比如一个抽象维度建立多个桥接到实现维度上，而实现维度也可以拆分为另一个抽象维度和实现维度的整体（发动机维度）。比如下图。</p><p><img src="https://xorex.space/image/167.jpg"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在 Java 中的 JDBC 编程中就用到了桥接模式，实现数据库的驱动有很多，不可能让我们写的程序对每一种数据库都搞一个版本，那么我们可以将我们的程序和数据库驱动分离为两个维度，我们持有数据库驱动的接口，调用接口里面的方法来实现我们程序（抽象维度）。而实现维度为满足驱动接口的不同数据库的驱动。</p><p>当然这里实际的 JDBC 比桥接还多了一个设计模式，那就是抽象类获取实现类实例的时候，用到了工厂方法模式，获取实例交给工厂 DirverManager 来实现。</p><p><img src="https://xorex.space/image/168.jpg"></p><h3 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/da3jS3" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/193.jpg"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>对于桥接模型的实际实现代码，有两种不同的方式，之间的区别在于如何获取实现类的实例，分为为 组合 和 聚合。</p><p>组合实例：内部持有的实例是内部直接实例化出来（通过传入参数判断实例化对象）的，一旦组合类销毁，组合的实例会因为没有引用而销毁。</p><p>聚合实例：内部持有的实例是外部实例化（自己控制实例化对象）再传进来的，如果聚合类销毁，可能并不会影响聚合的实例，取决于外部是否还有引用指向此实例。</p><p>我们用会随着聚合类一起销毁的聚合方法来实现桥接吧。</p><p>下面实现手机抽象类和若干零部件的实现类之间的桥接。手机作为抽象类有小米子类，华为子类，桥接屏幕、和电池。屏幕又作为一个整体分为屏幕材质抽象类和分辨率抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bridging</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone RedmiK30s = <span class="keyword">new</span> MiPhone(<span class="keyword">new</span> B5000mah(), <span class="keyword">new</span> LCD(<span class="keyword">new</span> FHD()));</span><br><span class="line">        Phone HuaweiMate40Pro = <span class="keyword">new</span> HuaweiPhone(<span class="keyword">new</span> B4400mah(),<span class="keyword">new</span> OLED(<span class="keyword">new</span> QHD()));</span><br><span class="line">        RedmiK30s.LightUp();</span><br><span class="line">        HuaweiMate40Pro.LightUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类手机</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Bettary bettary;</span><br><span class="line">    <span class="keyword">protected</span> Screen screen;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(Bettary bettary, Screen screen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bettary = bettary;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">LightUp</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象子类小米手机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MiPhone</span><span class="params">(Bettary bettary, Screen screen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bettary, screen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//小米手机业务代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LightUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The Mi Phone is trying LightUp.&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> power = bettary.GetPower();</span><br><span class="line">        screen.returnLight(power);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象子类华为手机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HuaweiPhone</span><span class="params">(Bettary bettary, Screen screen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bettary, screen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 华为手机业务代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LightUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The HuaweiPhone is trying LightUp.&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> power = bettary.GetPower();</span><br><span class="line">        screen.returnLight(power);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独来说作为抽象类，和它的实现类 Resolution 一起就成了 Phone 的实现类了</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Resolution resolution;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Screen</span><span class="params">(Resolution resolution)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resolution = resolution;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">returnLight</span><span class="params">(<span class="keyword">int</span> power)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OLED</span> <span class="keyword">extends</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OLED</span><span class="params">(Resolution resolution)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resolution);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnLight</span><span class="params">(<span class="keyword">int</span> power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pixel = resolution.retrunPixel();</span><br><span class="line">        System.out.println(<span class="string">&quot;Using LCD Screen with &quot;</span>+pixel+<span class="string">&quot; pixels,powered by &quot;</span>+power+<span class="string">&quot;mah bettary&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCD</span> <span class="keyword">extends</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LCD</span><span class="params">(Resolution resolution)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resolution);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnLight</span><span class="params">(<span class="keyword">int</span> power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pixel = resolution.retrunPixel();</span><br><span class="line">        System.out.println(<span class="string">&quot;Using LCD Screen with &quot;</span>+pixel+<span class="string">&quot; pixels,powered by &quot;</span>+power+<span class="string">&quot;mah bettary&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Screen 的实现类接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Resolution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">retrunPixel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QHD</span> <span class="keyword">implements</span> <span class="title">Resolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">retrunPixel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2772</span>*<span class="number">1344</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FHD</span> <span class="keyword">implements</span>  <span class="title">Resolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">retrunPixel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2400</span>*<span class="number">1080</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Phone 的其中一个实现类接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bettary</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetPower</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B4400mah</span> <span class="keyword">implements</span> <span class="title">Bettary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B5000mah</span> <span class="keyword">implements</span> <span class="title">Bettary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="代理模式思维导图"><a href="#代理模式思维导图" class="headerlink" title="代理模式思维导图"></a>代理模式思维导图</h3><blockquote><p>很水的思维导图</p></blockquote><iframe src="https://www.xmind.net/embed/qsBZdT" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="静态代理阐述"><a href="#静态代理阐述" class="headerlink" title="静态代理阐述"></a>静态代理阐述</h3><blockquote><p>下面的描述是对以前学习代理的时候，留下来的笔记的改正版。</p></blockquote><p>当我们调用以前写过的类去完成一些任务的时候，发现这个类没有办法满足我们的需求，而需要添加一些功能。如果要去修改这些代码，不但不符合开闭原则，还有可能因为修改代码让其他调用这个类的地方出现错误。在调用者这里完成需求的话，又会让调用者变得极其复杂，不符合单一职责原则。这个时候，我们就可以再新建一个类，作为调用者的代理类，在这个类里面添加拓展功能的实现代码，并代替调用者调用目标类的方法。这样这个代理类就代替我们实现了所有的业务需求。</p><p>通过建立一个代理，来帮助我们和目标类交互并处理结果，拓展业务的代码交给代理类即可。</p><p>这就是静态代理： <strong>代理类 = 目标类 + 增强代码</strong></p><p><img src="https://xorex.space/image/169.jpg" alt="preview"></p><p>我们直接调用代理类即可，代理类会代替我们访问目标类并完善交互结果。</p><h3 id="UML-图-1"><a href="#UML-图-1" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/194.jpg"></p><h3 id="静态代理代码实现"><a href="#静态代理代码实现" class="headerlink" title="静态代理代码实现"></a>静态代理代码实现</h3><blockquote><p>这里模拟的情景为买手机，买手机我们可以直接去手机工厂购买，但是这对于普通消费者来说，还是太不友好了。于是这里引入一个代理类：手机商店，然消费者去手机商店买。而手机商店会去代替消费者去手机工厂购买，并且还提供了额外的一些服务，如咨询机型服务，砍价服务，赠送礼品服务等等。这里消费者就是调用者，而手机商店就是消费者的代理类，代替消费者和目标类（手机工厂）交互，并完善交互结果。</p></blockquote><p>手机工厂及其接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">GetPhone</span><span class="params">(<span class="keyword">int</span> Money,String Model)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiPhoneFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">GetPhone</span><span class="params">(<span class="keyword">int</span> Money, String Model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (Model)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Redmi K30s Ultra&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">2200</span>) <span class="keyword">return</span> <span class="string">&quot;Redmi K30s Ultra&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Mi11&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">3500</span>) <span class="keyword">return</span> <span class="string">&quot;Mi11&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span>  <span class="string">&quot;Redmi k40&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">1700</span>) <span class="keyword">return</span> <span class="string">&quot;Redmi K40&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiPhoneFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">GetPhone</span><span class="params">(<span class="keyword">int</span> Money, String Model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (Model)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei P40&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">3000</span>) <span class="keyword">return</span> <span class="string">&quot;Huawei P40&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei Mate40&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">4100</span>) <span class="keyword">return</span> <span class="string">&quot;Huawei Mate40&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span>  <span class="string">&quot;Huawei Mate40Pro&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(Money == <span class="number">5500</span>) <span class="keyword">return</span> <span class="string">&quot;Huawei Mate40Pro&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类手机商店，及其包括的一些额外服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneShopProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PhoneFactory pf;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> Coupon=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Consult</span><span class="params">(String Band,<span class="keyword">int</span> AllMoney)</span> </span>&#123;</span><br><span class="line">        String Phone=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(Band.equals(<span class="string">&quot;XiaoMi&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Coupon) AllMoney+=<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">this</span>.pf=<span class="keyword">new</span> MiPhoneFactory();</span><br><span class="line">            <span class="keyword">if</span>(AllMoney&gt;<span class="number">3999</span>) Phone=<span class="string">&quot;Mi11&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(AllMoney&gt;=<span class="number">2599</span>) Phone=<span class="string">&quot;Redmi K30s Ultra&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(AllMoney&gt;=<span class="number">1999</span>) Phone=<span class="string">&quot;Redmi k40&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> Phone=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(Phone==<span class="keyword">null</span>) System.out.println(<span class="string">&quot;请多带些钱来把!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(<span class="string">&quot;我们建议你购买：&quot;</span>+Phone);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(Band.equals(<span class="string">&quot;Huawei&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Coupon) AllMoney+=<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">this</span>.pf=<span class="keyword">new</span> HuaweiPhoneFactory();</span><br><span class="line">            <span class="keyword">if</span>(AllMoney&gt;<span class="number">5999</span>) Phone=<span class="string">&quot;Huawei Mate40Pro&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(AllMoney&gt;=<span class="number">4999</span>) Phone=<span class="string">&quot;Huawei Mate40&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(AllMoney&gt;=<span class="number">3999</span>) Phone=<span class="string">&quot;Huawei P40&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> Phone=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(Phone==<span class="keyword">null</span>) System.out.println(<span class="string">&quot;钱不够呢，请多带些钱来把!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(<span class="string">&quot;我们建议你购买：&quot;</span>+Phone);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这里没有你想要的手机呢&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Bargain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Coupon=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们这已经是成本价了，赔钱给你便宜 100 块吧。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Gift</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;充电宝，贴膜，手机壳，耳机，电饭煲&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BuyPhone</span><span class="params">(String PhoneName)</span> </span>&#123;</span><br><span class="line">        String Phone=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (PhoneName) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Mi11&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">3500</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Redmi K30s Ultra&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">2200</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Redmi k40&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">1700</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei P40&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">3000</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei Mate40&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">4000</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Huawei Mate40Pro&quot;</span> -&gt; &#123;</span><br><span class="line">                Phone = pf.GetPhone(<span class="number">5000</span>, PhoneName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Phone==<span class="keyword">null</span>) System.out.println(<span class="string">&quot;购买失败，型号错误&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">&quot;购买成功，&quot;</span>+Phone+<span class="string">&quot; 礼品：&quot;</span>+Gift());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>购买手机的实际消费者（被代理类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyPhone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PhoneShopProxy shop1=<span class="keyword">new</span> PhoneShopProxy();</span><br><span class="line">        String Phone1=shop1.Consult(<span class="string">&quot;XiaoMi&quot;</span>, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">if</span>(Phone1!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            shop1.Bargain();</span><br><span class="line">            shop1.BuyPhone(Phone1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        PhoneShopProxy shop2=<span class="keyword">new</span> PhoneShopProxy();</span><br><span class="line">        String Phone2=shop2.Consult(<span class="string">&quot;Huawei&quot;</span>, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">if</span>(Phone2!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            shop2.Bargain();</span><br><span class="line">            shop2.BuyPhone(Phone2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们建议你购买：Redmi k40</span><br><span class="line">我们这已经是成本价了，赔钱给你便宜 100 块吧。</span><br><span class="line">购买成功，手机: Redmi K40 礼品：充电宝，贴膜，手机壳，耳机，电饭煲</span><br><span class="line"></span><br><span class="line">钱不够呢，请多带些钱来把!</span><br></pre></td></tr></table></figure><h3 id="动态代理阐述"><a href="#动态代理阐述" class="headerlink" title="动态代理阐述"></a>动态代理阐述</h3><p>前面说类静态代理，说是静态代理是因为这些过程在运行的时候都是不变的，编译生成 <code>.class</code> 文件是在 JVM <strong>运行之前</strong>完成的。但是动态代理的代理类，是在 JVM <strong>运行中</strong>生成的 <code>.class</code> 的。</p><p>动态代理有什么好处吗，为什么在 JVM 运行中生成有什么用啊？</p><p>当然有用，它最大的用处就是在运行中生成。在静态代理中，如果我们需要对大量的目标类进行编写增强代码相似的代理类来代替消费者访问，重复的工作就太多了。于是我们想要在程序运行的时候，根据实际所对应的目标类能自动生成消费者需要的代理类，我们只用写一次代理类模板，就能直接访问并完善所有的目标类，那就太方便了。想到动态代理可以在程序运行中生成代理类，这不就是我们想要的嘛，写一个代理类模板，运行的时候依次生成所有访问目标类的代理类，这样以后修改增强代码只需要在代理类模板里修改即可。</p><p>看下图，这里静态代理和动态代理最大的区别就是多了一个中间处理方法 invoke() ，这个invoke() 里面就是用来写增强代码的地方，里面对目标类的各种交互利用反射来完成。只需要将目标类传进代理生成器，就能利用反射生成一个访问目标类的代理类，最后只要操作这个生成的代理类代替我们和目标类交互即可。修改代码只修改 invoke()</p><p><img src="https://xorex.space/image/170.jpg" alt="preview"></p><p>为了能生成代理类，就需要有模板 <code>InvocationHandler.invoke()</code> ，这个是我们自己通过重写实现的，然后需要一个代理类生成器：<code>Proxy.newProxyInstance()</code> ，最后，只需要将模板和数据塞入代理类生成器，就能量产代理类了。</p><h3 id="动态代理代码实现"><a href="#动态代理代码实现" class="headerlink" title="动态代理代码实现"></a>动态代理代码实现</h3><p>这里将不同接口： PhoneFactory、LapTopFactory 作为目标类（也是只有动态代理才可以使用的），通过动态代理来生成代理类，供代替消费者买手机。</p><p>产品的不同接口和实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetPhone</span><span class="params">()</span></span>;</span><br><span class="line">&#125; <span class="comment">// 接口一</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiPhoneFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产成功：小米手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LapTopFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetLapTop</span><span class="params">()</span></span>;</span><br><span class="line">&#125; <span class="comment">// 接口二</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiLapTopFactory</span> <span class="keyword">implements</span> <span class="title">LapTopFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetLapTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产成功：小米笔记本&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成代理类的 InvocationHandler 模板，以及生成方法 Proxy.newProxyInstance() 这里将实现模板和调用生成方法两个集成到了同一个类中。</p><p>具体的代码解释可以看以前学习反射的时候写的动态代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=target;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),<span class="keyword">this</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在前往工厂购买产品&quot;</span>);</span><br><span class="line">            result=method.invoke(<span class="keyword">this</span>.target, args);</span><br><span class="line">            System.out.println(<span class="string">&quot;正在将产品运往商店&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用者使用代理类来和 target 交互，这里一定要注意交互不同的 target 的时候，如果使用写法一就需要声明不同的 DynamicProxy 啊！理由看上面的代码注释。如果想要节省资源就要用写法二。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MiPhoneFactory pf=<span class="keyword">new</span> MiPhoneFactory();</span><br><span class="line">        MiLapTopFactory lf=<span class="keyword">new</span> MiLapTopFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写法一：</span></span><br><span class="line">        DynamicProxy dp1=<span class="keyword">new</span> DynamicProxy();</span><br><span class="line">        DynamicProxy dp2=<span class="keyword">new</span> DynamicProxy();</span><br><span class="line">        PhoneFactory phoneproxy=(PhoneFactory) dp1.getProxy(pf);</span><br><span class="line">        LapTopFactory laptopfactory=(LapTopFactory) dp2.getProxy(lf);</span><br><span class="line">        phoneproxy.GetPhone();</span><br><span class="line">        System.out.println();</span><br><span class="line">        laptopfactory.GetLapTop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写法二：</span></span><br><span class="line">        DynamicProxy dp=<span class="keyword">new</span> DynamicProxy();</span><br><span class="line">        PhoneFactory phoneproxy=(PhoneFactory) dp.getProxy(pf);</span><br><span class="line">        phoneproxy.GetPhone();</span><br><span class="line">        System.out.println();</span><br><span class="line">        LapTopFactory laptopfactory=(LapTopFactory) dp.getProxy(lf);</span><br><span class="line">        laptopfactory.GetLapTop();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正在前往工厂购买产品</span><br><span class="line">生产成功：小米手机</span><br><span class="line">正在将产品运往商店</span><br><span class="line"></span><br><span class="line">正在前往工厂购买产品</span><br><span class="line">生产成功：小米笔记本</span><br><span class="line">正在将产品运往商店</span><br></pre></td></tr></table></figure><hr><p>记录一个小错误：</p><p>因为：在用 Proxy.newInstaceProxy() 获取代理类的时候，传入的 this 为本 DynamicProxy 实例。本实例的属性 target 的内存地址是固定的，只能保存一个 target。所以生成的代理类调用的目标类 target 的时候，是一个 DynamicProxy 对应一个 target 的。<strong>不同的</strong>目标类<strong>同时</strong>使用需要声明不同的 DynamicProxy，不同的目标类依次使用只需要声明一个 DynamicProxy。</p><p>下面表示用一个 DynamicProxy 生成器生成访问不同目标类的两种代理类，并同时使用的错误：（没错我就是刚犯！）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MiPhoneFactory pf=<span class="keyword">new</span> MiPhoneFactory();</span><br><span class="line">        MiLapTopFactory lf=<span class="keyword">new</span> MiLapTopFactory();</span><br><span class="line"></span><br><span class="line">        DynamicProxy dp=<span class="keyword">new</span> DynamicProxy();</span><br><span class="line">        PhoneFactory phoneproxy=(PhoneFactory) dp.getProxy(pf); <span class="comment">// 在 target 属性内存中写入 pf</span></span><br><span class="line">        LapTopFactory laptopfactory=(LapTopFactory) dp.getProxy(lf); <span class="comment">// 在 target 属性内存中 覆盖 pf 写入 lf</span></span><br><span class="line">        phoneproxy.GetPhone(); <span class="comment">// 此时 dp 实例中 target 属性的内存中的实例为 lf，但 lf 为 LapTopFactory 没有 GEtPhone() 方法。</span></span><br><span class="line">        <span class="comment">// 就会抛出 object is not an instance of declaring class 这样的错误，毕竟 lf 的确不是 PhoneFactory 的实例，没有 GetPhone() 方法。</span></span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        laptopfactory.GetLapTop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>装饰器模式故名思意，是对一个类进行装饰（增加小功能）。而装饰有一个特点，那就是装饰完一个物品之后，得到的结果还是该物品，可以像原来一样使用。</p><p>装饰器模式在 Java IO 的 FilterInputStream 和 FileterOutPutStream 中有使用过。请先阅读下面博文了解： <a href="https://xorex.space/2021/02/21/6b113700fd3d/#Filter-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">Filter 模式</a></p><p>以 FilterInputStream 为例，这个装饰器父类是 InputStream 的子类，也就是说，对于每一种具体的不同装饰子类，也同样是 InputSream 的子类。而在父类 FilterInputSream 中，有一个叫 in 的属性类型为 InputStream，就是专门用来保存被装饰物。</p><p>然后重写 InputSream 留下的 read() 方法，重写主要是添加一些装饰的功能，比如对输入进来的数据进行 base64 解码。那么就可以用被装饰物 InputStream 本来的 read() 方法先读入数据，然后手写 base64 解码代码，最后输出到 byte[] 数组中。</p><p>装饰类像是将被装饰类包裹起来（被装饰类作为装饰类内部的一个实例），从而完成对原有功能的完善。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ol><li>抽象构件 (InputSream) 角色：定义一个抽象接口以规范准备接收附加功能的对象。</li><li>具体构件 (FileInputSream extends InputSream)角色：实现抽象构件，通过装饰角色为其添加一些功能。</li><li>抽象装饰 (FilterInputSream extends InputStream) 角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰 (Base64InputStream extends FilterInputSream) 角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的功能。</li></ol><h3 id="UML-图-2"><a href="#UML-图-2" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/195.jpg"></p><h3 id="装饰器、桥接之间的异同"><a href="#装饰器、桥接之间的异同" class="headerlink" title="装饰器、桥接之间的异同"></a>装饰器、桥接之间的异同</h3><p>到了这里应该能很清楚的明白和桥接模式之间的异同点了。</p><p>相同点：</p><ol><li>两者都是为了解决因为多个元素排列组合导致的子类爆炸的问题。</li><li>两者解决方法都是通过一个维度持有另外一个维度的实例，来实现功能的组合的。</li></ol><p>不同点：</p><ol><li>桥接模式的实现是高等级类持有低等级类的实例，来实现低等级功能附加到高等级身上。</li><li>装饰器模式是低等级装饰者持有高等级被装饰者，装饰者加上内部的被装饰者作为一个整体又是一个被装饰者，就像月饼包装一样，一层套一层，是包装包含月饼。</li></ol><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>除了 Java 的 IO 实现了装饰器模式，我们自己也可以自己实现装饰器模式，就拿饼来举个例子，我们有很多饼，河南鸡蛋灌饼，山东杂粮煎饼等等。同时可以给这些并加很多配料（装饰），如辣条，鸡蛋，香肠，等等。我们就可以用修饰器模式解决这些组合的问题。</p><p>首先写我们想要装饰的东西，饼：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Pancake</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makePancake</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getPancake</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HenanPancake</span> <span class="keyword">implements</span> <span class="title">Pancake</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始制作鸡蛋灌饼&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;煎好白面饼了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加鸡蛋&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加生菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在打包鸡蛋灌饼&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请拿走鸡蛋灌饼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShanDongPancake</span> <span class="keyword">implements</span> <span class="title">Pancake</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始制作杂粮煎饼&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;煎好杂粮饼了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加鸡蛋&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加生菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在打包杂粮煎饼&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请拿走杂粮煎饼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写装饰饼的各种配料类：<br>写一个父类的原因除了复用代码以外，还有封装 Pancake，只暴漏指定的方法给装饰器使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Things</span> <span class="keyword">implements</span> <span class="title">Pancake</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pancake pancake;</span><br><span class="line"></span><br><span class="line">    Things(Pancake pancake) &#123;</span><br><span class="line">        <span class="keyword">this</span>.pancake=pancake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makePancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pancake.makePancake();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pancake.addThings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPancake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pancake.getPancake();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span> <span class="keyword">extends</span> <span class="title">Things</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Egg(Pancake pancake) &#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addThings();</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加鸡蛋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Suasage</span> <span class="keyword">extends</span> <span class="title">Things</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Suasage(Pancake pancake) &#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addThings();</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加香肠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spicy</span> <span class="keyword">extends</span> <span class="title">Things</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Spicy(Pancake pancake) &#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addThings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addThings();</span><br><span class="line">        System.out.println(<span class="string">&quot;正在添加辣条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后消费者就可以随便添加想要的配料了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两个蛋，一包辣条，一根香肠的河南鸡蛋灌饼</span></span><br><span class="line">        Pancake Henan=<span class="keyword">new</span> HenanPancake();</span><br><span class="line">        Pancake eggHenan=<span class="keyword">new</span> Egg(Henan);</span><br><span class="line">        Pancake spicyEggHenan=<span class="keyword">new</span> Spicy(eggHenan);</span><br><span class="line">        Pancake suasageSpicyEggHenan=<span class="keyword">new</span> Suasage(spicyEggHenan);</span><br><span class="line">        suasageSpicyEggHenan.makePancake();</span><br><span class="line">        suasageSpicyEggHenan.addThings();</span><br><span class="line">        suasageSpicyEggHenan.getPancake();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 两包辣条，一根肠的山东杂粮煎饼</span></span><br><span class="line">        Pancake Shandong=<span class="keyword">new</span> Spicy(<span class="keyword">new</span> Spicy(<span class="keyword">new</span> Suasage(<span class="keyword">new</span> ShanDongPancake())));</span><br><span class="line">        Shandong.makePancake();</span><br><span class="line">        Shandong.addThings();</span><br><span class="line">        Shandong.getPancake();</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">开始制作鸡蛋灌饼</span><br><span class="line">煎好白面饼了</span><br><span class="line">正在添加鸡蛋</span><br><span class="line">正在添加生菜</span><br><span class="line">正在添加鸡蛋</span><br><span class="line">正在添加辣条</span><br><span class="line">正在添加香肠</span><br><span class="line">正在打包鸡蛋灌饼</span><br><span class="line">请拿走鸡蛋灌饼</span><br><span class="line"></span><br><span class="line">开始制作杂粮煎饼</span><br><span class="line">煎好杂粮饼了</span><br><span class="line">正在添加鸡蛋</span><br><span class="line">正在添加生菜</span><br><span class="line">正在添加香肠</span><br><span class="line">正在添加辣条</span><br><span class="line">正在添加辣条</span><br><span class="line">正在打包杂粮煎饼</span><br><span class="line">请拿走杂粮煎饼</span><br></pre></td></tr></table></figure><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>外观模式其实就是将操作者和被操作对象之间，增加一个中间类，作为被操作对象的外观，来方便操作者调用。</p><p>生活中最明显的例子就是小爱捷径，对于拥有上百个智能家居的人来说，对于一个情景的控制就会很麻烦，比如一起床就需要控制拉开窗帘、打开灯、打开电饭煲热粥、打开热水器准备洗澡、略微提高空调的温度，查询今天的天气，打开语音播报的功能。</p><p>对于这种一个行为需要和大量类进行交互的情况，为了简化代码，可以将这些大量类的多个交互简化成一个交互。getUp() 一个方法帮我们完成这些复杂的类交互。对于调用者只需要调用这一个方法，就能完成所有的事情。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p><ol><li>就是大大简化了代码，简化了可以统一封装的大量类交互，隐藏了细节。</li><li>降低了耦合度，符合最小认知原则。</li></ol><p>缺点：</p><ol><li>一旦新增加操作就需要增加外观类的方法，不符合开闭原则。</li><li>因为外观类的引入增加了项目的复杂度。</li></ol><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>享元模式其实就对象实例的缓存机制，对于一些可以重复利用的实例，我们可以将其加入到对应生成工厂的缓存里面，来提高重复利用程度。</p><p>对于比较简单的一些享元，比如 String，Byte 这些所有内容都不会变的，那么就直接去缓存查找，是否有已经存在的实例，如果有，那么直接返回，如果没有，创建一个新的实例并添加到缓存中。比如 String 对于一个字符串的不同引用来说，都会指向一个内存地址，这就是因为缓存返回的都是同一个一样的对象。而 Byte 也同样是，使用静态方法获取实例的时候，内部就使用了缓存，来共享相同的已存在实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Byte <span class="title">valueOf</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">return</span> ByteCache.cache[(<span class="keyword">int</span>)b + offset];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对于一些比较复杂的享元，那就是一部分可以共享，而有一些实际操作是不一样的。比如线程池里面的线程实例是可以共享的，但是运行时候需要的 Runnable 实例是非共享的（自定义的运行内容），JDBC 连接池里面和数据库保持连接的 Connection 是可以共享的（数据库地址，账号，密码不变），而执行的 Statement 是不可以共享的。</p><p>所以你可以发现，写 Java 的程序员就很好的意识到了这些，特意的将可以资源消耗大，但是需要频繁使用的实例拆分开来，拆分为可共享部分和不可共享部分。可共享部分利用线程池、连接池来进行重复利用的资源优化，不可共享部分则（Runnable，Statement）通过外部构建并传入，或者传入参数内部构建，来组合成完整的功能。</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们来写一个简单的享元模式的图书馆吧，而图书馆里面的图书就是可以共享的资源：</p><p>图书实例（其实不嫌麻烦可以写成接口，然后搞不同种类的书，如杂志、小说、漫画等等，不过这样的话就需要为 Book 单独建立一个生成工厂了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Book(String name) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;购买图书：&quot;</span>+name);</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Look</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在阅读：&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用来管理图书实例的图书馆：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,List&lt;Book&gt;&gt; books=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Book book;</span><br><span class="line">        <span class="keyword">if</span>(books.containsKey(name)) &#123;</span><br><span class="line">            List&lt;Book&gt; Lbook=books.get(name);</span><br><span class="line">            <span class="keyword">if</span>(Lbook.isEmpty()) &#123;</span><br><span class="line">                book=<span class="keyword">new</span> Book(name);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                book=Lbook.get(<span class="number">0</span>);</span><br><span class="line">                Lbook.remove(book);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            books.put(name,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            book=<span class="keyword">new</span> Book(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;借阅图书：&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;归还图书：&quot;</span>+book.getName());</span><br><span class="line">        books.get(book.getName()).add(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读者开始借书读书：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Library lib=<span class="keyword">new</span> Library();</span><br><span class="line"></span><br><span class="line">        Book book1=lib.getBook(<span class="string">&quot;CSAPP&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;图书编号：&quot;</span>+book1);</span><br><span class="line">        book1.Look();</span><br><span class="line">        lib.backBook(book1);</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Book book2=lib.getBook(<span class="string">&quot;CSAPP&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;图书编号：&quot;</span>+book2);</span><br><span class="line">        book2.Look();</span><br><span class="line">        lib.backBook(book2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后借阅结果，发现两次借阅获得的书是同一本（同一个内存地址中的实例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">购买图书：CSAPP</span><br><span class="line">借阅图书：CSAPP</span><br><span class="line">图书编号：Java.VScodeProject.Book@1fe20588</span><br><span class="line">正在阅读：CSAPP</span><br><span class="line">归还图书：CSAPP</span><br><span class="line"></span><br><span class="line">借阅图书：CSAPP</span><br><span class="line">图书编号：Java.VScodeProject.Book@1fe20588</span><br><span class="line">正在阅读：CSAPP</span><br><span class="line">归还图书：CSAPP</span><br></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>组合模式（又叫整体-部分模式）：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p><p>举个例子，比如文件夹和文件的关系，文件夹就是由子文件夹和文件构成的，文件夹和文件组合在一起变成整体，文件夹和文件都可以作为部分，而且之间可以组成树形的结构模型。</p><p><img src="https://xorex.space/image/178.jpg"></p><p>而组合模式的核心就是将这些相似的东西：文件和文件夹当作一个东西处理，它们都是 File 类的实例，里面同时包含了各自的方法，使用的时候需要鉴别方法是否对当前对象可以使用。</p><p>比如一个文件的 File 类，使用 listFile() 返回的就是 null 空引用，所以缺点就是不太安全，但是优点就是方便操作，管他是文件还是文件夹，都是 File 的实例。</p><h3 id="UML-图-3"><a href="#UML-图-3" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/196.jpg"></p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>定义统一的一个接口，接口包含所有整体和部分的方法。然后整体类和部分类分别实现接口的代码，要求整体类的构造方法可以或者 add() 方法可以传入类型为接口类型（这样整体类对象和部分类对象都可以作为它的一部分）</p><p>比如文件夹系统，分为文件夹类（整体类）和文件类（部分类），一起实现同一个接口 File，这个接口定义里文件操作和文件夹操作的所有方法。而构造文件夹类的实例的时候，可以传入文件夹实例和文件实例，作为当前文件夹的内部部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">具体代码就不写了，参考 Java 里面的 File 类就行了。</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote><p>哇哇哇，结构型模式笔记终于写完了，写到了后面连思维导图都不想搞了，主要是拖得时间太长了，里面内容也很多，而且思维导图对于这种类型的知识点来说没啥用。但是想想看自己学的时间还是太长了，所以要不停的提高学习效率啊！不然后端开发的知识点这么多，这样学下去怕不是得学到毕业……</p></blockquote><p>呼~ 长呼一口气，准备开始行为型模式的学习吧，加油啊！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;&lt;h3 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="结构型" scheme="https://xorex.space/tags/%E7%BB%93%E6%9E%84%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>创建型模式笔记</title>
    <link href="https://xorex.space/2021/03/09/d965ea17830f/"/>
    <id>https://xorex.space/2021/03/09/d965ea17830f/</id>
    <published>2021-03-09T11:49:46.000Z</published>
    <updated>2021-03-18T11:58:56.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>创建型模式的核心就是通过将创建对象和使用对象分离开来，去关注于怎样去创建一个对象。</p></blockquote><h2 id="单列模式"><a href="#单列模式" class="headerlink" title="单列模式"></a>单列模式</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/8cxt5R" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/187.jpg"></p><h3 id="懒汉式单列实现代码"><a href="#懒汉式单列实现代码" class="headerlink" title="懒汉式单列实现代码"></a>懒汉式单列实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyXorex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazyXorex instance=<span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// instance 一定要通过 volatile 即使写入内存中！</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyXorex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法也要被锁住，方式多创建了实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazyXorex <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">            instance=<span class="keyword">new</span> LazyXorex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式单列实现代码"><a href="#饿汉式单列实现代码" class="headerlink" title="饿汉式单列实现代码"></a>饿汉式单列实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HungryXorex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungryXorex instance=<span class="keyword">new</span> HungryXorex();</span><br><span class="line">    <span class="comment">// 在类被加载到内存的时候 instance 就拥有了实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungryXorex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungryXorex <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/TkqvpR" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-1"><a href="#UML-图-1" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/188.jpg"></p><h3 id="实现可克隆类"><a href="#实现可克隆类" class="headerlink" title="实现可克隆类"></a>实现可克隆类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tempest</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String Xorex=<span class="string">&quot;Xorex&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Tempest <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Tempest)<span class="keyword">super</span>.clone(); <span class="comment">// 调用父类 Object 的 clone() 方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><h3 id="思维导图-2"><a href="#思维导图-2" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/krk9YR" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-2"><a href="#UML-图-2" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/189.jpg"></p><h3 id="实现内部封装的简单工厂"><a href="#实现内部封装的简单工厂" class="headerlink" title="实现内部封装的简单工厂"></a>实现内部封装的简单工厂</h3><blockquote><p>下面代码例子是使用简单工厂的方式获取不同的 Waifu 产品。步骤是通过相同的工厂 Factory 的静态方法 makeWaifu 来获取产品，waifu 产品的具体创建交给工厂的 makeWaifu 来决定。至于返回的是哪一个具体的 Waifu，我们并不需要关心，只需要用统一接口 Waifu 来接收并操作即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleWaifuFactory.Waifu Yukino=SimpleWaifuFactory.Factory.makeWaifu(SimpleWaifuFactory.Yukinoshita_Yukino);</span><br><span class="line">        SimpleWaifuFactory.Waifu Asuna=SimpleWaifuFactory.Factory.makeWaifu(SimpleWaifuFactory.Yuuki_Asuna);</span><br><span class="line">        Yukino.selfIntroduction();</span><br><span class="line">        Asuna.selfIntroduction();</span><br><span class="line">    &#125; <span class="comment">// 外部调用简单工厂来获取对应的实例，然后调用里面的方法。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个单独的 public 工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWaifuFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Yukinoshita_Yukino = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Yuuki_Asuna = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 定义工厂接收的参数标准</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span></span>;</span><br><span class="line">    &#125; <span class="comment">// 定义本工厂生产的产品的统一模板，让外部持有接口使用实例。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Yukino</span> <span class="keyword">implements</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Ya~hello,There is Yukinoshita Yukino!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// 产品 Yukino 实例定义类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Asuna</span> <span class="keyword">implements</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hi,I am Yuuki Asnua!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// 产品 Asuna 实例定义类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Waifu <span class="title">makeWaifu</span><span class="params">(<span class="keyword">int</span> waifuID)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (waifuID) &#123;</span><br><span class="line">                <span class="keyword">case</span> Yukinoshita_Yukino:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Yukino();</span><br><span class="line">                <span class="keyword">case</span> Yuuki_Asuna:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Asuna();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// 生成实例的工厂</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现外部散开工厂"><a href="#实现外部散开工厂" class="headerlink" title="实现外部散开工厂"></a>实现外部散开工厂</h3><p>这里代码需要注意，所有的工厂相关类都需要写在一个包里面，保证非 public 类型（不对外开放的）产品类只能被包内的工厂访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Waifu Yukino=SimpleWaifuFactory.makeWaifu(SimpleWaifuFactory.Yukinoshita_Yukino);</span><br><span class="line">        Waifu Asuna=SimpleWaifuFactory.makeWaifu(SimpleWaifuFactory.Yuuki_Asuna);</span><br><span class="line">        Yukino.selfIntroduction();</span><br><span class="line">        Asuna.selfIntroduction();</span><br><span class="line">    &#125; <span class="comment">// 外部调用简单工厂来获取对应的实例，然后调用里面的方法。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个单独的 public 工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWaifuFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Yukinoshita_Yukino = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Yuuki_Asuna = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 定义工厂接收的参数标</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Waifu <span class="title">makeWaifu</span><span class="params">(<span class="keyword">int</span> waifuID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (waifuID) &#123;</span><br><span class="line">            <span class="keyword">case</span> Yukinoshita_Yukino:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Yukino();</span><br><span class="line">            <span class="keyword">case</span> Yuuki_Asuna:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Asuna();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="comment">// 生成实例的工厂</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span></span>;</span><br><span class="line">&#125; <span class="comment">// 定义本工厂生产的产品的统一模板，让外部持有接口使用实例。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yukino</span> <span class="keyword">implements</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ya~hello,There is Yukinoshita Yukino!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 产品 Yukino 实例定义类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Asuna</span> <span class="keyword">implements</span> <span class="title">Waifu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfIntroduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hi,I am Yuuki Asnua!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 产品 Asuna 实例定义类</span></span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><h3 id="思维导图-3"><a href="#思维导图-3" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/CKNFh6" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-3"><a href="#UML-图-3" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/190.jpg"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>主要是从简单工厂模式的一个工厂对应不同产品到工厂模式的不同工厂对应不同产品，来实现开闭原则。一旦有产品增加，可以通过增加工厂的方式来实现需求，不需要像简单工厂那样去修改原有的工厂代码。但简单工厂的代码修改可以限制在增加生产方法上面，其实也很好维护。</p></blockquote><blockquote><p>下面的代码通过不同的电视工厂来获取不同的电视产品，比如通过小米电视工厂获取小米电视，华为电视工厂获取华为电视，比简单工厂模式多了一个工厂接口，因此可以建立不同的工厂满足种类繁多的产品的创建，一类工厂满足一类产品。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TVFactroy MiF=<span class="keyword">new</span> MiTVFactory();</span><br><span class="line">        TV MiTv=MiF.getTV();</span><br><span class="line">        MiTv.Show();</span><br><span class="line"></span><br><span class="line">        TVFactroy HuaweiF=<span class="keyword">new</span> HuaweiTVFactory();</span><br><span class="line">        TV HuaweiTv=HuaweiF.getTV();</span><br><span class="line">        HuaweiTv.Show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相较于简单工厂模式增加了一个工厂接口，通过扩展工厂类的方式代替修改工厂代码</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TVFactroy</span> </span>&#123;</span><br><span class="line">    <span class="function">TV <span class="title">getTV</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同的产品对应不同的工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiTVFactory</span> <span class="keyword">implements</span> <span class="title">TVFactroy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">getTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MiTV4s70();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiTVFactory</span> <span class="keyword">implements</span> <span class="title">TVFactroy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">getTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiTV65();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiTV4s70</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am MiTV4s70&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiTV65</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am HuaweiTV65&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="思维导图-4"><a href="#思维导图-4" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/BeTDYu" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-4"><a href="#UML-图-4" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/191.jpg"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>下面的代码通过建立小米族产品超级工厂和华为族产品超级工厂实现超级抽象工厂接口，这些超级工厂生产不同级产品。如通过抽象工厂接口 SuperFactory 操作小米工厂 MiFactory 的不同生产方法，如 getTV() 获取实现了抽象产品 TV 的实际产品 MiTV，用 getPhone() 获取实现了抽象产品 Phone 的实际产品 Mi11。不同工厂的同级产品，实现的抽象产品接口都是一样的。比如小米工厂生产的 Mi11 产品和华为工厂生产的 HUAWEIMate40Pro 产品同级，都是实现了抽象产品接口 Phone。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//展示消费者通过超级工厂获取产品的实例</span></span><br><span class="line">        System.out.println(<span class="string">&quot;I am a Mi-funs&quot;</span>);</span><br><span class="line">        SuperFactory Mi=<span class="keyword">new</span> MiFactory();</span><br><span class="line">        Phone MiPhone=Mi.getPhone();</span><br><span class="line">        TV MiTV=Mi.getTV();</span><br><span class="line">        MiPhone.call();</span><br><span class="line">        MiTV.watchTV();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;I am a HUAWEI-funs&quot;</span>);</span><br><span class="line">        SuperFactory HUAWEI=<span class="keyword">new</span> HUAWEIFactory();</span><br><span class="line">        Phone HUAWEIPhone=HUAWEI.getPhone();</span><br><span class="line">        TV HUAWEITV=HUAWEI.getTV();</span><br><span class="line">        HUAWEIPhone.call();</span><br><span class="line">        HUAWEITV.watchTV();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义超级工厂的同族不同级的产品生产</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SuperFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">getPhone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">TV <span class="title">getTV</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小米工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiFactory</span> <span class="keyword">implements</span> <span class="title">SuperFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Mi11();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">getTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MiTV4s65();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 华为工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HUAWEIFactory</span> <span class="keyword">implements</span> <span class="title">SuperFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HUAWEIMate40Pro();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">getTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HAUWEIX70();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义手机产品统一功能</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义电视产品统一功能</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">watchTV</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mi11</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am calling by Mi11&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HUAWEIMate40Pro</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am calling by HUAWEIMate40Pro&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiTV4s65</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am watching MiTV4s65&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HAUWEIX70</span> <span class="keyword">implements</span>  <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am watching HUAWEIX70!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h3 id="思维导图-5"><a href="#思维导图-5" class="headerlink" title="思维导图"></a>思维导图</h3><iframe src="https://www.xmind.net/embed/trTwtE" width="800px" height="540px" frameborder="0" scrolling="no"></iframe><h3 id="UML-图-5"><a href="#UML-图-5" class="headerlink" title="UML 图"></a>UML 图</h3><p><img src="https://xorex.space/192.jpg"></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>下面代码通过将一个复杂产品（手机）的建造交给不同的建造者（小米建造、华为建造）得到不同的产品（小米手机，华为手机），而选择建造者的指挥建造者的是手机生产的流水线（指挥者），选择小米建造者生产小米手机，同理获得华为手机。</p></blockquote><ul><li><p>消费者 Foxconn：告诉指挥者（流水线）ConstructStream 需要什么手机，然后等待流水线返回手机 Phone 的实例。</p></li><li><p>指挥者 ConstructStream：根据消费者的需求（传入的手机名称），选择合适的建造者（创建对应实例 MiBuilder HUAWEIBuilder），然后指挥建造者去做自己可以完成的每一道工序（installCPU()…），完成所有步骤之后，让建造者返回手机给自己（getPhone()）。</p></li><li><p>建造者 Builder：实现了建造手机的所有步骤，不同的建造者用于建造不同的手机，MiBuilder 只能完成 Mi11 的建造。</p></li><li><p>手机 Phone：单个产品，创建非常复杂，有很多初始化参数，所以交给流水线处理。</p></li></ul><p>建造者关心的是如何一步一步建造 <strong>一个</strong> 比较复杂的产品（通过建造者完成大量步骤获取产品），而工厂方法关心的是以怎样的方式获取一类产品（比如通过超级工厂获取不同级产品）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.xorex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foxconn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 来富士康拿手机</span></span><br><span class="line">        ConstructStream ConMiPhone=<span class="keyword">new</span> ConstructStream(<span class="string">&quot;Mi11&quot;</span>);</span><br><span class="line">        Phone Mi=ConMiPhone.StartConstruct();</span><br><span class="line">        ConstructStream ConHUAWEIPhone=<span class="keyword">new</span> ConstructStream(<span class="string">&quot;HUAWEIMate40Pro&quot;</span>);</span><br><span class="line">        Phone HUAWEI=ConHUAWEIPhone.StartConstruct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指挥手机生产的流水线（指挥者 Director）,从这里获取手机实例</span></span><br><span class="line"><span class="comment">// 不需要关心如何指挥手机的具体建造者，让流水线（指挥者）管理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstructStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String PhoneName;</span><br><span class="line">    <span class="keyword">private</span> Builder worker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstructStream</span><span class="params">(String phoneName)</span> </span>&#123;</span><br><span class="line">        PhoneName = phoneName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">StartConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(PhoneName==<span class="string">&quot;Mi11&quot;</span>) worker=<span class="keyword">new</span> MiBuilder(PhoneName);</span><br><span class="line">        <span class="keyword">if</span>(PhoneName==<span class="string">&quot;HUAWEIMate40Pro&quot;</span>) worker=<span class="keyword">new</span> HUAWEIBuilder(PhoneName);</span><br><span class="line"></span><br><span class="line">        worker.installCPU();</span><br><span class="line">        worker.installGPU();</span><br><span class="line">        worker.installRAM();</span><br><span class="line">        worker.installROM();</span><br><span class="line">        worker.installScreen();</span><br><span class="line">        worker.installBattery();</span><br><span class="line">        worker.installCamera();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> worker.getPhone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象建造者，定义建造者需要执行的步骤</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installCPU</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installGPU</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installRAM</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installROM</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installScreen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installBattery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installCamera</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Phone <span class="title">getPhone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现的具体建造者，不同建造者获取的产品不同</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Phone phone=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    MiBuilder(String PhoneName) &#123;</span><br><span class="line">        phone=<span class="keyword">new</span> Phone(PhoneName);</span><br><span class="line">        System.out.println(PhoneName+<span class="string">&quot; start making!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installCPU(<span class="string">&quot;SnapDragon 888&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Installed CPU : SnapDragon 888&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installGPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installGPU(<span class="string">&quot;Adreno 660&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install GPU : Adreno 660&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installRAM(<span class="string">&quot;LPDDR5&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install RAM : LPDDR5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installROM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installROM(<span class="string">&quot;UFS 3.1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install ROM : UFS 3.1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installScreen(<span class="string">&quot;OLED2k120HZ&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Screen : OLED2k120HZ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installBattery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installBettary(<span class="string">&quot;4600mah&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Battery : 4600mah&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installCarame(<span class="string">&quot;HMX&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Camera : HMX&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mi11 made Successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现的具体建造者，不同建造者获取的产品不同</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HUAWEIBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Phone phone=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    HUAWEIBuilder(String PhoneName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = <span class="keyword">new</span> Phone(PhoneName);</span><br><span class="line">        System.out.println(PhoneName+<span class="string">&quot; start making!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installCPU(<span class="string">&quot;Kirin9000&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install CPU Kirin9000&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installGPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installGPU(<span class="string">&quot;Mali-G78&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install GPU : Mali-G78&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installRAM(<span class="string">&quot;LPDDR5&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install RAM : LPDDR5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installROM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installROM(<span class="string">&quot;UFS3.1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install ROM : UFS3.1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installScreen(<span class="string">&quot;OLED1080P90HZ&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Screen : OLED1080P90HZ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installBattery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installBettary(<span class="string">&quot;4400mah&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Battery : 4400mah&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.installCarame(<span class="string">&quot;IMX700&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Install Camera : IMX700&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HUAWEIMate40Pro made Successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要获取的产品实例（流水线指挥不同的建造者生产不同的手机）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String Name=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String CPU=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String GPU=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String RAM=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String ROM=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String Screen=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String Bettary=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String Carame=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCPU</span><span class="params">(String CPU)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.CPU = CPU;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installGPU</span><span class="params">(String GPU)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.GPU = GPU;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installRAM</span><span class="params">(String RAM)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.RAM = RAM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installROM</span><span class="params">(String ROM)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ROM = ROM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installScreen</span><span class="params">(String screen)</span> </span>&#123;</span><br><span class="line">        Screen = screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installBettary</span><span class="params">(String bettary)</span> </span>&#123;</span><br><span class="line">        Bettary = bettary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installCarame</span><span class="params">(String carame)</span> </span>&#123;</span><br><span class="line">        Carame = carame;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;创建型模式的核心就是通过将创建对象和使用对象分离开来，去关注于怎样去创建一个对象。&lt;/p&gt;
&lt;/blockquot</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="创建型" scheme="https://xorex.space/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>笔记计划2.0</title>
    <link href="https://xorex.space/2021/03/09/f0796de4869b/"/>
    <id>https://xorex.space/2021/03/09/f0796de4869b/</id>
    <published>2021-03-09T11:45:19.000Z</published>
    <updated>2021-03-11T03:15:24.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于笔记记录的一点思考"><a href="#关于笔记记录的一点思考" class="headerlink" title="关于笔记记录的一点思考"></a>关于笔记记录的一点思考</h2><p>今天在记录创建型模式的时候发现这种需要大段文字描述的知识点并不适合使用思维导图，所以后面讲解设计模式具体的案例的时候，会重新回归笔记的方式，emmmm，或者说是，笔记+思维导图。</p><p>自己以前好像一直在滥用思维导图，现在想想思维导图应该是为了帮助自己更加清晰的梳理关系，归纳知识点，而不是一味的将所有的学习内容都用思维导图罗列表示出来。</p><p>所以应该两者一起使用，并再多学习一些 XMind 的模板，主要将思维导图作为关系展示图。而对于详细某些知识点的理解，应该还是要用文字和代码一起说明。</p><p>新的笔记应该聚焦于一些核心知识点的记录，而不是用来引导萌新的新手教程，尽可能写的简练而又全面。笔记的目的是为了自己以后遗忘了某块知识，需要查阅的时候，可以快速定位并快速提取出来需要的信息。</p><p>目前的打算是，对于一个全新的知识点，首先有一个概览笔记，主要是梳理所有内容的联系和一些基本名词的解释，然后再用若干篇小文章来分别阐述不同的具体知识。而对于一些类的方法的列出，或者命令的集合，还是使用思维导图比较合适归纳。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于笔记记录的一点思考&quot;&gt;&lt;a href=&quot;#关于笔记记录的一点思考&quot; class=&quot;headerlink&quot; title=&quot;关于笔记记录的一点思考&quot;&gt;&lt;/a&gt;关于笔记记录的一点思考&lt;/h2&gt;&lt;p&gt;今天在记录创建型模式的时候发现这种需要大段文字描述的知识点并不适合使</summary>
      
    
    
    
    <category term="阶段性总结" scheme="https://xorex.space/categories/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="笔记" scheme="https://xorex.space/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="规划" scheme="https://xorex.space/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>设计模式原则思维导图</title>
    <link href="https://xorex.space/2021/03/09/ebff1b4e77e7/"/>
    <id>https://xorex.space/2021/03/09/ebff1b4e77e7/</id>
    <published>2021-03-09T11:44:41.000Z</published>
    <updated>2021-03-11T08:49:45.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h2><p>一句话概括：</p><table><thead><tr><th>设计原则</th><th>一句话归纳</th><th>目的</th></tr></thead><tbody><tr><td>开闭原则</td><td>对扩展开放，对修改关闭</td><td>降低维护带来的新风险</td></tr><tr><td>依赖倒置原则</td><td>高层不应该依赖低层，要面向接口编程</td><td>更利于代码结构的升级扩展</td></tr><tr><td>单一职责原则</td><td>一个类只干一件事，实现类要单一</td><td>便于理解，提高代码的可读性</td></tr><tr><td>接口隔离原则</td><td>一个接口只干一件事，接口要精简单一</td><td>功能解耦，高聚合、低耦合</td></tr><tr><td>迪米特法则(最小认知原则)</td><td>不该知道的不要知道，一个类应该保持对其它对象最少的了解，降低耦合度</td><td>只和朋友交流，不和陌生人说话，减少代码臃肿</td></tr><tr><td>里氏替换原则</td><td>不要破坏继承体系，子类重写方法功能发生改变，不应该影响父类方法的含义</td><td>防止继承泛滥</td></tr><tr><td>合成复用原则</td><td>尽量使用组合或者聚合关系实现代码复用，少使用继承</td><td>降低代码耦合</td></tr></tbody></table><iframe src="https://www.xmind.net/embed/73pZXu" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式原则&quot;&gt;&lt;a href=&quot;#设计模式原则&quot; class=&quot;headerlink&quot; title=&quot;设计模式原则&quot;&gt;&lt;/a&gt;设计模式原则&lt;/h2&gt;&lt;p&gt;一句话概括：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设计原则&lt;/th&gt;
&lt;th&gt;一句话归</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="设计模式" scheme="https://xorex.space/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>中文编码与开发</title>
    <link href="https://xorex.space/2021/03/07/b688fb992b28/"/>
    <id>https://xorex.space/2021/03/07/b688fb992b28/</id>
    <published>2021-03-07T09:42:27.000Z</published>
    <updated>2021-03-08T12:59:51.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>其实原本是想写一个 Java 脚本来帮我处理下载视频的名字更改，但是因为编码的问题让我非常生气，Windows 文件用 GBK 编码，再加上和 char 的 Unicode、String 的 byte[] 以及输入法输入的编码问题，直接把我搞蒙了，String 自带的一些方法用的云里雾里，能否正确全看玄学。为了能够一劳永逸的解决中文编码问题，于是此文就这样诞生了。</p></blockquote><h2 id="编码发展历史"><a href="#编码发展历史" class="headerlink" title="编码发展历史"></a>编码发展历史</h2><h3 id="ASCII-编码时代"><a href="#ASCII-编码时代" class="headerlink" title="ASCII 编码时代"></a>ASCII 编码时代</h3><p>最开始的开始，因为计算机发明在美国，所以计算机的字符是使用 ASCII 作为编码方式的，这让英语系国家们用的很开心，只需要 1 个字节就可以轻松的表示自己所有的字符，只占用 0-127，其中有 33 个控制字符，94 个可显字符。</p><p>后来，为了加入一些其他必要的符号，比如带重音的字母（法国人狂喜），希腊字母（希腊人狂喜），特殊的拉丁符号（罗马人狂喜），特殊的计算符号（科学家狂喜）等等等等。欧洲的发达国家开始打 ASCII 没有使用到的 128-255 这个区间的主意，出现了一堆各种各样的 EASCII 编码方式，即拓展 ASCII，用的比较多的有两个：OEM EASCII 和 ANSI EASCII 。</p><p>虽说扩展了整整一倍，但是因为所能表示的字符还是太少了，其他国家并不乐意，所以 EASCII 就很快的退出历史舞台，现在搜索 ASCII 一般搜索的都是 0-127 的初始版本。</p><h3 id="ANSI-编码时代"><a href="#ANSI-编码时代" class="headerlink" title="ANSI 编码时代"></a>ANSI 编码时代</h3><p>而非英语国家的人们为了使用计算机，也纷纷开始开发自己本国的文字编码方式，在 ANSI (American National Standards Institute) 的牵头下，各国的文字编码方式被 ANSI 承认之后，会作为该国文字的国际标准编码，叫作 ANSI 编码。 ANSI 编码是一种基于 ASCII 的变长编码，而且是固定的两个字节大小，前 128 个是 ASCII ，后面的是本国的文字。</p><p>虽然不同的国家都有了自己文字的编码方式也都快乐的用上了计算机，但各个文字的 ANSI 编码并不互通，导致了一种 ANSI 文字编码的文件里面不可以有其他国家的文字，否则就会乱码。</p><h4 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h4><p>中国显然也参与了这个过程中来，在 1980 年的时候，中国指定了汉字的 ANSI 编码：GB2312 即国标 2312 ，一共收录了 6763 个汉字，一级汉字 3755 个，二级汉字 3008 个，同时收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的 682 个字符。这个字符集基本上覆盖了中国大陆 99.75% 的使用频率（因为繁体中文不在里面）。而 GB2312 的编码方式如下：</p><ul><li><p>GB2312 将稀少的两个字节分为了区字节（0xB0-0xF7 87个区）和位字节（0xA1-0xFE 94个位），用一个区字节和一个位字节结合起来来表示一个汉字。</p></li><li><p>之所以从 0x80 128 和 0xA1 161 开始表示区字节和位字节，就是为了照顾 ASCII 字符可以被单个字节表示，只要检测到字符大小小于 128 ，那么这就是一个 ASCII 字符，读取一个字节即可。如果大于等于 128，那么就说明这是一个汉字，读取两个字节，并按照组合出来的编号显示汉字。</p></li></ul><h4 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h4><p>但是，可怜的 GB2312 当时设置的比较草率，还有很多的空间没有使用，再加上 6763 个汉字真的是太少了，于是在 1995 年的时候，又搞了一个汉字的 ANSI 编码，叫作 GBK 编码，国(G)标(B)扩展(K)。这个 GBK 编码覆盖了 21886 个字符，增加了额外的汉字，繁体字，日文假名等等（但是不支持朝鲜字），现在还是 Windows 默认的文字编码方式。</p><ul><li>GBK 完全兼容 GB2312。并将位字节从 0x00 开始表示汉字，因为只要区字节大于 128 即可确定后面跟着的就是位字节而不是 ASCII，然后很好的利用了 GB2312 没有分配的空间，成功的容纳了绝大部分日常使用汉字。</li></ul><h4 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h4><p>但是，两个字节的极限就是容纳 2^16 个字符，是不可能容纳所有的汉字的，所以后来又改良 GBK 出来了一个 GB18030 ，这玩意终于将整个汉字+少数民族文字全部都编到了一起。</p><ul><li>GB18030 之所以能把中国所有的文字都搞到一起，是因为它最大长度是四个字节，其中一个字节和两个字节和 GBK 基本兼容。四个字节扩充了 6k+ 的字符，完成了汉字的所有收录（注意 GB18030 是没有三个字节的情况的）。</li></ul><h3 id="Unicode-时代"><a href="#Unicode-时代" class="headerlink" title="Unicode 时代"></a>Unicode 时代</h3><p>虽说 ANSI 解决了非英语国家使用计算机的问题，但是对于网上传输其他国家的文字，因为使用 ANSI 编码不同，会导致无法解析，比如韩国电脑解析不出来 GBK 编码的文字，打开直接乱码。</p><p>随着计算机存储元器件价格的大幅度下降和全球互联网的快速发展，统一文字编码方式让不同文字的展现无障碍越来越重要。为了将所有的文字都制定一个标准之中，让所有人都能解析所有文字，Unicode 字符集就诞生了，立志于给所有文字都编上号。最初版本的 Unicode 只有两个字节，而分给 CJK 系列字符的只有两万个，导致只有最常用的 CJK 字符才能被编写到 Unicode 里面，后来经过一段曲折与斗争，Unicode 终于扩展字节，发展成为了真正的万国码。</p><ul><li><p>现在 Unicode 字符集的空间规划是按照空间平面的方式进行的，为 0-16 平面，每个平面占用两个字节，可以表示 2^16 个字符。其中最初版本的 Unicode 表示的字符为 0 号平面，被称为 BMP <code>Basic Multilingual Plane</code> 基本语言平面，表示范围为：U+0000 到 U+FFFF，可以省略最前面的平面编号，占用两个字节。而剩下的字符都在辅助平面 SMP 上面，从 U+010000 一直到 U+10FFFF，占用三个字节。</p></li><li><p>基本上 BMP 就覆盖了世界上大多数语言的绝大多数使用情景，但是要明白的是 SMP 的产生，对于 CJK 国家来说意义重大。这意味着在通用的语言字符集里面，东亚文化可以完整的保留下来，一个汉字的不同书写、演化方式，各种生僻字，这些都是绝对不允许被科技的发展而被忽略和抛弃的。</p></li></ul><p>需要注意的是，Unicode 并不是一种编码方式，而是一个字符集，它只会给字符一个独一无二的编号，而不会规定这个字符如何在计算机种存储。规定如何在计算机中存储的是编码方式，如比较早的 UTF-16 编码，它使用两个字节或者四个字节来编码字符，对于 BMP 平面上的字符，使用两个字节，对于 SMP 平面上的字符，使用四个字节。</p><ul><li>UTF-16 中，两个字节和四个字节读取区分很简单，首先都按照两个字节读取，如果读取结果在 BMP 上面有实际的字符，那么就断定这是一个 BMP 字符。如果没有实际的字符，即 U+D800 到 U+DBFF（此区间为空区间），那么就四个字节连在一起读取，判断为 SMP 平面字符。四个字节一共保存了 2^20 位有效信息，对应着 16 个 2^16 个 SMP 字符。</li></ul><p>Unicode 并没有在英语系国家快速发展开来，因为他们的大量内容都是使用 ASCII 来编码的，UTF-16 不但不兼容 ASCII，还要让他们白白的多使用一个字节的空间来存储一个字符，于是基于 Unicode 字符集的新编码方式： UTF-8 就诞生了。</p><p>UTF-8 的最大特性就是可变字符长度，对于 ASCII 的字符，编码方式和 ASCII 相同，都只占用一个字节的空间。非 ASCII 的字符也根据 Unicode 编码占用 2-4 个字符，这样就不但不需要改变原来使用 ASCII 编码的信息，还符合和其他文字一起用的标准，并且能节省大量的空间。由于这些优良的特性，使得 UTF-8 编码快速成为了互联网上最流行的文字编码形式。</p><ul><li>UTF-8 规定，对于 ASCII 的字符，占用一个字节，开头标识为 0，后面 7 位存储数据。对于非 ASCII 字符，占用几个字节，那么第一位字节开头就有几个 1，用 0 标识结束，后面跟着的字节开头设为 10。比如三字节的汉字：1110XXXX 10XXXXXX 10XXXXXX 。</li></ul><h2 id="Windows-编码"><a href="#Windows-编码" class="headerlink" title="Windows 编码"></a>Windows 编码</h2><p>因为计算机的内存中需要使用固定长度来保存字符，所以使用了 Unicode 字符集的 UTF-16 来编码存储数据，而对于内容的存储，则会将内存中的 UTF-16 转化为 GBK/UTF-8/GB18030 这些编码方式然后保存，使用 UTF-16 一是因为当时最新的 Unicode 标准就是 UTF-16 ，其次是当时 UTF-16 定长编码，无论是什么数字，都是两个字节，对于在内存中快速定位非常方便（当然现在随着 Unicode 的扩充，UTF-16 还有四个字节的），使用 GBK/UTF-8/GB18030 存储是为了节省存储空间和方便网上传输。</p><p>在 Windows 里面，打开文档的时候，会将硬盘里面用 GBK/UTF-8/GB18030 存储的数据转化为 UTF-16 ，然后放进内存里。我们看到的东西其实都是存在于内存中的。互联网上的网页也是，返回请求的数据使用 UTF-8 编码，浏览器接收之后，会解码为 UTF-16 并放到内存中，然后才能展示给我们看。我们在复制显示的数据的时候，其实都是 UTF-16 编码，粘贴到文档里面的时候，也是将 UTF-16 编码转移到对应应用程序的内存区中，最后这个应用程序将数据保存到硬盘的时候，才会将内存的 UTF-16 数据转化为定义的保存编码格式。</p><p>所以根本不需要担心复制粘贴的可以看见的数据的编码问题，只要我们能看见（打开到了内存中），不是乱码，就全部都是正确的 UTF-16。我们唯一需要担心的是保存在硬盘里面的数据，因为不知道保存的时候是按照 GBK/UTF-8/GB18030 等等的哪种编码方式保存，所以打开的时候选择的解码方式，<strong>复制</strong>的时候也需要注意前后文件存储编码是否相同（因为直接复制文本，没有经过内存的 UTF-16 转化）。</p><h2 id="输入法原理"><a href="#输入法原理" class="headerlink" title="输入法原理"></a>输入法原理</h2><p>输入法作为一个应用程序，本质上还是向另外一个应用程序的内存中写入 UTF-16 编码，因为其他的应用程序用拿到的都是确定的 UTF-16 所以输入法输入时不需要担心编码问题的。</p><h2 id="Java-中的编码"><a href="#Java-中的编码" class="headerlink" title="Java 中的编码"></a>Java 中的编码</h2><p>在创造 Java 的时候，当时最流行的 Unicode 编码就是两个字节的 UTF-16，所以就给 Java 的 char 类型设置了两字节的空间，并使用 UTF-16 作为 char 类型的存储方式，所以 Char 只能标识 BMP 范围里面的字符。</p><p>对于 String 来说，同样是使用 UTF-16 作为编码方式，不过内部存储时使用 byte[] 而不是 char[]。这是因为以前使用 char[] 来实现 String 的时候，对于 SMP 的字符因为受 char 两个字节大小的制约而部分四字节编码无法显示，改为 byte[] 之后，就没有这个问题了，即使是四字节的 SMP 字符，一样可以很好的处理。</p><p>而<strong>最需要注意</strong>的是，String 保存的 UTF-16 格式的开头，会有一个 BOM byte-order mark 字节顺序标记，用一 0xff 和 0xfe 的顺序标识。0xfe 0xff 标识大端序（位数大的在左边，适合人阅读），反之标识小端序（位数小的在左边，适合计算机阅读）。我们平时处理获取的 UTF-16 编码一般来说是大端序，直接忽略最前面返回的 0xfe 和 0xff 两个字符即可。</p><p>而 JVM 打开 <code>.java</code> 文件进行编译运行的时候，会使用系统默认的编码方式打开文件，比如 Windows 存储中文到硬盘里面的默认编码方式就是 GBK，使用 Vscode 写的 UTF-8 编码的中文无法让 JVM 正确解码，就会出错。要么更改 VScode 保存编码为 GBK，要么编译加参数更改打开文件编码为 UTF-8。或者直接用 IDEA，保存打开方式都是 UTF-8，不存在编码问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;其实原本是想写一个 Java 脚本来帮我处理下载视频的名字更改，但是因为编码的问题让我非常生气，Windows 文</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="笔记" scheme="https://xorex.space/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="中文编码" scheme="https://xorex.space/tags/%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java函数式编程</title>
    <link href="https://xorex.space/2021/03/05/728260c40cfe/"/>
    <id>https://xorex.space/2021/03/05/728260c40cfe/</id>
    <published>2021-03-05T08:01:05.000Z</published>
    <updated>2021-03-05T10:22:05.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><blockquote><p>搞了两天的函数式编程终于弄完了，也明白了这种设计方法和理念，下一步，Java 设计模式！</p></blockquote><iframe src="https://www.xmind.net/embed/bvBmma" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;搞了两天的函数式编程终于弄完了，也明白了这种设计方法和理念，下一步，Java 设计模式！&lt;</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="函数式" scheme="https://xorex.space/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JDBC思维导图</title>
    <link href="https://xorex.space/2021/03/02/9a53fb3643d5/"/>
    <id>https://xorex.space/2021/03/02/9a53fb3643d5/</id>
    <published>2021-03-02T14:43:19.000Z</published>
    <updated>2021-03-02T14:50:56.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC-思维导图"><a href="#JDBC-思维导图" class="headerlink" title="JDBC 思维导图"></a>JDBC 思维导图</h2><blockquote><p>在 JAVA 中，如何用代码和数据库进行交互呢？JDBC 告诉你答案！</p></blockquote><iframe src="https://www.xmind.net/embed/y3kVuZ" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDBC-思维导图&quot;&gt;&lt;a href=&quot;#JDBC-思维导图&quot; class=&quot;headerlink&quot; title=&quot;JDBC 思维导图&quot;&gt;&lt;/a&gt;JDBC 思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在 JAVA 中，如何用代码和数据库进行交互呢？JDBC </summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="SQL" scheme="https://xorex.space/tags/SQL/"/>
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="JDBC" scheme="https://xorex.space/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>SQL基本语句思维导图</title>
    <link href="https://xorex.space/2021/03/02/726651d44320/"/>
    <id>https://xorex.space/2021/03/02/726651d44320/</id>
    <published>2021-03-02T14:40:32.000Z</published>
    <updated>2021-03-02T14:50:59.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL-基本语句思维导图"><a href="#SQL-基本语句思维导图" class="headerlink" title="SQL 基本语句思维导图"></a>SQL 基本语句思维导图</h2><blockquote><p>其实暑假学习安全的时候，就学过一部分 SQL 的相关语句，但是都忘了，好在有了前面的基础，很快就复习好了，并且完成了这个思维导图，感觉更清晰了一点。</p></blockquote><iframe src="https://www.xmind.net/embed/wB36P6" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SQL-基本语句思维导图&quot;&gt;&lt;a href=&quot;#SQL-基本语句思维导图&quot; class=&quot;headerlink&quot; title=&quot;SQL 基本语句思维导图&quot;&gt;&lt;/a&gt;SQL 基本语句思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;其实暑假学习安全的时候，就学过一部</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="SQL" scheme="https://xorex.space/tags/SQL/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库概念思维导图</title>
    <link href="https://xorex.space/2021/03/02/8adb5d7ef601/"/>
    <id>https://xorex.space/2021/03/02/8adb5d7ef601/</id>
    <published>2021-03-02T14:36:52.000Z</published>
    <updated>2021-03-02T14:51:38.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-数据库概念思维导图"><a href="#MySQL-数据库概念思维导图" class="headerlink" title="MySQL 数据库概念思维导图"></a>MySQL 数据库概念思维导图</h2><blockquote><p>还是要了解一下什么是数据库才好啊！！！</p></blockquote><iframe src="https://www.xmind.net/embed/eZ6P3x" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MySQL-数据库概念思维导图&quot;&gt;&lt;a href=&quot;#MySQL-数据库概念思维导图&quot; class=&quot;headerlink&quot; title=&quot;MySQL 数据库概念思维导图&quot;&gt;&lt;/a&gt;MySQL 数据库概念思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;还是要了解</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="SQL" scheme="https://xorex.space/tags/SQL/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="MySQL" scheme="https://xorex.space/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>TodoList:2021-03</title>
    <link href="https://xorex.space/2021/02/23/e301ee97b31a/"/>
    <id>https://xorex.space/2021/02/23/e301ee97b31a/</id>
    <published>2021-02-23T13:34:24.000Z</published>
    <updated>2021-03-11T03:22:39.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于我寒假里面学习效率过低的问题"><a href="#关于我寒假里面学习效率过低的问题" class="headerlink" title="关于我寒假里面学习效率过低的问题"></a>关于我寒假里面学习效率过低的问题</h2><blockquote><p>因为想了想自己好像年后基本上就没怎么学东西了，即使看上去学习时间很长，但是效率真的是有些惨不忍睹，所以想了想还是需要努力提高自己的效率问题。那么大概总结了以后在学习的过程中，一些需要注意的方面。而每天结束的时候，都要看一看自己是否做到了下面的注意事项，最后将一天的学习内容和完成度记录下来，不断的提高自己的学习能力。加油，要成为一名优秀的软件工程师啊！</p></blockquote><ol><li><p>保证清醒的时间</p><ul><li>寒假光睡觉估计快把自己给睡傻了。所以以后作息必须严格要求自己，晚上 12:00 必须准时睡觉，寝室里小伙伴们在打游戏的话那可以适当的推迟睡觉的时间，然后按照保证大概 7.5 小时的晚上睡眠时间来规划早上起床的时间，保证不赖床！！！</li></ul></li><li><p>要有足够的休息。</p><ul><li>因为常常因为在出现问题的时候，会忍不住尝试一口气解决它，然后就会盯着屏幕看好几个小时，眼睛感到酸涩，头晕脑胀也舍不得停下来。但这实际上是降低了解决问题的效率的，还会有损身体健康，所以必须在软件绿屏的时候，停下来自己手头正在做的事情，去休息一小段时间。(刚刚在写下这段文字的时候就做到了，好耶！)</li></ul></li><li><p>要真正学懂里面的内容</p><ul><li>其实就是对于自己要学的东西，不是光看一边文档就行了（光看不思考怎么可能学会呢）。需要在看的同时使用思维导图来做笔记，从而达到强迫自己思考，最终加深理解。（自己学习的所有的东西都需要，注意是所有！）</li></ul></li><li><p>减少摸鱼的时间</p><ul><li>完全封禁 <code>weibo.com</code> <code>bilibili.com</code> <code>zhihu.com</code> 三个网站，只要坐在电脑面前，需要保证<strong>只能学习</strong>，绝对<strong>不做摸鱼</strong>的事情，而拿到手机，也不要漫无目的的刷新信息流，去看 bilibili 里面缓存的各种技术教程啊。以及 <a href="http://www.ruanyifeng.com/blog/">阮一峰</a> 博客上面的一些技术文章，闲暇的时候多看看嘛！</li></ul></li><li><p>每天一定量的运动</p><ul><li>运动是必不可少的，在学校规划到晚自习下课和 rfy 一起去操场跑步运动,要记住身体是革命的本钱哇。</li></ul></li><li><p>和道格的小伙伴们搞好关系</p><ul><li>虽说在一个实验室里面学习，但是到头来两个月都没有怎么说过话，想想还是要和道格的小伙伴们多交流，不然光和 IOTU 交流的话也太孤独了吧。（这个东西也要每天记录进度）</li></ul></li></ol><h2 id="关于我接下来学习方向的问题"><a href="#关于我接下来学习方向的问题" class="headerlink" title="关于我接下来学习方向的问题"></a>关于我接下来学习方向的问题</h2><blockquote><p>将接下来需要学习的知识点列一下，完成了就划掉。</p></blockquote><h3 id="大型阶段性目标"><a href="#大型阶段性目标" class="headerlink" title="大型阶段性目标"></a>大型阶段性目标</h3><ul><li><p><del>SQL 数据库的各种命令复习</del></p></li><li><p><del>JDBC 内容的学习</del></p></li><li><p><del>函数式编程</del></p></li><li><p>Java 设计模式</p></li></ul><h3 id="小型随意目标"><a href="#小型随意目标" class="headerlink" title="小型随意目标"></a>小型随意目标</h3><ul><li><p><del>Windows10 C盘目录</del></p></li><li><p><del>Windows 开机流程</del></p></li><li><p><del>编码历史和运用</del></p></li></ul><h2 id="每日进度记录"><a href="#每日进度记录" class="headerlink" title="每日进度记录"></a>每日进度记录</h2><h3 id="03-01"><a href="#03-01" class="headerlink" title="03-01"></a>03-01</h3><ul><li><p>今天第一天开学，开心的是终于回到了校园里面，学习效率可以提高了，不开心的是，上课真的是太无聊了。早上因为没有课起床比较晚，明天要 7 点半起床，起来之后直接去实验室！摸鱼的时间还是有一点，不过时间利用还是挺高的，空闲时间看了几篇技术博客。因为没有晚自习就没有运动……，还是没有和道格的小伙伴们交流QAQ。</p></li><li><p>今天主要学习了 SQL 的一些拓展命令，还有 JDBC 的一些基础用法，感觉效率同样不是特别高的样子，还需要提高啊。明天要学 SQL 事务和 JDBC 事务，加油啊！！！</p></li></ul><h3 id="03-02"><a href="#03-02" class="headerlink" title="03-02"></a>03-02</h3><ul><li><p>今天主要学了 JDBC 的大部分内容，总算把数据库相关的内容给搞结束了，好耶！早上同样因为没有课程，所以起床比较晚，运动的话，晚自习是有的，但是因为下雨了，所以就没有去跑步，明天一定！！！</p></li><li><p>学习效率仍然不是非常高，明天仍然要加油啊，函数式编程，冲啊！！！</p></li></ul><h3 id="03-03"><a href="#03-03" class="headerlink" title="03-03"></a>03-03</h3><ul><li><p>今天的学习并不是非常的顺利，我觉的最主要的原因就是因为不理解教程里面写的东西，导致学习进度非常缓慢，根本看不懂教程（或者说在看的时候并没有认真分析，只是大概看过了）。所以为了解决这个问题，决定在看教程的时候，先看视频理解整个框架，然后在<strong>细致的</strong>研究教程，并做好笔记。这里的细致研究指的是每一句话都是必须理解的，不能出现我感觉好像能理解，就放弃深究了，要明白教程上面写的每一个词语的意思！！！</p></li><li><p>其次就是摸鱼，主要是在电脑上面看视频的时候，会注意力难以集中，忍不住的开其他网页看，以后一定要改正啊！！！摸鱼真的是太浪费时间了！！！</p></li><li><p>好消息是今天没有睡懒觉，晚自习结束的时候和饶飞扬一起跑了步，还申请了学校的邮箱，以后有免费的 IDEA 白嫖了，好耶！</p></li></ul><h3 id="03-04"><a href="#03-04" class="headerlink" title="03-04"></a>03-04</h3><ul><li><p>早上去上了一节近代史就溜了，在实验室看了看昨天没弄懂的函数式编程，下午在寝室里面摸鱼看了一下午的咒术回战，晚上认真学了学（中途摸鱼看了一会肉肉姐的动态），但是学习时间太短了，虽说回寝室加了班，但还是没完成函数式编程的学习任务了（我以后再也不摸鱼了，哭.jpg）</p></li><li><p>但是晚上跑步了，和他人交流也更主动了一点，早上也没有赖床，定时休息眼睛，完全弄懂了所学的知识。emmmm，总的来说今天还是有不少收获的！</p></li><li><p>明天要加油啊！！！</p></li></ul><h3 id="03-05"><a href="#03-05" class="headerlink" title="03-05"></a>03-05</h3><ul><li>今天结束了函数式编程的学习，下午也没有做什么，晚上道格面试，人又多又杂，学不了，鸽了。</li></ul><h3 id="03-06"><a href="#03-06" class="headerlink" title="03-06"></a>03-06</h3><ul><li>今天上午周六，给自己放了一个小假期，和 rfy 一起伪造假条跑出去领了一张肥宅快乐卡（招商银行的花嫁卡），然后去学校北街改善了一下伙食，下午在寝室里面修养了一下，放假真的是太爽了。</li></ul><h3 id="03-07"><a href="#03-07" class="headerlink" title="03-07"></a>03-07</h3><ul><li>上午看了看设计模式，发现看的不是太懂，下午就回寝室下载缓存了一堆视频，为了改这一堆视频的名字，就想着写一个 Java 的脚本处理，但是遇到了关于编码的问题，于是为了一劳永逸的解决平时用到的编码问题，就开始研究字符编码的历史，运用等等。</li></ul><h3 id="03-08"><a href="#03-08" class="headerlink" title="03-08"></a>03-08</h3><ul><li>上午和下午一直在研究编码方面的问题，最后完成了 <a href="https://xorex.space/2021/03/07/b688fb992b28/">编码与开发</a> 这篇博客，真的可以说是一劳永逸的弄明白了开发所涉及到的编码问题，晚上继续看了设计模式，内容好多啊……</li></ul><h3 id="03-09"><a href="#03-09" class="headerlink" title="03-09"></a>03-09</h3><ul><li><p>混蛋，竟然在寝室里睡了一上午，以后我早上再睡懒觉我就是狗！明天早上 7:40 起床去实验室！</p></li><li><p>下午学了一下午的设计模式，感觉学习效率好低啊，要看好久才能看懂并总结好一类设计模式，好慢啊！</p></li><li><p>有了小狼给的 wifi，明天要全神贯注的学习哇！！！</p></li></ul><h3 id="03-10"><a href="#03-10" class="headerlink" title="03-10"></a>03-10</h3><ul><li><p>今天向和道格小伙伴们交流迈出了巨大的一步，但是失败了。</p></li><li><p>主要在学习新的设计模式，然而晚上加了班还没有完成。早上终于给补完了。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于我寒假里面学习效率过低的问题&quot;&gt;&lt;a href=&quot;#关于我寒假里面学习效率过低的问题&quot; class=&quot;headerlink&quot; title=&quot;关于我寒假里面学习效率过低的问题&quot;&gt;&lt;/a&gt;关于我寒假里面学习效率过低的问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;因</summary>
      
    
    
    
    <category term="阶段性总结" scheme="https://xorex.space/categories/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="规划" scheme="https://xorex.space/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络基础思维导图【一】</title>
    <link href="https://xorex.space/2021/02/21/ffb6e1744ad2/"/>
    <id>https://xorex.space/2021/02/21/ffb6e1744ad2/</id>
    <published>2021-02-21T09:14:18.000Z</published>
    <updated>2021-03-09T15:25:10.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机网络基础思维导图"><a href="#计算机网络基础思维导图" class="headerlink" title="计算机网络基础思维导图"></a>计算机网络基础思维导图</h2><blockquote><p>思维导图主要介绍了和计算机网络相关的一些基本概念，以及介绍了一些非常基础的计算机通信的过程。</p></blockquote><iframe src="https://www.xmind.net/embed/ccBMp4" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算机网络基础思维导图&quot;&gt;&lt;a href=&quot;#计算机网络基础思维导图&quot; class=&quot;headerlink&quot; title=&quot;计算机网络基础思维导图&quot;&gt;&lt;/a&gt;计算机网络基础思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;思维导图主要介绍了和计算机网络相关的一些基</summary>
      
    
    
    
    <category term="计算机体系" scheme="https://xorex.space/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="计算机网络" scheme="https://xorex.space/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="基础知识" scheme="https://xorex.space/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java的XML和JSON思维导图</title>
    <link href="https://xorex.space/2021/02/21/ea621b64d07c/"/>
    <id>https://xorex.space/2021/02/21/ea621b64d07c/</id>
    <published>2021-02-20T18:06:18.000Z</published>
    <updated>2021-02-21T16:25:51.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据文档思维导图"><a href="#数据文档思维导图" class="headerlink" title="数据文档思维导图"></a>数据文档思维导图</h2><blockquote><p>思维导图主要介绍了两种数据文档 XML 和 JSON 在 Java 中的数据解析方法。</p></blockquote><iframe src="https://www.xmind.net/embed/rc4VPM" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据文档思维导图&quot;&gt;&lt;a href=&quot;#数据文档思维导图&quot; class=&quot;headerlink&quot; title=&quot;数据文档思维导图&quot;&gt;&lt;/a&gt;数据文档思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;思维导图主要介绍了两种数据文档 XML 和 JSON 在 Java</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="XML" scheme="https://xorex.space/tags/XML/"/>
    
    <category term="JSON" scheme="https://xorex.space/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Java网络编程思维导图</title>
    <link href="https://xorex.space/2021/02/21/4766679f53f7/"/>
    <id>https://xorex.space/2021/02/21/4766679f53f7/</id>
    <published>2021-02-20T18:02:42.000Z</published>
    <updated>2021-02-21T16:25:47.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络编程思维导图"><a href="#网络编程思维导图" class="headerlink" title="网络编程思维导图"></a>网络编程思维导图</h2><blockquote><p>主要记录了使用 Java 实现服务端和客户端之间进行 TCP 协议和 UDP 协议之间通信的方法。</p></blockquote><iframe src="https://www.xmind.net/embed/QXFXMQ" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络编程思维导图&quot;&gt;&lt;a href=&quot;#网络编程思维导图&quot; class=&quot;headerlink&quot; title=&quot;网络编程思维导图&quot;&gt;&lt;/a&gt;网络编程思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;主要记录了使用 Java 实现服务端和客户端之间进行 TCP 协议</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="计算机网络" scheme="https://xorex.space/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java的Maven基础思维导图</title>
    <link href="https://xorex.space/2021/02/21/21924715f1a8/"/>
    <id>https://xorex.space/2021/02/21/21924715f1a8/</id>
    <published>2021-02-20T18:02:24.000Z</published>
    <updated>2021-02-21T16:25:54.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven基础思维导图"><a href="#Maven基础思维导图" class="headerlink" title="Maven基础思维导图"></a>Maven基础思维导图</h2><blockquote><p>思维导图主要介绍了 Maven 的一些基本使用方法。</p></blockquote><iframe src="https://www.xmind.net/embed/eyFDrU" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Maven基础思维导图&quot;&gt;&lt;a href=&quot;#Maven基础思维导图&quot; class=&quot;headerlink&quot; title=&quot;Maven基础思维导图&quot;&gt;&lt;/a&gt;Maven基础思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;思维导图主要介绍了 Maven 的一些基本</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="Maven" scheme="https://xorex.space/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java加密与安全思维导图</title>
    <link href="https://xorex.space/2021/02/21/1b4cc7a4e155/"/>
    <id>https://xorex.space/2021/02/21/1b4cc7a4e155/</id>
    <published>2021-02-20T18:02:01.000Z</published>
    <updated>2021-02-21T16:23:56.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="加密与安全思维导图"><a href="#加密与安全思维导图" class="headerlink" title="加密与安全思维导图"></a>加密与安全思维导图</h2><blockquote><p>思维导图主要记录了使用 Java 对数据进行各种加密解密的方法。</p></blockquote><iframe src="https://www.xmind.net/embed/yVNPMU" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;加密与安全思维导图&quot;&gt;&lt;a href=&quot;#加密与安全思维导图&quot; class=&quot;headerlink&quot; title=&quot;加密与安全思维导图&quot;&gt;&lt;/a&gt;加密与安全思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;思维导图主要记录了使用 Java 对数据进行各种加密解密的</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="加密与安全" scheme="https://xorex.space/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java正则表达式思维导图</title>
    <link href="https://xorex.space/2021/02/21/1521f5df53d5/"/>
    <id>https://xorex.space/2021/02/21/1521f5df53d5/</id>
    <published>2021-02-20T18:01:19.000Z</published>
    <updated>2021-03-09T12:38:48.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式思维导图"><a href="#正则表达式思维导图" class="headerlink" title="正则表达式思维导图"></a>正则表达式思维导图</h2><blockquote><p>思维导图主要记录了一下正则表达式的一些简单的使用方法。</p></blockquote><iframe src="https://www.xmind.net/embed/cFDKCv" width="800px" height="540px" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正则表达式思维导图&quot;&gt;&lt;a href=&quot;#正则表达式思维导图&quot; class=&quot;headerlink&quot; title=&quot;正则表达式思维导图&quot;&gt;&lt;/a&gt;正则表达式思维导图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;思维导图主要记录了一下正则表达式的一些简单的使用方法。&lt;/</summary>
      
    
    
    
    <category term="开发知识" scheme="https://xorex.space/categories/%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Java" scheme="https://xorex.space/tags/Java/"/>
    
    <category term="思维导图" scheme="https://xorex.space/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    <category term="正则表达式" scheme="https://xorex.space/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
